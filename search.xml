<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MMU - 商品检索Tech Design</title>
      <link href="/2023/03/19/MMU-%E5%95%86%E5%93%81%E6%A3%80%E7%B4%A2Tech-Design/"/>
      <url>/2023/03/19/MMU-%E5%95%86%E5%93%81%E6%A3%80%E7%B4%A2Tech-Design/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eb6d9e2c0924861f7d374927995d96066a2fbdb6a3c39c321de3d87dfc79df26"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Business MindMap </category>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Multi Media Understanding </tag>
            
            <tag> 商品检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMU - 视频关键帧与商品识别</title>
      <link href="/2023/03/19/MMU-%E8%A7%86%E9%A2%91%E5%85%B3%E9%94%AE%E5%B8%A7%E4%B8%8E%E5%95%86%E5%93%81%E8%AF%86%E5%88%AB/"/>
      <url>/2023/03/19/MMU-%E8%A7%86%E9%A2%91%E5%85%B3%E9%94%AE%E5%B8%A7%E4%B8%8E%E5%95%86%E5%93%81%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="46d245f58dad73a47fc05704345e607c28c5a6b96be1f59e55b4c101a3a7c9a2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Business MindMap </category>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Multi Media Understanding </tag>
            
            <tag> 视频抽帧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>站内商品泛化</title>
      <link href="/2023/03/19/%E7%AB%99%E5%86%85%E5%95%86%E5%93%81%E6%B3%9B%E5%8C%96/"/>
      <url>/2023/03/19/%E7%AB%99%E5%86%85%E5%95%86%E5%93%81%E6%B3%9B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1edf2772d58952f5a2d31509b83a2e33cfb3963906eea4970790b431f8445658"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Business MindMap </category>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频商品相关性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Instagram 视频挂车商品</title>
      <link href="/2023/03/19/Instagram-%E8%A7%86%E9%A2%91%E6%8C%82%E8%BD%A6%E5%95%86%E5%93%81/"/>
      <url>/2023/03/19/Instagram-%E8%A7%86%E9%A2%91%E6%8C%82%E8%BD%A6%E5%95%86%E5%93%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ef6f2ba2e33389f9232e7c78b40b48eca2a85d10338b0d2a397f34b5db6a9766"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Business MindMap </category>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频商品相关性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Project Management - poetry (IV)</title>
      <link href="/2023/03/09/Python-Project-Management-poetry-IV/"/>
      <url>/2023/03/09/Python-Project-Management-poetry-IV/</url>
      
        <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Poetry 可以通过 <code>config</code> 指令完成配置，或者直接在 <code>config.toml</code> 文件中完成，当我们第一次跑这个指令时，该文件会被自动创建。该文件能在一下路径下被发现。</p><ul><li><p>macOS: <code>~/Library/Preferences/pypoetry</code></p></li><li><p>Windows: <code>%APPDATA%\pypoetry</code></p></li></ul><p>对于 Unix 系统，我们遵守 XDG 规范，并且支持 <code>$XDG_CONFIG_HOME</code>，也就是默认的 <code>~/.config/pypoetry</code></p><h2 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h2><p>Poetry 也提供对项目定制化配置的能力，只需要我们对 <code>config</code> 指令传递 <code>--local</code> 选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.create false --local</span><br></pre></td></tr></table></figure><p>我们 Poetry  应用的局部配置能被存储在 <code>poetry.toml</code> 文件内，它会和 <code>pyproject.toml</code> 局别开。需要注意将该文件签入存储库的动作，因为它可能包含用于定制性的信息甚至敏感信息。</p><h2 id="列举当前配置"><a href="#列举当前配置" class="headerlink" title="列举当前配置"></a>列举当前配置</h2><p>想要列举当前的配置，我们可以给 <code>config</code> 指令传递 <code>--list</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config --list</span><br></pre></td></tr></table></figure><p>它可能会给我们一些如下的配置信息</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache-dir</span> = <span class="string">&quot;/path/to/cache/directory&quot;</span></span><br><span class="line"><span class="attr">virtualenvs.create</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">virtualenvs.in-project</span> = null</span><br><span class="line"><span class="attr">virtualenvs.options.always-copy</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">virtualenvs.options.no-pip</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">virtualenvs.options.no-setuptools</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">virtualenvs.options.system-site-packages</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">virtualenvs.path</span> = <span class="string">&quot;&#123;cache-dir&#125;/virtualenvs&quot;</span>  <span class="comment"># /path/to/cache/directory/virtualenvs</span></span><br><span class="line"><span class="attr">virtualenvs.prefer-active-python</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">virtualenvs.prompt</span> = <span class="string">&quot;&#123;project_name&#125;-py&#123;python_version&#125;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="展示单一配置字段"><a href="#展示单一配置字段" class="headerlink" title="展示单一配置字段"></a>展示单一配置字段</h2><p>如果我们想要看一个指定配置的值，我们可能在 <code>config</code> 指令后面跟上该配置的名字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.path</span><br></pre></td></tr></table></figure><h2 id="增加或者更新一个配置"><a href="#增加或者更新一个配置" class="headerlink" title="增加或者更新一个配置"></a>增加或者更新一个配置</h2><p>想要增加或者改变一个配置设置，我们能在配置的名字后传递一个值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.path /path/to/cache/directory/virtualenvs</span><br></pre></td></tr></table></figure><h2 id="移除一个指定配置"><a href="#移除一个指定配置" class="headerlink" title="移除一个指定配置"></a>移除一个指定配置</h2><p>如果我们想要移除一个之前设定的配置，我们可以使用 <code>-unset</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.path --unset</span><br></pre></td></tr></table></figure><p>该设置会取回它的默认值</p><h2 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h2><p>有时，尤其当用 CI 工具来使用 Poetry 时，使用环境变量会跟容易，并且也不必执行配置指令。</p><p>Poetry 支持这种做法，并且任何配置都能通过使用环境变量设定</p><p>当然，环境变量必须以 <code>POETRY_</code> 开头，并且它需要包含设置的大写名字，同时用下划线代替点和破折号。举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export POETRY_VIRTUALENVS_PATH=/path/to/virtualenvs/directory</span><br></pre></td></tr></table></figure><p>这种方法在隐私设置上也使用，比如凭据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export POETRY_HTTP_BASIC_MY_REPOSITORY_PASSWORD=secret</span><br></pre></td></tr></table></figure><h2 id="默认目录"><a href="#默认目录" class="headerlink" title="默认目录"></a>默认目录</h2><p>Poetry 会使用如下默认目录</p><h3 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h3><ul><li><p>Linux：<code>$XDG_CONFIG_HOME/pypoetry</code> 或 <code>~/.config/pypoetry</code></p></li><li><p>Window：<code>%APPDATA%\pypoetry</code></p></li><li><p>MacOs: <code>~/Library/Preferences/pypoetry</code></p></li></ul><p>我们可以通过设定 <code>POETRY_CONFIG_DIR</code> 环境变量的方法覆写配置目录</p><h3 id="数据目录"><a href="#数据目录" class="headerlink" title="数据目录"></a>数据目录</h3><ul><li><p>Linux：<code>$XDG_DATA_HOME/pypoetry</code> 或 <code>~/.local/share/pypoetry</code></p></li><li><p>Window：<code>%APPDATA%\pypoetry</code></p></li><li><p>MacOs: <code>~/Library/Application Support/pypoetry</code></p></li></ul><p>我们能通过设定 <code>POETRY_DATA_DIR</code> 或者 <code>POETRY_HOME</code> 环境变量的方式覆写数据目录。如果 <code>POETRY_HOME</code> 被设定，他会被给定一个更高的优先级。</p><h3 id="缓存目录"><a href="#缓存目录" class="headerlink" title="缓存目录"></a>缓存目录</h3><ul><li><p>Linux：<code>$XDG_CACHE_HOME/pypoetry</code> 或 <code>~/.cache/pypoetry</code></p></li><li><p>Window：<code>%LOCALAPPDATA%\pypoetry</code></p></li><li><p>MacOs: <code>~/Library/Caches/pypoetry</code></p></li></ul><p>我们能通过设定 <code>POETRY_CACHE_DIR</code> 环境变量的方式覆写缓存目录</p><h2 id="可用设置"><a href="#可用设置" class="headerlink" title="可用设置"></a>可用设置</h2><h3 id="cache-dir"><a href="#cache-dir" class="headerlink" title="cache-dir"></a><code>cache-dir</code></h3><p>类型：<code>string</code></p><p>含义：被 Poetry 使用的缓存目录的路径</p><p>默认值为如下目录之一</p><ul><li><p>MacOS: <code>~/Library/Caches/pypoetry</code></p></li><li><p>Windows:<code>C:\Users\&lt;username&gt;\AppData\Local\pypoetry\Cache</code></p></li><li><p>Unix: <code>~/.cache/pypoetry</code></p></li></ul><h3 id="experimental-system-git-client"><a href="#experimental-system-git-client" class="headerlink" title="experimental.system-git-client"></a><code>experimental.system-git-client</code></h3><p>类型: <code>boolean</code></p><p>默认值：<code>false</code></p><p>使用系统 git 客户端后端执行 git 相关任务</p><p>Poetry 默认使用 <code>dulwich</code> 来执行 git 相关任务而不依赖一个 git 客户端的可用性</p><p>如果我们碰到任何与之有关的问题，设置该值为 <code>true</code> 去使用系统 git 后端</p><h3 id="installer-max-workers"><a href="#installer-max-workers" class="headerlink" title="installer.max-workers"></a><code>installer.max-workers</code></h3><p>类型: <code>int</code></p><p>默认值：<code>number_of_cores + 4</code></p><p>使用并行安装程序时设置最大 worker 数。 <code>number_of_cores</code> 由 <code>os.cpu_count()</code> 确定。 如果这会引发 <code>NotImplementedError</code> 异常，则假定 <code>number_of_cores</code>为 1。</p><p>如果此配置参数设置为大于 <code>number_of_cores + 4</code> 的值，则最大 worker 数量仍限制在 <code>number_of_cores + 4</code>。</p><p>注意：</p><p>当 <code>installer.parallel</code> 被设定为 <code>false</code> 时，配置会被忽略。</p><h3 id="installer-modern-installation"><a href="#installer-modern-installation" class="headerlink" title="installer.modern-installation"></a><code>installer.modern-installation</code></h3><p>类型：<code>boolean</code></p><p>默认值：<code>true</code></p><p>用一个更现代和快速的方法安装依赖包。</p><h3 id="installer-no-binary"><a href="#installer-no-binary" class="headerlink" title="installer.no-binary"></a><code>installer.no-binary</code></h3><p>类型：<code>string|boolean</code></p><p>默认值：<code>false</code></p><p>设置这个配置之后，用户可以为所有或特定依赖包配置依赖包分发 (distribution) 格式。</p><div class="table-container"><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td><code>:all:</code> or <code>true</code></td><td>所有依赖包都禁止二进制格式</td></tr><tr><td><code>:none:</code> or <code>false</code></td><td>所有依赖包都允许二进制格式</td></tr><tr><td><code>package[,package,..]</code></td><td>对某些依赖包禁止二进制格式</td></tr></tbody></table></div><h3 id="installer-parallel"><a href="#installer-parallel" class="headerlink" title="installer.parallel"></a><code>installer.parallel</code></h3><p>类型：<code>boolean</code></p><p>默认：<code>true</code></p><p>在使用新型安装器（<code>&gt;=1.1.0</code>）时，可以使用并行执行的方式进行安装</p><h3 id="virtualenvs-create"><a href="#virtualenvs-create" class="headerlink" title="virtualenvs.create"></a><code>virtualenvs.create</code></h3><p>类型：<code>boolean</code></p><p>默认值：<code>true</code></p><p>如果还没有一个虚拟环境，就创建一个。如果它被设定为 <code>false</code>，Poetry 将不会创建一个新的虚拟环境，如果它在 <code>&#123;cache-dir&#125;/virtualenvs</code> 或 <code>&#123;project-dir&#125;/.venv</code> 路径下检测到一个虚拟环境。它将往这些环境中安装依赖，否则它会将依赖安装进系统 python 环境。</p><p>Notice：如果 Poetry 检测到当前正在一个激活的虚拟环境中运行，它将不再创建一个新的虚拟环境，不管 <code>virtualenvs.create</code> 被设置为什么值</p><h3 id="virtualenvs-in-project"><a href="#virtualenvs-in-project" class="headerlink" title="virtualenvs.in-project"></a><code>virtualenvs.in-project</code></h3><p>类型：<code>boolean</code></p><p>默认值：<code>None</code></p><p>在项目的根目录创建虚拟环境</p><p>如果没有显式得设定该值，Poetry 会在 <code>&#123;cache-dir&#125;/virtualenvs</code> 或 <code>&#123;project-dir&#125;/.venv</code> 路径下默认创建虚拟环境。</p><p>如果设定为 <code>true</code>，虚拟环境会被创建，并且被期望放在一个名为 <code>.venv</code>  的目录名下，该目录在项目的根目录内挂载。</p><p>如果设定为 <code>false</code>，Poetry 会忽略任何现存的 <code>.venv</code> 目录</p><h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h2 id="Refence"><a href="#Refence" class="headerlink" title="Refence"></a>Refence</h2><p><a href="https://python-poetry.org/docs/configuration/">配置</a></p><p><a href="https://python-poetry.org/docs/repositories/">仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poetry </tag>
            
            <tag> Project Management </tag>
            
            <tag> Configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Project Management - poetry (III)</title>
      <link href="/2023/03/05/Python-Project-Management-poetry-III/"/>
      <url>/2023/03/05/Python-Project-Management-poetry-III/</url>
      
        <content type="html"><![CDATA[<h2 id="命令">命令</h2><p>通过前两篇文章，我们已经学会使用命令行接口做一些事了，而这一章则囊括了所有的相关命令。如果想要从命令行中得到帮助，可以简单的调用 <code>poetry</code> 去查看完整的命令列表，然后对其中任何命令后面加上 <code>--help</code> 就能获得更多有用信息。</p><h3 id="全局选项">全局选项</h3><ul><li><p><code>--verbose(-v|vv|vvv)</code> 增加消息的详细程度，“-v” 为正常输出，“-vv” 为更详细得输出，“-vvv” 则是用于 debug</p></li><li><p><code>--help(-h)</code> 显式帮助信息</p></li><li><p><code>--quiet(-q)</code> 不输出任何信息</p></li><li><p><code>--ansi</code> 强制 ANSI 输出</p></li><li><p><code>--no-ansi</code> 禁用 ANSI 输出</p></li><li><p><code>--version(-V)</code> 显式应用版本</p></li><li><p><code>--no-interaction(-n)</code> 不询问任何交互问题</p></li><li><p><code>--no-plugins</code> 禁用 plugins</p></li><li><p><code>--no-cache</code> 禁用 Poetry 源 cache</p></li><li><p><code>--directory=DIRECTORY(-C)</code> Poetry 指令的工作目录，默认为当前工作目录</p></li></ul><h3 id="new">new</h3><p>这个指令会帮我们启动一个新的 Python 项目，并创建一个适合大部分项目的目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry new my-package</span><br></pre></td></tr></table></figure><p>创建的结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my-package</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.md</span><br><span class="line">├── my_package</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    └── __init__.py</span><br></pre></td></tr></table></figure><p>如果我们想要将我们的项目命名成一个区别与主目录的名字，我们可以加上 <code>--name</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry new my-folder --name my-package</span><br></pre></td></tr></table></figure><p>如果我们想要有一个 src 目录，可以使用 <code>--src</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry new --src my-package</span><br></pre></td></tr></table></figure><p>这个指令会创建一下的目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my-package</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.md</span><br><span class="line">├── src</span><br><span class="line">│   └── my_package</span><br><span class="line">│       └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    └── __init__.py</span><br></pre></td></tr></table></figure><p>另外 <code>--name</code> 选项是足够只能的，它能检测出 namespace 套件，并且为我们创建要求的结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry new --src --name my.package my-package</span><br></pre></td></tr></table></figure><p>它会创建如下结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my-package</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.md</span><br><span class="line">├── src</span><br><span class="line">│   └── my</span><br><span class="line">│       └── package</span><br><span class="line">│           └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    └── __init__.py</span><br></pre></td></tr></table></figure><h4 id="选项">选项</h4><ul><li><p><code>--name</code>: 设定最终 package 的名字</p></li><li><p><code>--src</code>：使用项目的 src 布局</p></li><li><p><code>--readme</code>：指定 readme 文件扩展，默认是 <code>md</code>，如果我们想要发布到 PyPI，需要牢记 <a href="https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/">写一个 PyPI 友好 README 的推荐</a></p></li></ul><h3 id="init">init</h3><p>这个命令帮我们交互式得创建一个 <code>pyproject.toml</code> 文件，我们需要的是提供一些关于我们套件的基本信息。</p><p>它会交互式得要求我们填写一些信息，同时使用一些只能的默认值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry init</span><br></pre></td></tr></table></figure><h4 id="选项-2">选项</h4><ul><li><p><code>--name</code>：package 的名字</p></li><li><p><code>--description</code>：package的描述</p></li><li><p><code>--author</code>：package的作者</p></li><li><p><code>--python</code>: 可兼容的 Python 版本</p></li><li><p><code>--dependency</code>：要求的一些依赖库，同时需要版本约束。格式如 <code>foo:1.0.0</code></p></li><li><p><code>--dev-dependency</code>：开发要求的一些依赖库。</p></li></ul><h3 id="install">install</h3><p><code>install</code> 指令会读取 当前项目的<code>pyproject.toml</code> 文件，解析出依赖项，并且安装它们。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install</span><br></pre></td></tr></table></figure><p>如果有一个 <code>poetry.lock</code> 文件在当前目录中，它会使用 <code>poetry.lock</code> 文件中使用的完全相同的版本依赖，而不是解析它们。这确保了每个使用该库的人都能获得完全相同版本的抵赖。</p><p>如果没有一个 <code>poetry.lock</code> 文件，Poetry 会在依赖解析后创建一个。</p><p>如果我们想要在安装时不包含一个或多个依赖组，我们可以选择使用 <code>--without</code> 选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --without test,docs</span><br></pre></td></tr></table></figure><p>我们也可以使用 <code>--with</code>选项选择安装可选依赖组的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --with test,docs</span><br></pre></td></tr></table></figure><p>当然也可以只安装指定的依赖组，这时我们需要使用 <code>--only</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --only test,docs</span><br></pre></td></tr></table></figure><p>只安装项目自身，而不安装依赖，使用 <code>--only-root</code> flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --only-root</span><br></pre></td></tr></table></figure><p>如果我们想要同步环境，并且确保它匹配锁文件，我们可以使用 <code>--sync</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --sync</span><br></pre></td></tr></table></figure><p><code>--sync</code> 选项能合与依赖组有关的选项一起使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry install --without dev --sync</span><br><span class="line">poetry install --with docs --sync</span><br><span class="line">poetry install --only dev</span><br></pre></td></tr></table></figure><p>我们还可以指定我们想要安装的 extras，这时我们需要传递 <code>-E|--extras</code> 选项。而传递 <code>--all-extras</code> 会安装项目中所有定义好的 extras</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry install --extras &quot;mysql pgsql&quot;</span><br><span class="line">poetry install -E mysql -E pgsql</span><br><span class="line">poetry install --all-extras</span><br></pre></td></tr></table></figure><p>extras 对 <code>--sync</code> 不敏感，任何没有之规定的 extras 都会被移除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --extras &quot;A B&quot;  # C 被移除</span><br></pre></td></tr></table></figure><p>默认的，每次我们运行 <code>install</code>选项，<code>poetry</code> 会安装项目的依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> poetry install</span></span><br><span class="line">Installing dependencies from lock file</span><br><span class="line"></span><br><span class="line">No dependencies to install or update</span><br><span class="line"></span><br><span class="line">  - Installing &lt;your-package-name&gt; (x.x.x)</span><br></pre></td></tr></table></figure><p>如果我们想要跳过安装，可以使用 <code>--no-root</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --no-root</span><br></pre></td></tr></table></figure><p>默认情况下，安装阶段 <code>poetry</code> 不会编译 Python 源文件成字节码。这会加速安装过程，但是首次执行会有一点耗时，因为那时候 Python 会自动编译源代码成字节码。如果想要在安装阶段就做这样的编译操作，可以使用<code>--compile</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --compile</span><br></pre></td></tr></table></figure><h4 id="选项-3">选项</h4><ul><li><p><code>--without</code> ：将要忽略的依赖组</p></li><li><p><code>--with</code>：将要包含的可选依赖组</p></li><li><p><code>--only</code>：将只包含的依赖组</p></li><li><p><code>--only-root</code> ：只安装根项目，不包含所有的依赖</p></li><li><p><code>--sync</code> ：同步环境中锁定的 package 和 指定的组</p></li><li><p><code>--no-root</code>：不安装根 package，即我们的项目</p></li><li><p><code>--dry-run</code>：输出操作，但不执行任何操作</p></li><li><p><code>--extras(-E)</code>：安装的特征，允许多值。</p></li><li><p><code>--all-extras</code>：安装所有的 extra 特征，与 <code>--extras</code> 冲突</p></li><li><p><code>--compile</code>：编译 Python 源代码成字节码</p></li></ul><p>需要注意，当指定了 <code>--only</code> 时，<code>--with</code> 和 <code>--without</code> 选项都会被忽略。</p><h3 id="update">update</h3><p>为了得到最新版本的依赖，并且更新 <code>poetry.lock</code> 文件，我们可以使用 <code>update</code> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry update</span><br></pre></td></tr></table></figure><p>该指令会解析项目的所有依赖，并且往 <code>poetry.lock</code> 文件写入真实版本</p><p>如果我们指向更新一些 package，而不是所有的，我们可以执行如下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry update requests toml</span><br></pre></td></tr></table></figure><p>不过需要注意：这里的更新不会超过 <code>pyproject.toml</code>文件内指定的版本限制。也就是说， 举个例子如<code>poetry update foo</code> ，如果 <code>foo</code> 被要求是 <code>~2.3</code> 后者 <code>2.3</code>，而此时有版本 <code>2.4</code> ， <code>foo</code> 并不会被更新。想要更新 <code>foo</code>，我们必须先更新限制，比如更新成 <code>^2.3</code>。想要更新限制，可以使用 add 指令。</p><h4 id="选项-4">选项</h4><ul><li><p><code>--without</code> ：要忽略的依赖组</p></li><li><p><code>--with</code>：要包含的可选依赖组</p></li><li><p><code>--only</code>：只包含的依赖组</p></li><li><p><code>--dry-run</code>：输出操作，但不执行任何操作</p></li><li><p><code>--lock</code>：不执行安装，只更新锁文件。</p></li></ul><h3 id="add">add</h3><p><code>add</code> 指令增加要求的依赖包到 <code>pyproject.toml</code> 文件，并且安装它们。如果我们不指定一个版本限制，Poetry 会在可选依赖包版本里选择一个合适的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add requests pendulum</span><br></pre></td></tr></table></figure><p>我们也可以指定一个限制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 允许 &gt;=2.0.5, &lt;3.0.0 的版本</span></span><br><span class="line">poetry add pendulum@^2.0.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许 &gt;2.0.5, &lt;2.1.0 的版本</span></span><br><span class="line">poetry add pendulum@~2.0.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许 &gt;= 2.0.5 版本，没有上限</span></span><br><span class="line">poetry add &quot;pendulum&gt;=2.0.5&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只允许 2.0.5 版本</span></span><br><span class="line">poetry add pendulum==2.0.5</span><br></pre></td></tr></table></figure><p>如果我们尝试增加一个已经存在的依赖包，我们会得到一个报错。不过，如果我们制定一个如上的限制，依赖会被更新到指定限制的版本。</p><p>如果我们想要得到已经存在依赖的最新版本，我们可以使用特殊的限制 <code>latest</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add pendulum@latest</span><br></pre></td></tr></table></figure><p>我们也能添加 <code>git</code> 依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add git+https://github.com/sdispater/pendulum.git</span><br></pre></td></tr></table></figure><p>或者用 ssh 取代 https</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">poetry add git+ssh://git@github.com/sdispater/pendulum.git</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or alternatively:</span></span><br><span class="line">poetry add git+ssh://git@github.com:sdispater/pendulum.git</span><br></pre></td></tr></table></figure><p>如果我们想要切刀特定分支，tag或版本，可以通过使用 add 指定它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">poetry add git+https://github.com/sdispater/pendulum.git#develop</span><br><span class="line">poetry add git+https://github.com/sdispater/pendulum.git#2.0.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or using SSH instead:</span></span><br><span class="line">poetry add git+ssh://github.com/sdispater/pendulum.git#develop</span><br><span class="line">poetry add git+ssh://github.com/sdispater/pendulum.git#2.0.5</span><br></pre></td></tr></table></figure><p>或者引用一个子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add git+https://github.com/myorg/mypackage_with_subdirs.git@main#subdirectory=subdir</span><br></pre></td></tr></table></figure><p>另外，你也可以添加一个本地目录或文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry add ./my-package/</span><br><span class="line">poetry add ../my-package/dist/my-package-0.1.0.tar.gz</span><br><span class="line">poetry add ../my-package/dist/my_package-0.1.0.whl</span><br></pre></td></tr></table></figure><p>如果我们想要依赖能在可编辑模式下被安装，我们可以使用 <code>--editable</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poetry add --editable ./my-package/</span><br><span class="line">poetry add --editable git+ssh://github.com/sdispater/pendulum.git#develop</span><br></pre></td></tr></table></figure><p>可替代的，我们也可以在<code>pyproject.toml</code> 文件中声明它。这意味着在本地目录的改变会直接反映到环境中</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">my-package</span> = &#123;path = <span class="string">&quot;../my/path&quot;</span>, develop = <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要安装的依赖包提供 extras，我们能在添加该依赖包时指定 extras：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry add &quot;requests[security,socks]&quot;</span><br><span class="line">poetry add &quot;requests[security,socks]~=2.22.0&quot;</span><br><span class="line">poetry add &quot;git+https://github.com/pallets/flask.git@1.1.1[dotenv,dev]&quot;</span><br></pre></td></tr></table></figure><p>如果我们想要给一个指定依赖组添加依赖包，我们能使用 <code>--group(-G)</code> 操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add mkdorc --group docs</span><br></pre></td></tr></table></figure><h4 id="选项-5">选项</h4><ul><li><p><code>--group(-G)</code> 要将依赖包添加到的依赖组名</p></li><li><p><code>--dev(-D)</code> 添加依赖包到开发依赖，目前已经被弃用，使用 <code>-G dev</code> 代替。</p></li><li><p><code>--editable(-e)</code> 增加 vcs 依赖或者路径依赖，并且令这些依赖为可编辑的。</p></li><li><p><code>--extras(-E)</code> 添加的依赖需要激活的 extras，允许多值</p></li><li><p><code>--optional</code> 增加一个可选依赖</p></li><li><p><code>--python</code> 要想使用依赖必须安装的 python 版本</p></li><li><p><code>--platform</code> 依赖必须要安装到的平台</p></li><li><p><code>--source</code> 使用来安装依赖的源名字</p></li><li><p><code>--allow-prereleases</code> 允许提前发布</p></li><li><p><code>--dry-run</code> 输出操作，但不执行任何操作</p></li><li><p><code>--lock</code> 不实现安装，值更新锁文件</p></li></ul><h3 id="remove">remove</h3><p><code>remove</code> 操作会从当前已安装依赖包中移除一个依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry remove pendulum</span><br></pre></td></tr></table></figure><p>如果我们想要为一个指定依赖组移除一个依赖包，我们可以使用 <code>-G</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry remove mkdocs --group docs</span><br></pre></td></tr></table></figure><h4 id="选项-6">选项</h4><ul><li><p><code>--group</code>  移除依赖项的组</p></li><li><p><code>--dev(-D)</code> 从开发依赖移除依赖包</p></li><li><p><code>--dry-run</code> 输出操作，但不执行任何操作</p></li></ul><h3 id="show">show</h3><p>为了列出所有可选依赖包，我们可以使用 <code>show</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry show</span><br></pre></td></tr></table></figure><p>如果想要看一个指定依赖包的细节，我们能传入依赖包名字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">poetry show pendulum</span><br><span class="line"></span><br><span class="line">name        : pendulum</span><br><span class="line">version     : 1.4.2</span><br><span class="line">description : Python datetimes made easy</span><br><span class="line"></span><br><span class="line">dependencies</span><br><span class="line"> - python-dateutil &gt;=2.6.1</span><br><span class="line"> - tzlocal &gt;=1.4</span><br><span class="line"> - pytzdata &gt;=2017.2.2</span><br><span class="line"></span><br><span class="line">required by</span><br><span class="line"> - calendar &gt;=1.4.0</span><br></pre></td></tr></table></figure><h4 id="选项-7">选项</h4><ul><li><p><code>--without</code> 要忽略的依赖组</p></li><li><p><code>--why</code> 当站址整个列表，或者对一个单一依赖包使用 <code>-tree</code> 时，展示为什么一个依赖包会被 include。</p></li><li><p><code>--with</code> 要包含的可选依赖组</p></li><li><p><code>--only</code> 要仅包含的依赖组</p></li><li><p><code>--no-dev</code> 不用列出 dev dependencies</p></li><li><p><code>--tree</code> 将依赖按照树状图的格式罗列</p></li><li><p><code>--latest(-l)</code> 展现最近的版本</p></li><li><p><code>--outdated(-o)</code> 展现最新的版本，但进适用于过时的依赖包</p></li><li><p><code>--all(-a)</code> 展现所有的依赖包，即使有些与当前系统不兼容</p></li></ul><h3 id="build">build</h3><p><code>build</code> 指令会去构建源档案和轮子档案。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry build</span><br></pre></td></tr></table></figure><p>需要注意，有时，只有纯 python 轮子被支持</p><h4 id="选项-8">选项</h4><ul><li><code>--format(-f)</code> 限制格式，要么是 <code>wheel</code> ，要么是 <code>sdist</code></li></ul><h3 id="publish">publish</h3><p>这个指令发布已经通过 <code>build</code> 指令构建好的依赖包，到远程仓库。</p><p>如果这是第一次提交，那么在上传之前，该指令会自动登记这个 package。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish</span><br></pre></td></tr></table></figure><p>如果我们加上 <code>--build</code> 选项，他也能构建依赖包。</p><h4 id="选项-9">选项</h4><ul><li><p><code>--repository(-r)</code>  依赖包要被登记到的仓库，默认是 <code>pypi</code>，它必须和 <code>config</code> 指令设定的其中一个仓库匹配</p></li><li><p><code>--username(-u)</code>  访问存储库的用户名</p></li><li><p><code>--password(-p)</code>  访问存储库的密码</p></li><li><p><code>--cert</code> 访问存储库的证书颁发机构</p></li><li><p><code>--client-cert</code>  用于访问存储库的客户端证书</p></li><li><p><code>--build</code> 在发布之前构建依赖</p></li><li><p><code>--dry-run</code>  除了上传依赖包以外，实现所有的操作</p></li><li><p><code>--skip-existing</code> 忽略在仓库中已存在文件的错误</p></li></ul><h3 id="config">config</h3><p><code>config</code> 指令允许我们编辑 poetry 配置设置和仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config ==list</span><br></pre></td></tr></table></figure><h4 id="使用">使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config [options] [setting-key] [setting-value1] ... [setting-valueN]</span><br></pre></td></tr></table></figure><p><code>setting-key</code> 是一个配置可选名而 <code>setting-value1</code> 则是一个配置值。</p><h4 id="选项-10">选项</h4><ul><li><p><code>--unset</code> 移除 被 <code>setting-key</code> 命名的配置元素</p></li><li><p><code>--list</code> 展示当前配置变量的列表</p></li><li><p><code>--local</code> 设置或者得到 对一个项目特殊的 配置（一个配置局部路径 <code>poetry.toml</code>）</p></li></ul><h3 id="run">run</h3><p><code>run</code> 指令在项目的虚拟环境中执行给定的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry run python -V</span><br></pre></td></tr></table></figure><p>它也能执行 <code>pyproject.toml</code> 中定义的脚本之一。</p><p>所以，如果我们已经定义一个如下的脚本</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.scripts]</span></span><br><span class="line"><span class="attr">my-script</span> = <span class="string">&quot;module:main&quot;</span></span><br></pre></td></tr></table></figure><p>我们能如下执行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry run my-script</span><br></pre></td></tr></table></figure><p>需要注意该指令没有可选项</p><h3 id="shell">shell</h3><p><code>shell</code> 指令根据 <code>$SHELL</code> 环境变量在虚拟环境中生成一个 shell，如果还不存在一个虚拟环境，则该指令会先创建一个。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry shell</span><br></pre></td></tr></table></figure><p>注意这个指令会创建一个新的 shell 并且激活虚拟环境。因此，我们应该使用 <code>exit</code> 来正确退出 shell 和虚拟环境，而不是停用。</p><h3 id="check">check</h3><p><code>check</code> 指令会检验 <code>pyproject.toml</code> 文件结构的有效性，如果有任何问题，它会返回一个细节报告。该指令也并用做 pre-commit hook。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry check</span><br></pre></td></tr></table></figure><h3 id="search">search</h3><p>该指令会在远程索引上搜索依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry search requests pendulum</span><br></pre></td></tr></table></figure><h3 id="lock">lock</h3><p>该指令锁住在 <code>pyproject.toml</code> 中制定的依赖，但是不会安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry lock</span><br></pre></td></tr></table></figure><h4 id="选项-11">选项</h4><ul><li><p><code>--check</code> 验证 <code>poetry.lock</code> 和 <code>pyproject.toml</code> 一致</p></li><li><p><code>--no-update</code> 不更新锁定的版本，只更新 lock 文件</p></li></ul><h3 id="version">version</h3><p>该指令展示项目当前的版本，或者提升项目的版本，并将新版本写回 <code>pyproject.toml</code>（如果提供了有效的提升规则的话）</p><p>新版本需要是一个有效地 <a href="https://peps.python.org/pep-0440/">PEP 440</a> 字符串或者有效地提升规则：<code>patch</code>,<code>minor</code>,<code>major</code>,<code>prepatch</code>,<code>preminor</code>,<code>premajor</code>,<code>prerelease</code>。</p><table><thead><tr><th style="text-align:center">RULE</th><th style="text-align:center">BEFORE</th><th style="text-align:center">AFTER</th></tr></thead><tbody><tr><td style="text-align:center">major</td><td style="text-align:center">1.3.0</td><td style="text-align:center">2.0.0</td></tr><tr><td style="text-align:center">minor</td><td style="text-align:center">2.1.4</td><td style="text-align:center">2.2.0</td></tr><tr><td style="text-align:center">patch</td><td style="text-align:center">4.1.1</td><td style="text-align:center">4.1.2</td></tr><tr><td style="text-align:center">premajor</td><td style="text-align:center">1.0.2</td><td style="text-align:center">2.0.0a0</td></tr><tr><td style="text-align:center">preminor</td><td style="text-align:center">1.0.2</td><td style="text-align:center">1.1.0a0</td></tr><tr><td style="text-align:center">prepatch</td><td style="text-align:center">1.0.2</td><td style="text-align:center">1.0.3a0</td></tr><tr><td style="text-align:center">prerelease</td><td style="text-align:center">1.0.2</td><td style="text-align:center">1.0.3a0</td></tr><tr><td style="text-align:center">prerelease</td><td style="text-align:center">1.0.3a0</td><td style="text-align:center">1.0.3a1</td></tr><tr><td style="text-align:center">prerelease</td><td style="text-align:center">1.0.3b0</td><td style="text-align:center">1.0.3b1</td></tr></tbody></table><h4 id="选项-12">选项</h4><ul><li><p><code>--short(-s)</code> 只输出版本号</p></li><li><p><code>--dry-run</code> 不更新 <code>pyproject.toml</code> 文件</p></li></ul><h3 id="export">export</h3><p>这个指令导出 lock 文件到其他格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry export -f requirements.txt --output requirements.txt</span><br></pre></td></tr></table></figure><p>该指令被 <a href="https://github.com/python-poetry/poetry-plugin-export">Export Poetry Plugin</a> 提供，并且也可以被用作一个 pre-commit hook。</p><p>在不指定任何选项是，这个指令只会包含定义在 <code>main</code> 依赖组里的项目以来，即 <code>tool.poetry.dependencies</code> 中的，这和 <code>install</code> 选项不同。</p><h4 id="选项-13">选项</h4><ul><li><p><code>--format(-f)</code> 导出的格式，默认为 <code>requirements.txt</code>。当前，只支持 <code>constraints.txt</code> 和 <code>requirement.txt</code></p></li><li><p><code>--output(-o)</code> 输出文件的名字，如果不填，它会输出到标准输出中</p></li><li><p><code>--dev</code> 包含开发环境依赖，目前已被弃用，使用 <code>--with dev</code> 代替</p></li><li><p><code>--extras(-E)</code> 包含的额外依赖集合</p></li><li><p><code>--without</code> 忽略的依赖组</p></li><li><p><code>--with</code> 包含的可选依赖组</p></li><li><p><code>--only</code> 仅会包含的依赖组</p></li><li><p><code>--without-hashes</code> 从导出的文件去除 hashes</p></li><li><p><code>--without-url</code> 从导出的文件中去除源仓库 urls</p></li><li><p><code>--with-credentials</code> 包括额外索引的凭据</p></li></ul><h3 id="env">env</h3><p><code>env</code> 环境指令重组子命令以与特定项目关联的 virtualenvs（虚拟环境） 交互。详细可以查询  <a href="https://python-poetry.org/docs/managing-environments/">Managing environments</a> 的相关信息</p><h3 id="cache">cache</h3><p><code>cache</code> 指令会重组子命令，以与 Poetry 的缓存进行交互</p><h4 id="cache-list">cache list</h4><p><code>cache list</code> 命令会列出 Poetry 的所有可用 缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry cache list</span><br></pre></td></tr></table></figure><h4 id="cache-clear">cache clear</h4><p><code>cache clear</code> 指令会从一个缓存的仓库中移除依赖包</p><p>比如，为了清理 <code>pypi</code> 仓库内依赖包的所有缓存，可以执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry cache clear pypi --all</span><br></pre></td></tr></table></figure><p>如果只想从缓存中移除一个指定的依赖包，我们必须指定缓存入口，方式如 <code>cache:package:version</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry cache clear pypi:requests:2.24.0</span><br></pre></td></tr></table></figure><h3 id="source">source</h3><p><code>source</code> 命名空间重组子命令，并以此为一个 Poetry 项目管理仓库源</p><h4 id="source-add">source add</h4><p><code>source add </code> 指令为项目增加源码配置。比如，为了增加 <code>pypi-test</code> 源码，我们可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry source add pypi-test https://test.pypi.org/simple/</span><br></pre></td></tr></table></figure><p>注意，我们不能使用 <code>pypi</code> 作为名字，因为它以备用来作为默认的 <code>PyPI</code> 源</p><h5 id="选项-14">选项</h5><ul><li><p><code>--default</code> 设置这个源为默认，取消 PyPI 的默认</p></li><li><p><code>--secondary</code> 将该源设为次要源</p></li></ul><p>我们不能将一个源既设定成 default 又设定成 secondary</p><h4 id="source-show">source show</h4><p><code>source show</code> 指令展现有关项目所有已配置源的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry source show</span><br></pre></td></tr></table></figure><p>可选的，我们能只展现指定的某个或某几个源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry source show pypi-test</span><br></pre></td></tr></table></figure><p>该指令只会展示通过 <code>pyproject.toml</code> 中配置的源，并且不会包括 PyPI</p><h4 id="source-remove">source remove</h4><p><code>source remove</code> 指令会从 <code>pyproject.toml</code> 中移除一个配置的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry source remove pypi-test</span><br></pre></td></tr></table></figure><h3 id="about">about</h3><p><code>about</code> 指令可以展示关于 Poetry 的全局信息，包括当前版本和 <code>poetry-core</code> 的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry about</span><br></pre></td></tr></table></figure><h3 id="help">help</h3><p><code>help</code> 指令显式全局的帮助。或者一个特殊指令的帮助。</p><p>想要展示全局的帮助选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry help</span><br></pre></td></tr></table></figure><p>为了展示对某个特定指令的帮助，比如 <code>show</code>，输出指令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry help show</span><br></pre></td></tr></table></figure><p><code>--help</code> 指令也能被传给任何指令以得到特定指令的帮助，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry show --help</span><br></pre></td></tr></table></figure><h3 id="list">list</h3><p><code>list</code> 指令展现所有可用的 Poetry 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry list</span><br></pre></td></tr></table></figure><h3 id="self">self</h3><p><code>self</code> 命名空间重组子命令去管理自身的 Poetry 安装。使用这些指令会在我们的配置目录下创建要求的 <code>pyproject.toml</code> 和 <code>poetry.lock</code> 文件</p><h4 id="self-add">self add</h4><p><code>self add</code> 命令安装 Poetry 插件，并且让他们在运行期可用。另外，他也能被使用来更新 <code>Poetry</code> 自身的依赖或者想运行环境输入额外的依赖包。</p><blockquote><p><code>self add</code> 指令和 <code>add</code> 指令的效果几乎一样，唯一的不同是，其管理的依赖包是在 Poetry 运行环境生效的。</p><p>被 <code>self add</code> 支持的依赖包指定格式和 <code>add</code> 指令完全一致</p></blockquote><p>例如，为了安装 <code>poetry-plugin-export</code> ，我们可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self add poetry-plugin-export</span><br></pre></td></tr></table></figure><p>为了安装最新的 <code>poetry-core</code> 版本，我们可以运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self add poetry-core@latest</span><br></pre></td></tr></table></figure><p>为了安装一个钥匙提供器 <code>artifacts-keyring</code>，我们可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self add artifacts-keyring</span><br></pre></td></tr></table></figure><h5 id="选项-15">选项</h5><ul><li><p><code>--editable(-e)</code> 以可编辑的权限增加 vcs/path 依赖</p></li><li><p><code>--extras(-E)</code> 为了依赖需要激活的特征</p></li><li><p><code>--allow-prereleases</code> 允许提前发布</p></li><li><p><code>--source</code> 使用来安装依赖包的源名</p></li><li><p><code>--dry-run</code> 输出执行操作但是不执行任何东西，它会隐式得打开 <code>-verbose</code></p></li></ul><h4 id="self-update">self update</h4><p><code>self update</code> 指令会在它当前的运行期环境中更新 Poetry 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self update</span><br></pre></td></tr></table></figure><h5 id="选项-16">选项</h5><ul><li><p><code>--preview</code> 允许预发布版本的安装</p></li><li><p><code>--dry-run</code> 输出执行操作但是不指定任何东西，它会隐式得打开 <code>-verbose</code></p></li></ul><h4 id="self-lock">self lock</h4><p><code>self lock</code> 指令会阅读该 Poetry 安装的系统 <code>pyproject.toml</code> 文件。系统依赖被锁定在对应的 <code>poetry.lock</code> 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self lock</span><br></pre></td></tr></table></figure><h5 id="选项-17">选项</h5><ul><li><p><code>--check</code> 检验 <code>poetry.lock</code> 与 <code>pyproject.toml</code> 一致</p></li><li><p><code>--no-update</code> 不安装锁定的版本，只更新锁文件</p></li></ul><h4 id="self-show">self show</h4><p><code>self show</code> 指令和 <code>show</code> 指令表现相似，但是是在 Poetry 运行期环境内生效。它会列举在 Poetry 安装环境中安装的所有依赖包</p><p>为了只展示通过 <code>self add</code> 增加的额外依赖包及其依赖，我们可以使用 <code>self show --addons</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self show</span><br></pre></td></tr></table></figure><h5 id="选项-18">选项</h5><ul><li><p><code>--addons</code> 只列举 addon 附加安装的依赖包</p></li><li><p><code>--tree</code> 以树结构形式列举依赖</p></li><li><p><code>--latest(-l)</code> 展示最新版本</p></li><li><p><code>--outdated(-o)</code> 只为已经过时的依赖包展示最新版本</p></li></ul><h4 id="self-show-plugins">self show plugins</h4><p><code>self show plugins</code> 指令会列举当前所有安装的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self show plugins</span><br></pre></td></tr></table></figure><h4 id="self-remove">self remove</h4><p><code>self remove</code> 指令移除一个安装的 addon 附加依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self remove poetry-plugin-export</span><br></pre></td></tr></table></figure><h5 id="选项-19">选项</h5><ul><li><code>--dry-run</code> 输出执行操作但是不指定任何东西，它会隐式得打开 <code>-verbose</code></li></ul><h4 id="self-install">self install</h4><p><code>self install</code> 指令确保所有被指定的额外依赖包都已经被安装到当前运行环境中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry self install --sync</span><br></pre></td></tr></table></figure><h5 id="选项-20">选项</h5><ul><li><p><code>--sync</code> 与锁定的依赖包和指定的组进行同步</p></li><li><p><code>--dry-run</code>  输出执行操作但是不指定任何东西，它会隐式得打开 <code>-verbose</code></p></li></ul><h2 id="Reference">Reference</h2><p><a href="https://python-poetry.org/docs/cli/#options-13">Poetry Command Instruction</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poetry </tag>
            
            <tag> Project Management </tag>
            
            <tag> Commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Project Management - poetry (II)</title>
      <link href="/2023/03/05/python-poetry-II/"/>
      <url>/2023/03/05/python-poetry-II/</url>
      
        <content type="html"><![CDATA[<h2 id="管理依赖"><a href="#管理依赖" class="headerlink" title="管理依赖"></a>管理依赖</h2><h3 id="依赖组-groups"><a href="#依赖组-groups" class="headerlink" title="依赖组 groups"></a>依赖组 groups</h3><p>Poetry 提供了一种通过 groups 去管理依赖的方法。举个栗子，我们的有些依赖只在测试项目或者构建文档时需要，所以只用给测试项目一个新的依赖组，并在组里加上相关所需依赖即可。</p><p>为了声明一个新的依赖组，我们使用 <code>tool.poetry.group.&lt;group&gt;</code> 节实现，其中 <code>&lt;group&gt;</code> 是我们依赖组的名字，比如 <code>test</code>。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.group.test]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.group.test.dependencies]</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^6.0.0&quot;</span></span><br><span class="line"><span class="attr">pytest-mock</span> = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>注意如下：</p><blockquote><p>所有的依赖都必须在组间互相兼容，因为它们会被 resolve，即使它们在安装阶段不被要求。</p><p>将依赖组想象成与依赖有关的 labels，它们不必考虑是否依赖会被 resolve 并被默认安装，它们仅仅是一种通过逻辑去管理依赖的简单方法。</p><p>在 <code>tool.poetry.dependencies</code> 中声明的依赖是隐式的 <code>main</code> group 中的一部分</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.dependencies]</span> <span class="comment"># main dependency group</span></span><br><span class="line"><span class="attr">httpx</span> = <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">pendulum</span> = <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="section">[tool.poetry.group.test.dependencies]</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^6.0.0&quot;</span></span><br><span class="line"><span class="attr">pytest-mock</span> = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>依赖组，除了隐式的 <code>main</code> group 以外，必须只能包含我们在开发过程中需要的依赖。只有通过使用 Poetry 安装它们才有可能。</p><p>如果想要声明一个依赖集合，且这些依赖项在运行期会给项目增加额外的功能，请改用 extras。最终的用户可以使用 pip 安装附加的功能。</p><p>关于 <code>dev</code> 依赖组，我们需要注意如下：</p><p>定义一个 <code>dev</code> 依赖组（poetry 版本需要 &gt; 1.2.0）的可能方法如下</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.group.dev.dependencies]</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^6.0.0&quot;</span></span><br><span class="line"><span class="attr">pytest-mock</span> = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>这个 group notation 从 Poetry 1.2.0 之后被推荐，并且在更早的版本不能使用，要相兼容 Poetry 的老版本，任何在 <code>dev-dependencies</code> 中声明的依赖都会被自动添加到 <code>dev</code> 依赖组。因此上述的 notations 等价于</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Poetry pre-1.2.x style, understood by Poetry 1.0–1.2</span></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^6.0.0&quot;</span></span><br><span class="line"><span class="attr">pytest-mock</span> = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>但以上后面的方法会被逐渐弃用，建议使用最新的 notations</p></blockquote><h4 id="可选组-Optional-groups"><a href="#可选组-Optional-groups" class="headerlink" title="可选组 Optional groups"></a>可选组 Optional groups</h4><p>一个依赖组能被声明为可选的。当我们有一组依赖只「在特殊环境被要求时」 或 「在有特殊目的时」有意义。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.group.docs]</span></span><br><span class="line"><span class="attr">optional</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.group.docs.dependencies]</span></span><br><span class="line"><span class="attr">mkdocs</span> = <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>可选组能被安装通过使用<code>--with</code> 选项，它不被默认安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --with docs</span><br></pre></td></tr></table></figure><p>Notice: 可选组依赖依然需要和其他依赖一起解决，因此应该特别注意保持它们彼此兼容。</p><h4 id="给一个组增加一个依赖"><a href="#给一个组增加一个依赖" class="headerlink" title="给一个组增加一个依赖"></a>给一个组增加一个依赖</h4><p>官方推荐使用 <code>add</code> 命令去给一个组增加依赖项，这需要加入 <code>--group</code> 选项来实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add pytest --group test</span><br></pre></td></tr></table></figure><p>如果组不存在，它会自动被创建。</p><h4 id="安装组依赖"><a href="#安装组依赖" class="headerlink" title="安装组依赖"></a>安装组依赖</h4><p>默认情况下当我们执行 <code>poetry install</code>，所有非可选组的依赖都会被安装。</p><blockquote><p>一个项目的默认依赖集合包括隐式的 <code>main</code> group（定义的 <code>tool.poetry.dependencies</code>），以及所有的不被显式标记被可选项的组</p></blockquote><p>我们可以排除安装一个或多个组的依赖通过使用 <code>--without</code> 选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --without test,docs</span><br></pre></td></tr></table></figure><p>我们也能操作多安装可选项，通过使用 <code>with</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --with docs</span><br></pre></td></tr></table></figure><p>Notice：当以上两个选项都被使用的使用，<code>--without</code> 的优先级高于 <code>--with</code>。比如如下的质量，它只会安装指定的可选 <code>test</code> group</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --with test,docs --without docs</span><br></pre></td></tr></table></figure><p>最后，在某些情况下，我们可能指向安装某一些指定组的依赖，而不去安装默认依赖集合。为了实现这样的目的，我们可以使用 <code>--only</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --only docs</span><br></pre></td></tr></table></figure><p>如果我们指向安装项目运行期的依赖，我们可以通过使用 <code>--only main</code> 的 notations 来实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --only main</span><br></pre></td></tr></table></figure><p>如果我们指向安装项目根目录，但不安装其他依赖项，我们可以使用 <code>--only-root</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --no-root</span><br></pre></td></tr></table></figure><h4 id="从一个组中移除依赖"><a href="#从一个组中移除依赖" class="headerlink" title="从一个组中移除依赖"></a>从一个组中移除依赖</h4><p>使用 <code>remove</code> 指令配合 <code>--group</code> 选项可以支持移除一个特定组的套件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry remove mkdocs --group docs</span><br></pre></td></tr></table></figure><h3 id="同步依赖"><a href="#同步依赖" class="headerlink" title="同步依赖"></a>同步依赖</h3><p>Poetry 支持所谓的依赖同步。依赖同步确保 <code>poetry.lock</code> 锁住的依赖是环境中唯一的依赖，它去掉了任何不必要的依赖。</p><p>使用方法为在<code>install</code> 指令中加入 <code>--sync</code> 选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --sync</span><br></pre></td></tr></table></figure><p>同步选项能与任何依赖组 dependency groups 相关的选项一起使用，从而同步有指定组的环境。需要注意 extras 是分开的。任何没被选来安装的 extras 总是被移除，不管是否有 <code>--sync</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poetry install --without dev --sync</span><br><span class="line">poetry install --with docs --sync</span><br><span class="line">poetry install --only dev</span><br></pre></td></tr></table></figure><p><code>--sync</code> 选项是用来代替被弃用的 <code>--remove-untracked</code> 选项的</p><h3 id="分层可选组"><a href="#分层可选组" class="headerlink" title="分层可选组"></a>分层可选组</h3><p>当我们省略 <code>--sync</code> 选项是，我们能安装可选组的任何子集，而无需删除已安装的哪些，这非常有用，比如，在多阶段 Docker 构建中，我们可以在不同的构建阶段多次执行 <code>poetry install</code></p><h2 id="库-Libraries"><a href="#库-Libraries" class="headerlink" title="库 Libraries"></a>库 Libraries</h2><p>这章主要将如何通过 Poetry 让我们的库变为可安装的</p><h3 id="版本-Versioning"><a href="#版本-Versioning" class="headerlink" title="版本 Versioning"></a>版本 Versioning</h3><p>Poetry 要求所有项目的 PEP 440 兼容版本。虽然 Poetry 不强制执行任何发布约束，但他确实鼓励在 PEP 440 范围内使用语义版本控制。这对终端用户好处颇多，并允许它们设定适当的版本约束。</p><p>比如， <code>1.0.0-hotfix.1</code> 与 PEP 440 不兼容，我们可以选择使用 <code>1.0.0-post1</code> 或 <code>1.0.0.post1</code> 作为替代。</p><h3 id="锁文件-Lock-file"><a href="#锁文件-Lock-file" class="headerlink" title="锁文件 Lock file"></a>锁文件 <code>Lock file</code></h3><p>对库而言，我们可以根据自己的喜好提交 <code>poetry.lock</code>。这可以帮助团队总是在同一个依赖版本下测试，但是，这个锁文件将不会对其他依赖它的项目有任何影响，它只会影响主项目。</p><p>如果我们不想提交锁文件并且我们正在使用 git，可以考虑把它加到 <code>.gitignore</code> 中</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>在我们能真正发布我们的库之前，我们需要将其打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry build</span><br></pre></td></tr></table></figure><p>这个命令会打包我们的库，它会有两种格式的打包：</p><ul><li><p><code>sdist</code> 是源格式</p></li><li><p><code>wheel</code> 是一种已编译套件</p></li></ul><p>一旦这个完成，我们就可以准确发布我们的库了</p><h3 id="发布到-PyPI"><a href="#发布到-PyPI" class="headerlink" title="发布到 PyPI"></a>发布到 PyPI</h3><p>Poetry 会默认发布库到 PyPI，任何被发布到 PyPI 的东西都能自动通过 Poetry 获得。因为 <code>pendulum</code> 在 PyPI 上，我们可以在不用指定任何额外的仓库的情况下依赖它。</p><p>如果我们想要风向 <code>poetry-demo</code> 到 Python 的社区，我们也会把它发布到 PyPI。操作非常简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish</span><br></pre></td></tr></table></figure><p>它将打包并且发布这个库到 PyPI，不过前提是账号是一个登记用户，并且已经合理的配置了我们的 凭据 credentials。</p><blockquote><p>Notice: <code>publish</code> 指令不会默认执行 <code>build</code>。如果我们想要构建并且发布我们的套件，只用输入 <code>--build</code> 选项。</p></blockquote><p>这时，我们的库就已经对任何人可见了。</p><h3 id="发布到一个私人仓库"><a href="#发布到一个私人仓库" class="headerlink" title="发布到一个私人仓库"></a>发布到一个私人仓库</h3><p>优势，我们可能想要保持我们的库 library 私人化，但能被团队成员访问。这种情况，我们就需要使用一个私人仓库 repository。</p><p>为了发布到一个私人仓库，我们需要把它添加到全局存储库列表中。</p><p>这样之后。我们就能将库发布到这个私人仓库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry publish -r my-repository</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://python-poetry.org/docs/managing-dependencies/">官方文档-依赖章节</a></p><p><a href="https://peps.python.org/pep-0440/#semantic-versioning">PEP 440 – Version Identification and Dependency Specification | peps.python.org</a></p><p><a href="https://python-poetry.org/docs/repositories/#private-repository-example">Private Repository Example</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poetry </tag>
            
            <tag> Project Management </tag>
            
            <tag> Group </tag>
            
            <tag> Publish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Project Management - poetry (I)</title>
      <link href="/2023/02/23/python-framework-poetry/"/>
      <url>/2023/02/23/python-framework-poetry/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>在 Python 项目中，Poetry 起到了依赖管理和打包的工作。它允许我们去宣称项目所依赖的库，并且它可以帮我们管理这些库，主要包括安装，更新和卸载等。另外 Poetry 提供一个锁文件，它能确保不重复安装，并且为发布 build 我们的项目。</p><h3 id="系统要求">系统要求</h3><p>Poetry 需要安装高于 Python3.7 的版本，并且它是多平台的，其目标立志于在 Linux，macOs 和 Windows 系统中都工作得一样好。</p><h3 id="安装">安装</h3><p>有许多安装 Poetry 的方式，比如官方安装器，手动安装，以及 <code>pipx</code> 安装，这里不过多介绍，一般的安装方式即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pipx install poetry</span><br><span class="line"><span class="comment"># 执行哪个版本对应的 pip 安装 poetry</span></span><br><span class="line">python3.9 -m pip install poetry</span><br></pre></td></tr></table></figure><h3 id="Tab-自动补全功能">Tab 自动补全功能</h3><p>Poetry 支持为 Bash, Fish 和 Zsh 产生自动补全脚本，可以通过输入命令 <code>poetry help completions</code> 获得详细信息，不过要点如下</p><h4 id="Bash">Bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动 loaded </span></span><br><span class="line">poetry completions bash &gt;&gt; ~/.bash_completion</span><br><span class="line"><span class="comment"># lazy loaded</span></span><br><span class="line">poetry completions bash &gt; <span class="variable">$&#123;XDG_DATA_HOME:-~/.local/share&#125;</span>/bash-completion/completions/poetry</span><br></pre></td></tr></table></figure><h4 id="Zsh">Zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry completions zsh &gt; ~/.zfunc/_poetry</span><br></pre></td></tr></table></figure><p>如果 <code>~/.zshrc</code> 文件中不存在下面行，我们需要添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fpath+=~/.zfunc</span><br><span class="line">autoload -Uz compinit &amp;&amp; compinit</span><br></pre></td></tr></table></figure><h4 id="On-My-Zsh">On My Zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir $ZSH_CUSTOM/plugins/poetry</span><br><span class="line">poetry completions zsh &gt; $ZSH_CUSTOM/plugins/poetry/_poetry</span><br></pre></td></tr></table></figure><p>同时，我们需要在 <code>~/.zshrc</code> 文件中将 <code>poetry</code> 加入到 <code>plugins</code> 数组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins(</span><br><span class="line">    poetry</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="基础使用">基础使用</h2><p>为基础使用介绍，我们将安装 <code>pendulm</code>，一个 <code>datetime</code> 库。</p><h3 id="项目配置">项目配置</h3><h4 id="新项目创建">新项目创建</h4><p>首先，创造一个新项目，比如 <code>poetry-test</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poetry new poetry-test</span><br><span class="line"><span class="comment"># Created package poetry_test in poetry-test</span></span><br></pre></td></tr></table></figure><p>它会创建一个 <code>poetry-test</code> 目录，并且该目录包括一下内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> tree poetry-test</span></span><br><span class="line">-----------------</span><br><span class="line">poetry-test</span><br><span class="line">├── README.md</span><br><span class="line">├── poetry_test</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── pyproject.toml</span><br><span class="line">└── tests</span><br><span class="line">    └── __init__.py</span><br></pre></td></tr></table></figure><p>这里需要着重关注一下 <code>pyproject.toml</code> ，它对于 poetry 进行项目管理至关重要，它会编排整个项目以及依赖，在刚开始初始化的时候，它是这样的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">tool.poetry</span>]</span><br><span class="line"><span class="string">name</span> <span class="string">=</span> <span class="string">&quot;poetry-test&quot;</span></span><br><span class="line"><span class="string">version</span> <span class="string">=</span> <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="string">description</span> <span class="string">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">authors</span> <span class="string">=</span> [<span class="string">&quot;Jason24-Zeng &lt;z5zeng@eng.ucsd.edu&gt;&quot;</span>]</span><br><span class="line"><span class="string">readme</span> <span class="string">=</span> <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="string">packages</span> <span class="string">=</span> [&#123;<span class="string">include</span> <span class="string">=</span> <span class="string">&quot;poetry_test&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line">[<span class="string">tool.poetry.dependencies</span>]</span><br><span class="line"><span class="string">python</span> <span class="string">=</span> <span class="string">&quot;^3.9&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">build-system</span>]</span><br><span class="line"><span class="string">requires</span> <span class="string">=</span> [<span class="string">&quot;poetry-core&quot;</span>]</span><br><span class="line"><span class="string">build-backend</span> <span class="string">=</span> <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br></pre></td></tr></table></figure><p>需要特别注意这时候的 python 版本，它需要被明确得指明，因为这个是你项目的依赖，需要特别注意是否该版本满足当前项目的要求，后面的所有依赖项都需要声称支持该版本。</p><p>Poetry 假设系统套件（package）中包含一个套件，该套件与 <code>tool.poetry.name</code> 同名，位于项目的根部。如果不满足这个情况，需要填充 <code>tool.poetry.packages</code> 来制定套件及其位置。</p><p>相似的，创痛的 <code>MANIFEST.in</code> 文件被 <code>tool.poetry.readme</code> ，<code>tool.poetry.include</code> 以及 <code>tool.poetry.excluede</code> section 取代。<code>tool.poetry.exclude</code> 被 <code>.gitignore</code> 隐式填充。</p><p>什么意思呢，在详细查看了 <code>pyproject section</code> 后，发现是说，如果一个 VCS(version control system) 被用于项目， <code>exclude</code> 字段将使用 VCS 的忽略设置，比如 git 的 <code>.gitignore</code> 作为种子。而如果没有，那么在 <code>exclude</code> 字段会只出一个文件路径的集合，这些文件在 package built 的时候不会被包括在内。形式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exclude = [<span class="string">&quot;my_package/excluded.py&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="初始化一个已有项目">初始化一个已有项目</h4><p>除构造新项目外，Poetry 还可以被用来初始化一个已经存在的目录。为了在目录 <code>pre-existing-project</code> 目录下交互式得创建一个 <code>pyproject.toml</code> 文件，可以操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd pre-existing-project</span><br><span class="line">poetry init</span><br></pre></td></tr></table></figure><h4 id="指定依赖-Specifying-Dependencies">指定依赖 Specifying Dependencies</h4><p>如果我们想要给我们的项目增加依赖，我们需要在 <code>tool.poetry.dependencies</code> 节中制定它们，如下，我们可以引入一个套件名到版本限制的映射：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">pendulum</span> = <span class="string">&quot;^2.1&quot;</span></span><br></pre></td></tr></table></figure><p>Poetry 会使用这些信息去套件仓库中搜索正确的文件集合，这些仓库可以来自于 <code>tool.poetry.source</code> 节的注册，也可能来自于 默认的<code>PyPI</code>。</p><p>另外， 除了直接手动的修改 <code>pyproject.toml</code> 文件以外，我们也可以使用 <code>add</code> 命令去添加依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add pendulum</span><br></pre></td></tr></table></figure><p>该指令会自动找到合适的版本限制，并且安装套件和其子依赖。</p><p>Poetry 支持许多依赖指定的语法，详细可参考：<a href="https://python-poetry.org/docs/dependency-specification/">Dependency specification</a></p><h3 id="使用虚拟环境">使用虚拟环境</h3><p>默认情况下，Poetry 会创建一个虚拟环境到 <code>&#123;cache-dir&#125;/vritualenvs</code>。我们可以通过修改 Poetry 的配置项来改变 <code>cache-dir</code> 的值。另外，我们也可以使用 <code>virtualenvs.in-project</code> 配置变量在项目目录下创建虚拟环境。而在虚拟环境中，我们有一下多种方式去运行指令。</p><blockquote><p>外部虚拟环境管理</p><p>Poetry 将检测并尊重已存在的外部激活的虚拟环境，这是一种强大的机制，只在替代 Poetry 内置的简化环境管理。</p><p>要利用这点，我们只用通过喜欢的方法或工具激活虚拟环境，再运行任何期望操纵环境的 Poetry 命令</p></blockquote><h4 id="使用-poetry-run">使用 <code>poetry run</code></h4><p>如果要运行脚本，可以简单的使用 <code>poetry run python your_script.py</code> 。相似的，如果有命令行工具比如 <code>pytest</code> 或 <code>black</code> 我们也可以使用 <code>poetry run pytest</code> 去运行。</p><h4 id="激活虚拟环境">激活虚拟环境</h4><p>最简单的激活虚拟环境的方法是创建一个嵌套 shell，可通过执行 <code>poetry shell</code> 创建。如果想要停用环境并且退出，则使用这个新的 shell，并输入 <code>exit</code>。如果指向停用环境，但不退出 shell，可以使用 <code>deactivate</code>。</p><p>可替代地，为了避免创建一个新的 shell，我们可以人为得激活虚拟环境，只需要执行 <code>source &#123;path_to_venv&#125;/bin/activate</code>。为了获得虚拟环境的路径，可以执行 <code>poetry env info --path</code>。为此，我们可以合并成一行的指令 <code>source $(poetry env info --path)/bin/activate</code>。要停用这个虚拟环境只用简单使用 <code>deactivate</code>。</p><p>另外，在 stack overflow 中还提及到一种方法，帮助找到已经 activated 的虚拟环境路径，并激活它，指令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;$( poetry env list --full-path | grep Activated | cut -d&#x27; &#x27; -f1 )/bin/activate&quot;</span><br></pre></td></tr></table></figure><h3 id="版本限制">版本限制</h3><p>在上面的例子中，我们想要一个版本限制为 <code>^2,1</code> 的 <code>pendulum</code> 套件。这意味着版本需要控制在大于等于 2.1.0 但小于 3.0.0（<code>&gt;=2.1.0``&lt;3.0.0</code>）。详细可参考：<a href="https://python-poetry.org/docs/dependency-specification/">Dependency specification</a></p><h3 id="安装依赖">安装依赖</h3><p>想要安装项目定义好的依赖，只用运行 <code>install</code> 指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install</span><br></pre></td></tr></table></figure><p>当我们运行这个指令的时候，会发生下面两种情况中的一种</p><h4 id="没有-poetry-lock-情况下安装">没有 <code>poetry.lock</code> 情况下安装</h4><p>如果我们在之前从来没有运行过这个 command，并且没有 <code>poetry.lock</code> 文件在项目目录内，Poetry 会简单地解析列在 <code>pyproject.toml</code> 文件中的所有依赖并且安装这些依赖套件的最新版本。</p><p>当 Poetry 结束安装，他会把所有的 package 和他们真实下载的版本写到 <code>poetry.lock</code> 文件，并以此锁定项目到使用这些指定版本。我们应该 commit <code>poetry.lock</code> 文件到项目仓库，这样才能让所有工作在项目中的人都被锁定到同一个依赖的版本。</p><h4 id="有-poetry-lock-情况下安装">有 <code>poetry.lock</code> 情况下安装</h4><p>这是第二种场景，如果已经有一个 <code>poetry.lock</code> 和 <code>pyproject.toml</code> 文件时，如果我们运行 <code>poetry install</code> ，它意味着要么我们之前运行过 <code>poetry install</code> 指令，要么项目的其他人运行过 <code>install</code> 命令，并且 commit <code>poetry.lock</code> 文件到项目中。</p><p>无论是上面哪种情况，在一个 <code>poetry.lock</code> 文件存在时运行 <code>install</code>，都会安装我们列在 <code>pyproject.toml</code> 的所有依赖，但 <code>Poetry</code> 使用列在 <code>poetry.lock</code> 中的真实版本，它确保 package 的版本和工作在这个项目的其他人保持一致。最终，我们会拥有所有 <code>pyproject.toml</code> 文件要求的依赖，但他们可能不是非常最新可用的版本。这是被设计好的，而不是问题，它能确保项目不会因为依赖中不可预期的改变而被打断。</p><h4 id="提交-poetry-lock-文件给版本控制。">提交 <code>poetry.lock</code> 文件给版本控制。</h4><p>提交这个文件到版本控制是重要的，因为它会让其他任何配置这个项目的人使用「和我们使用的完全相同版本的」依赖。我们的连续继承服务器（Continuous Integration Server），生产机器，团队的其他开发者，每件事和每个人都在同样的依赖下运行，这减少了「仅影响部署的某些部分」的 bug 的可能性。即使我们独立开发，6 个月后，当我们需要重新安装项目，我们也能自信安装的依赖依然能工作，即使发布的依赖到那时会有许多全新的版本。</p><h4 id="只安装依赖">只安装依赖</h4><p>现在的项目在默认情况下是在可编辑模式下安装的，如果我们指向安装依赖，可以执行 <code>install</code> 指令，同时加上 <code>--no-root</code> 的 flag:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --no-root</span><br></pre></td></tr></table></figure><h3 id="更新依赖到最新版本">更新依赖到最新版本</h3><p>上面提到， <code>poetry.lock</code> 文件防止我们自动获得依赖的最新版本。为了更新最新的版本，使用 <code>update</code> 命令，他将根据 <code>pyproject.toml</code> 文件获取最新的匹配版本，并且更新 <code>poetry.lock</code> 文件到新版本。这等同于删除 <code>poetry.lock</code> ，并重新运行 <code>install</code></p><blockquote><p>Poetry 会显示一个 Warning 如果执行一个安装指令时，<code>poetry.lock</code> 和 <code>pyproject.toml</code> 不同步</p></blockquote><h2 id="Reference">Reference</h2><p><a href="https://python-poetry.org/docs/#enable-tab-completion-for-bash-fish-or-zsh">Poetry 官方文档</a></p><p><a href="https://stackoverflow.com/questions/60580332/poetry-virtual-environment-already-activated">poetry Virtual environment already activated</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poetry </tag>
            
            <tag> Project Management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 技巧</title>
      <link href="/2023/02/04/C-%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/02/04/C-%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="C-技巧"><a href="#C-技巧" class="headerlink" title="C++ 技巧"></a>C++ 技巧</h2><p>C++ 技巧这个话题很大， 对于练习时长不足两年半的我根本没法表述清楚，但是在日常的工作中，又会频繁得跟 C++ 打交道，这使我迫切得需要开这样一篇话题，记录并提炼出通过从书籍和日常工作中得到的知识和经验。好好利用好 C++ 这个强大的武器，使未来的工作或学习更加一帆风顺。</p><p>以下记录的，都是我在日常工作中「经常使用到的」，或者在「优化时发现能提升效率」的技巧。很可能技巧都比较简单，但是从我微不足道的经验来看，令人受益匪浅。</p><h3 id="P2-编译期-Assertions（断言）"><a href="#P2-编译期-Assertions（断言）" class="headerlink" title="P2 编译期 Assertions（断言）"></a>P2 编译期 Assertions（断言）</h3><p>随着泛型编程的大量使用，我们越来越需要更好的静态检查（static checking）以及更个性化的错误信息输出。</p><p>假使我们想要设计一个做 safe casting 的函数，也就是想要在讲一个类型转变成另一个类型时，所有的信息都能被保留。或者说，大类型不能被 cast 成小类型。</p><p>我们可以先简单设计出如下的模板函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">To</span>, <span class="keyword">class</span> <span class="title">From</span>&gt;</span></span><br><span class="line"><span class="function">To <span class="title">safe_reinterpret_cast</span><span class="params">(From from)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(From) &lt;= <span class="built_in"><span class="keyword">sizeof</span></span>(To));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;To&gt;(from);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假使我们使用同样的语法调用这个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = ...;</span><br><span class="line"><span class="keyword">char</span>* p = safe_reinterpret_cast&lt;<span class="keyword">char</span>*&gt;(i);</span><br></pre></td></tr></table></figure><p>显然，这段代码是想将 <code>int</code> 类型的数据 safe cast 成 <code>char*</code> 类型。不过这里有<strong>几个</strong>可以优化的地方：<code>assert()</code> 内部的结果其实是一个<strong>编译期常量</strong>，但是 <code>assert()</code> 函数只有在<strong>运行期</strong>才会报错，这可能会导致我们在将代码迁移到其他系统时，无法发现并定位错误。我们可以</p><ol><li><p>考虑如何将报错提前到编译期。</p></li><li><p>考虑编译期报错时如何输出有效信息。 </p></li></ol><p>Van Horn  曾经就考虑过这个问题，他依赖长度为 0 的数组是非法的原则，设计了一种编译期报错的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATIC_CHECK(expr) &#123;char unnamed[(expr) ? 1: 0]&#125;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">To</span>, <span class="keyword">class</span> <span class="title">From</span>&gt;</span></span><br><span class="line"><span class="function">To <span class="title">safe_reinterpret_cast</span><span class="params">(From from)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">STATIC_CHECK</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(From) &lt;= <span class="built_in"><span class="keyword">sizeof</span></span>(To));</span><br><span class="line">    <span class="keyword">return</span> interpret_cast&lt;To&gt;(From);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span>* somePointer = ...;</span><br><span class="line"><span class="keyword">char</span> c = safe_reinterpret_cast&lt;<span class="keyword">char</span>&gt;(somePointer);</span><br></pre></td></tr></table></figure><p>如果系统指针比 char 要大，编译器就会报错，说我们尝试创造一个长度为 0 的数组。</p><p>不过这样问题也比较明显：错误信息太模糊了，而且很难提供可移植性的个性化错误信息。错误信息没有一定需要遵循的规则，这些规则都是由编译器决定。</p><p>更好的解决方法是去依赖一个有信息名字的模板，幸运的话，编译器会在错误信息中提到模板的名字。我们可以设计成如下情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">bool</span>&gt; <span class="class"><span class="keyword">struct</span> <span class="title">CompileTimeChecker</span> &#123;</span></span><br><span class="line">    <span class="built_in">CompileTimeChecker</span>(...);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">CompileTimeChecker</span>&lt;</span><span class="literal">false</span>&gt; &#123; &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATIC_CHECK(expr, msg) \</span></span><br><span class="line"><span class="meta">&#123;\</span></span><br><span class="line"><span class="meta">    class ERROR_##msg &#123;&#125;; \</span></span><br><span class="line"><span class="meta">    (void)sizeof(CompileTimeChecker<span class="meta-string">&lt;(expr) != 0&gt;</span>((ERROR_##msg()))); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">To</span>, <span class="keyword">class</span> <span class="title">From</span>&gt;</span></span><br><span class="line"><span class="function">To <span class="title">safe_reinterpret_cast</span><span class="params">(From from)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">STATIC_CHECK</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(From) &lt;= <span class="built_in"><span class="keyword">sizeof</span></span>(To),</span><br><span class="line">        Destination_Type_Too_Narrow);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;To&gt;(from);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">void</span>* somePointer = ...;</span><br><span class="line"><span class="keyword">char</span> c = safe_reinterpret_cast&lt;<span class="keyword">char</span>&gt;(somePointer);</span><br></pre></td></tr></table></figure><p>这样的话，报错信息就可能变成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot convert ERROR_Destination_Type_Too_Narrow to CompileTimeChecker&lt;<span class="literal">false</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="P0-模板偏特化"><a href="#P0-模板偏特化" class="headerlink" title="P0 模板偏特化"></a>P0 模板偏特化</h3><p>模板偏特化允许我们对模板可实例化集合中的一个子集进行特化。这也是在泛型编程中经常使用的技术。</p><p>下面通过一个例子去简单介绍什么是模板偏特化。</p><p>首先，我们假设有一个模板 <code>Widget</code>，它有两个类型参数，如下式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Window</span>, <span class="keyword">class</span> <span class="title">Controller</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">    <span class="comment">// 泛型实现</span></span><br><span class="line">    ...</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>而后，我们可以对这个类进行显式的特化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&lt;</span>ModalDialog, MyController&gt; &#123;</span><br><span class="line">    <span class="comment">// 特化实现</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在看到如上的特化定义后，无论我们在哪里定义一个类型为 <code>Widget&lt;ModalDialog, MyController&gt;</code> 的对象，编译器都会使用特化实现的版本，而对<code>Widget</code> 的其他实现，编译器则会使用泛型的实现。</p><p>然后，我们有时候想对任意的 <code>Window</code> 和 特定的 <code>Controller</code>(这里假设是 <code>MyController</code>) 进行特化实现，这时，我们就会使用到模板的偏特化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Window</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&lt;</span>Window, MyController&gt; &#123;</span><br><span class="line">    <span class="comment">// 模板偏特化</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>特别地，在一个类模板的偏特化中，你只会指定一部分模板参数，而保持另一部分模板参数的泛化性。当我们实例化程序中的类模板时，编译器会尝试找到最匹配的。这个匹配算法是复杂且准确的，这意味着，即使我们已经有一个 <code>Widget</code> 在任意 <code>Window</code> 和指定的 <code>MyContorller</code> 的偏特化模板，我们还可以偏特化下面的类模板，且在编译时依然能保证准确性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ButtonArg</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&lt;</span>Button&lt;ButtonArg&gt;, MyController&gt; &#123;</span><br><span class="line">    <span class="comment">// 进一步的模板偏特化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这确保了我们在实例化模板时的灵活性，但需要注意一点，我们不能偏特化函数：无论是成员函数还是非成员函数：</p><ul><li><p>即使我们能完全特化一个类模板的成员函数，我们不能偏特化类成员函数（这里的为什么，等后续补充）</p></li><li><p>对命名空间级别的(非成员的)模板函数，我们也不能偏特化，但是我们可以做一个非常接近的操作，就是重载（overloading），在实际应用中，这意味着我们只能对函数的参数做细粒度的特化，而不是对返回值或内部使用类型，比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="function">T <span class="title">Fun</span><span class="params">(U obj)</span></span>; <span class="comment">// 原始模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="keyword">void</span> Fun&lt;<span class="keyword">void</span>, U&gt;(U obj); <span class="comment">// 非法偏特化, 不能对返回值做细粒度特化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function">T <span class="title">Fun</span><span class="params">(Window obj)</span></span>; <span class="comment">// 合法重载</span></span><br></pre></td></tr></table></figure></li></ul><p>对编译器编写者而言，偏特化缺乏粒度的特性，显然让生活更容易，但是对开发者来说，却有不好的影响，后面的一个工具特别是为了减少这种偏特化的限制。</p><h3 id="P1-局部类"><a href="#P1-局部类" class="headerlink" title="P1 局部类"></a>P1 局部类</h3><p>我们能在函数里定义类，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Local</span> &#123;</span></span><br><span class="line">        ... 成员变量 member variables ...</span><br><span class="line">        ... 成员函数定义 member function definitions ...</span><br><span class="line">    &#125;;</span><br><span class="line">    ... 使用 Local 这个类的代码 ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，局部类有一些限制：</p><ol><li>不能定义静态成员变量</li><li>无法使用统一命名空间里的非静态局部变量</li></ol><p>不过，这个局部类有趣的地方是：你能在模板函数中使用他们。特别的，在模板函数中定义的局部类能使用 enclosing 函数的模板变量。</p><p>下面这个模板函数 <code>MakeAdapter</code> 目的是让一个接口适用于另一个。有了局部类的帮助，<code>MakeAdapter</code> 及时实现了一个接口。局部类存储了泛型的成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interface</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">P</span>&gt;</span></span><br><span class="line"><span class="function">Interface* <span class="title">MakeAdapter</span><span class="params">(<span class="keyword">const</span> T&amp; obj, <span class="keyword">const</span> P&amp; arg)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Local</span> :</span> <span class="keyword">public</span> Interface &#123;</span><br><span class="line">     <span class="keyword">public</span>:</span><br><span class="line">         <span class="built_in">Local</span>(<span class="keyword">const</span> T&amp; obj, <span class="keyword">const</span> P&amp; arg)</span><br><span class="line">            : <span class="built_in">obj_</span>(obj), <span class="built_in">arg_</span>(arg) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            obj_.<span class="built_in">Call</span>(arg_);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">private</span>:</span><br><span class="line">        T obj_；</span><br><span class="line">        P arg_;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Local</span>(obj, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部类有一个独特的特征：他们是 final 的。外部用户不能从一个函数内部的类继承。如果没有局部类，我们不得不在一个隔离的翻译单元中增加一个未命名的命名空间。</p><h3 id="P1-将实常数映射成类型"><a href="#P1-将实常数映射成类型" class="headerlink" title="P1 将实常数映射成类型"></a>P1 将实常数映射成类型</h3><p>有一个非常简单的模板，对许多泛型编程 idioms（习语）有用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> v&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Int2Type</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span>value = v&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Int2Type</code> 对输入的不同常实数会生成不同的类型，这是因为不同的模板实例化是不同的类型。另外，产生这个类型的值，会被保存在枚举成员 <code>value</code> 中</p><p>这个模板为什么被广泛应用呢？无论何时我们需要给一个常实数附以类型时，我们都可以使用它。通过这个方式，我们可以依赖编译期计算的结果，去选择不同的函数，从而可以有效得依赖一个常实数实现静态分派（static dispatch）</p><p>典型的，在如下两个情况都满足的时候，我们应该使用 <code>Int2Type</code> ：</p><ol><li><p>取决于一个编译期常数，我们会去挑选几个不同函数中的一个</p></li><li><p>我们需要在编译期做这样的分派</p></li></ol><p>对于运行期的分派，我们可以简单地使用 <code>if-else</code> 语句或者 <code>switch</code> 的语句。运行期的消耗在大多数情况下可忽略不计。但是，我们通常不这么做。（不这么做的原因不是运行期更耗时）<code>if-else</code> 语句要求两个分支都得成功编译，即使我们在编译期时就可以知道 <code>if</code> 条件的选择情况。</p><p>下面通过一个例子来解释上面这句话的意思。</p><p>假设我们正在设计一个泛型容器 <code>NiftyContainer</code>，这个容器被包含的类型模板化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">NiftyContainer</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假使 <code>NiftyContainer</code> 容器包含了指向类型 <code>T</code> 的对象的指针。为了复制包含在容器中的对象，我们要么调用它自身的拷贝构造函数，要么调用一个为多态类型（polymorhic types）准备得虚函数 <code>Clone()</code>。至于选择哪种函数，我们可以通过一个布尔类型的模板参数获得信息。</p><p>为此，我们很容易想到以下的实现方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> isPolymorphic&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NiftyContainer</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T* pSomeObj = ...;</span><br><span class="line">        <span class="keyword">if</span> (isPolymorphic) &#123;</span><br><span class="line">            T* pNewObj = pSomeObj-&gt;<span class="built_in">Clone</span>();</span><br><span class="line">            <span class="comment">// ...多态算法...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T* pNewObj = <span class="keyword">new</span> <span class="built_in">T</span>(*pSomeObj);</span><br><span class="line">            <span class="comment">// ...非多态算法...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样实现可能让编译器通不过编译。比如，多态算法要求使用 <code>Clone</code> 成员函数，如果任何类型没有定义一个这样的成员函数，<code>NiftyContainer::DoSomething</code> 将不能编译。的确我们在编译的时候已经能决定执行哪个 if 状态了，但是，编译器不会管这些，他会尝试编译两个分支，即使优化器后面会删除无用的代码。也就是说，我们可能会出现这样的情况：我们尝试调用 <code>NiftyContainer&lt;int, false&gt;</code> 的 <code>DoSomething</code> 函数，编译器却在 <code>pObj-&gt;Clone()</code> 处报错了。</p><p>另外，非多态分支的代码也可能编译失败，如果 <code>T</code> 是一个多态类型并且非多态代码分支尝试 <code>new</code> 一个 <code>T(*pObj)</code> ，这也可能导致代码编译失败：如果 <code>T</code> 禁用了拷贝构造函数或者让拷贝构造函数变成私有的。PS. 好的多态类就应该做这些考虑。</p><p>让编译器不用操心代码是否是无用，这个想法是好的，但是有更让人满意的解决方法，在使用这个简洁的解决方法的时候，我们会用到 <code>Int2Type</code>：它会根据布尔值 <code>isPolymorphic</code> 的不同，将其即时得转变成两个不同的类型，然后我们就可以利用简单的重载去使用 <code>Int2Type&lt;isPolymorhic&gt;</code> 啦。代码重构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> isPolymorphic&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NiftyContainer</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(T* pObj, Int2Type&lt;<span class="literal">true</span>&gt;)</span> </span>&#123;</span><br><span class="line">        T* pNewObj = pObj-&gt;<span class="built_in">Clone</span>();</span><br><span class="line">        <span class="comment">// ...多态算法...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(T* pObj, Int2Type&lt;<span class="literal">false</span>&gt;)</span> </span>&#123;</span><br><span class="line">        T* pNewObj = <span class="keyword">new</span> <span class="built_in">T</span>(*pSomeObj);</span><br><span class="line">        <span class="comment">// ...非多态算法...</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(T* pObj)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">DoSomething</span>(pObj, Int2Type&lt;isPolymorphic&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个重载实现了两个需要的算法，这上面的 trick 点在于，因为编译器不会编译它们不适用的模板函数，它只检查它们语法。这样，我们就在编译期实现了模板代码的分派。</p><h3 id="P1-类型到类型-Type2Type-的映射"><a href="#P1-类型到类型-Type2Type-的映射" class="headerlink" title="P1 类型到类型 Type2Type 的映射"></a>P1 类型到类型 Type2Type 的映射</h3><p>前面已经提到，我们不能对模板函数进行偏特化，但是，有时我们又需要模拟相似的功能。参考下面函数，它会通过将参数传给构造函数的方式，创建一个新的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="function">T* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> U&amp; arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在假设我们的应用中有一个规则：</p><ol><li><p>类型为 <code>Widget</code> 的对象是不能碰的遗留代码，我们想要构建必须传入两个参数，第二个参数必须是一个固定值，比如 -1。</p></li><li><p>从 <code>Widget</code> 继承过来的类，不会有这个问题。</p></li></ol><p>现在的问题是：我们怎么特化 <code>Create</code> 来让它用和其他类型不同的方式处理 <code>Widget</code>? 显而易见的一种方法，是创造一个单独的<code>CreateWidget</code> 函数去解决特殊的问题。但是，你没有一个统一的接口去创建 <code>Widget</code>s 和它的继承对象，从而让 <code>Create</code> 在任何泛型代码中不好用。 </p><p>就像刚开始就提到的，我们不能偏特化一个函数，具体在这个例子中便是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="function">Widget* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> U&amp; arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>(arg, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决这一类问题仅有的工具是重载 overloading，一种办法是传一个类型为 T 的 dummy 对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="function">T* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> U&amp; arg, T <span class="comment">/* dummy */</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="function">Widget* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> U&amp; arg, Widget <span class="comment">/* dummy */</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Widget</span>(arg, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的解决方式很容易让我们创建一个随意的复杂对象，但是我们却永远不会使用它。我们需要个更轻便的载体去将关于 <code>T</code> 的类型信息传给 <code>Create</code>，这时候我们就可以考虑使用 <code>Type2Type</code>，一个类型的代表，一个可以传递给重载函数的轻标识符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Type2Type</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T OriginalType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 <code>Type2Type</code> 不包含任意值，但是有一个不同的类型引导实例化不同的 <code>Type2Type</code>，这正是我们想要的。有了这个工具，我们就可以轻松写下如下优化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="function">T* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> U&amp; arg, Type2Type&lt;T&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="function">Widget* <span class="title">Create</span><span class="params">(<span class="keyword">const</span> U&amp; arg, Type2Type&lt;Widget&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Widget</span>(arg, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 Create()</span></span><br><span class="line">String* pStr = <span class="built_in">Create</span>(<span class="string">&quot;Hello&quot;</span>, Type2Type&lt;String&gt;());</span><br><span class="line">Widget* pW = <span class="built_in">Create</span>(<span class="number">100</span>, Type2Type&lt;Widget&gt;());</span><br></pre></td></tr></table></figure><p><code>Create</code> 的第二个参数只是用来选择合理的重载，现在我们能对不同的 <code>Type2Type</code> 实例去特化 <code>Create</code>。</p><h3 id="P2-类型选择"><a href="#P2-类型选择" class="headerlink" title="P2 类型选择"></a>P2 类型选择</h3><p>有些泛型代码会根据一个布尔常数去选择两个类型中的一种。这一章就是要讨论这个的实现。</p><p>举个前面提到的例子 <code>NiftyContainer</code>，假设我们想要在底层存储中使用 <code>std::vector</code>。显然，对多态类型我们必须存储指针而非值本身，而对非多态类型，我们可能想要存储值，因为这更加方便高效。</p><p>首先是 <code>NifityContainer</code> 这个类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> isPolymorphic&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NiftyContainer</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们需要存储要么一个 <code>vector&lt;T*&gt;</code> （<code>isPolymorphic</code> 为 <code>true</code>）要么一个 <code>vector&lt;T&gt;</code> （<code>isPolymorphic</code> 为 <code>false</code>）。总之，我们需要根据 <code>isPolymorphic</code> 的值决定定义的  <code>ValueType</code>要么是 <code>T*</code>，要么是<code>T</code>。</p><p>我们可以定义一个如下的特征类模板解决问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> isPolymorphic&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NiftyContainerValueTraits</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T* ValueType;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NiftyContainerValueTraits</span>&lt;</span>T, <span class="literal">false</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">typedef</span> T ValueType;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> isPolymorphic&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NiftyContainer</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">typedef</span> NiftyContainerValueTraits&lt;T, isPolymorphic&gt;</span><br><span class="line">        Traits;</span><br><span class="line">    <span class="keyword">typedef</span> typanme Traits::ValueType ValueType;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种处理问题的方式显得不必要的笨重，并且，他没法扩展，每次类型选择，我们都必须定义一个信息的特征类型模板。</p><p>库类模板 <code>Select</code> 给我们提供了一个能完美解决问题的类型选择方法。它的定义使用了模板偏特化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> flag, <span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Select</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T Result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Select</span>&lt;</span><span class="literal">false</span>, T, U&gt; &#123;</span><br><span class="line">    <span class="keyword">typedef</span> U Result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里解释一下这个 <code>Select</code> 怎么工作的。</p><ol><li><p>当 <code>flag</code> 为 <code>true</code> 时，编译器会使用第一个泛型定义因此 <code>Result</code> 等于 <code>T</code></p></li><li><p>当 <code>flag</code> 为 <code>false</code> 时，特化的模板被使用，因此 <code>Result</code> 等于 <code>U</code></p></li></ol><p>现在，我们就能更简单得定义 <code>NiftyContainer::ValueType</code> 了，而且也更容易扩展了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> isPolymorphic&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NiftyContainer</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Select&lt;isPolymorphic, T*, T&gt;::Result</span><br><span class="line">        ValueType;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="P1-在编译期检测可转化性和继承性"><a href="#P1-在编译期检测可转化性和继承性" class="headerlink" title="P1 在编译期检测可转化性和继承性"></a>P1 在编译期检测可转化性和继承性</h3><p>我们在实现模板函数和模板类时，经常会想一个问题：给定随意两种类型 <code>T</code> 和 <code>U</code> ，我们该怎么检测是否 <code>U</code> 为 <code>T</code> 的继承呢？在编译期发现这样的关系是在泛型库类实现高级优化的关键。在一个泛型函数中，如果我们能确定这个类实现了某一个特殊的接口，我们就可以根据这个信息去采用最佳算法。在编译器发现这个意味着我们不用使用 在编译期及其耗时的<code>dynamic_cast</code>。</p><p>发现继承关系依赖一个甄别可转化性的更一般化的机制。而更一般的问题是，我们要怎么检测随机的一个类型 <code>T</code> 是否支持向 <code>U</code> 的自动转化。</p><p>有一种解决方法，它会依赖 <code>sizeof</code> 的实现。<code>sizeof</code> 有着许多令人吃惊的力量：我们可以对任何表达式使用<code>sizeof</code>，不管这个表达式多么的复杂，它能返回表达式的大小，且不用拖到运行期。这意味着 <code>sizeof</code> 能意识到重载，模板实例化，转化规则等一切参与 C++ 表达式的东西。事实上，<code>sizeof</code> 背后暗含一个用来推到表达式类型的完整设施。最终，<code>sizeof</code> 会丢弃表达式并且只返回结果的大小。</p><p>检测转换能力 的想法依赖于 <code>sizeof</code> 与 重载函数的共用。我们提供一个函数的两个重载，一个接受类型，并且将其转化成 <code>U</code>，另一个接受其他任何类型。我们用一个临时的类型 <code>T</code> 去调用重载函数，而<code>T</code> 对 <code>U</code> 的可转换能力正式我们想要判断的。如果前一个调用 <code>U</code> 的函数被调用，那我们知道 <code>T</code> 能转化成<code>U</code>，如果的另一个函数被调用，那么 <code>T</code> 就不能被转化成 <code>U</code>。我们设计两个重载函数返回不同大小的类型，然后便可以使用<code>sizeof</code> 去判断了。这两个类型本身不重要，只要它们大小不同就行。</p><p>ok，解释到这里了，我们来具体实现以下它。</p><p>首先，我们创建两个不同大小的类型，显然 <code>char</code> 和 <code>long double</code> 有不同的大小，但是 C++ 标准并不保证一定不同，一个傻瓜式的定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Small;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Big</span> &#123;</span><span class="keyword">char</span> dummy[<span class="number">2</span>]&#125;;</span><br></pre></td></tr></table></figure><p>根据定义，<code>sizeof(Small)</code> 为 1，<code>Big</code> 的大小未知，但一定大于 1，这是我们唯一能保证的东西。</p><p>下一步，我们需要两个重载函数，一个接受 <code>U</code> 并且返回一个 <code>Small</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Small <span class="title">Test</span><span class="params">(U)</span></span>;</span><br></pre></td></tr></table></figure><p>我们怎么写一个函数接受其他任何呢？一个模板不是解决方法，因为模板总是要求最佳匹配条件，因此掩盖可转化的类型。我们需要一个匹配，这个匹配会比自动转化更糟糕，也就是，转化只会在没有自动转化时发生。我很快看了一下施行于函数调用的转化规则，然后发现了所谓的省略符匹配规则（ellipsis match），这时最差的匹配了，也是我们正好希望的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Big <span class="title">Test</span><span class="params">(...)</span></span>;</span><br></pre></td></tr></table></figure><p>传一个 C++ 的对象到有省略符的函数会有未定义的结果，但这不重要。事实上没有东西会真的调用这个函数，它甚至不会实现。想想 <code>sizeof</code> 实际不会衡量函数的入参。</p><p>现在，我们需要实施 <code>sizeof</code> 到 <code>Test</code> 的调用，给它传递一个 <code>T</code> 作为入参。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> convExists = <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="built_in">Test</span>(<span class="built_in">T</span>())) == <span class="built_in"><span class="keyword">sizeof</span></span>(Small);</span><br></pre></td></tr></table></figure><p>对，<code>Test</code> 的调用得到一个默认构造对象 <code>T()</code>，然后 <code>sizeof</code> 会分离出表达式结果的大小，它要么是 <code>sizeof(Small)</code> 要么是 <code>sizeof(Big)</code>，这取决于是否编译器能发现一种转化。</p><p>有一个小问题，如果 <code>T</code> 的默认构造函数是私有的，表达式 <code>T()</code> 会在编译时失败，我们的所有努力都会没有回报，不够新云的是，有一个非常简单的解决方法，就是使用一个稻草人函数（strawman function），它返回一个 T 对象（记住，我们在处于 <code>sizeof</code> 的神奇世界中，没有表达式会被实际求值）。因此，编译器和我们都会非常满意。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">MakeT</span><span class="params">()</span></span>;  <span class="comment">// 没有实现，不止不会做任何是，甚至在运行期都没有真实存在过</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> convExists = <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="built_in">Test</span>(<span class="built_in">MakeT</span>())) == <span class="built_in"><span class="keyword">sizeof</span></span>(Small);</span><br></pre></td></tr></table></figure><p>现在我们把这个函数类的所有东西包裹在一起，隐藏类型推导的所有细节，只展现结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coversion</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">char</span> Small;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Big</span> &#123;</span><span class="keyword">char</span> dummy[<span class="number">2</span>];&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Small <span class="title">Test</span><span class="params">(U)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Big <span class="title">Test</span><span class="params">(...)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">MakeT</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">        exists = <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="built_in">Test</span>(<span class="built_in">MakeT</span>())) == <span class="built_in"><span class="keyword">sizeof</span></span>(Small);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们可以测试 <code>Coversion</code> 类模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    cout &lt;&lt; Conversion&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt;::exists &lt;&lt; <span class="string">&#x27; &#x27;</span></span><br><span class="line">         &lt;&lt; Conversion&lt;<span class="keyword">char</span>, <span class="keyword">char</span>*&gt;::exists &lt;&lt; <span class="string">&#x27; &#x27;</span></span><br><span class="line">         &lt;&lt; Conversion&lt;<span class="keyword">size_t</span>, vector&lt;<span class="keyword">int</span>&gt;&gt;::exists &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个小程序会打印 <code>1 0 0</code>，注意虽然 <code>vector</code> 的确实现了一个构造函数，这个函数获取一个入参 <code>size_t</code>，但是这个转化测试返回 0，因为那个构造函数时 explicit 的。explicit 构造函数时没法担任转换函数的。</p><p>我们能在 <code>Coversion</code> 中增加一个常数 <code>sameType</code>，如果 <code>T</code> 和 <code>U</code> 表示同一个类型时为 <code>true</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conversion</span> &#123;</span></span><br><span class="line">    ...同上...</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span>sameType = <span class="literal">false</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过 <code>Conversion</code> 的一个片特护来实现 <code>sameType</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conversion</span>&lt;</span>T, T&gt;</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span>exists = <span class="number">1</span>, sameType = <span class="number">1</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，有了 <code>Conversion</code> 的帮助，我们现在可以非常容易得定义继承了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUPERSUBCLASS(T, U) \</span></span><br><span class="line"><span class="meta">    (Conversion<span class="meta-string">&lt;const U*, const T*&gt;</span>::exists &amp;&amp; \</span></span><br><span class="line"><span class="meta">    !Conversion<span class="meta-string">&lt;const T*, const void*&gt;</span>::sameType)</span></span><br></pre></td></tr></table></figure><p>如果 <code>U</code> 是 public 继承自 <code>T</code>,  或者 <code>T</code> 和 <code>U</code> 是同一类型的，<code>SUPERSUBCLASS(T, U)</code>会传入 <code>true</code>。当 <code>SUPERSUBCLASS</code> 对 <code>const T*</code> 和 <code>const U*</code> 做可转化评估时，只有三种情况 <code>const U*</code> 能隐式转化成 <code>const T*</code>：</p><ol><li><p><code>T</code>  和 <code>U</code> 同类型</p></li><li><p><code>T</code> 是 <code>U</code> 的模糊 public 基类</p></li><li><p><code>T</code> 是 <code>void</code></p></li></ol><p>最后一种情况被第二个测试消除了。实际上，接受第一种情况作为 <code>is-a</code> 的退化情况是非常有用的，因为在实际使用中，我们经常会考虑一个类是它自己的 superclass。如果我们需要更严格的测试，可以这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUPERSUBCLASS_STRICT(T, U) \</span></span><br><span class="line"><span class="meta">    (SUPERSUBCLASS(T, U) &amp;&amp; \</span></span><br><span class="line"><span class="meta">    !Conversion<span class="meta-string">&lt;const T, const U&gt;</span>::sameType)</span></span><br></pre></td></tr></table></figure><p>为什么代码都加上<code>const</code> 修饰？因为我们不想因为 <code>const</code> 导致转型失败，如果模板代码实施了 两次 <code>const</code>，第二个 <code>const</code> 会被忽略掉，总之，保险起见，我们在 <code>SUPERSUBCLASS</code> 中都是用 <code>const</code>。</p><h3 id="P2-一个关于-type-info-的外覆类（wrapper）"><a href="#P2-一个关于-type-info-的外覆类（wrapper）" class="headerlink" title="P2 一个关于 type_info 的外覆类（wrapper）"></a>P2 一个关于 <code>type_info</code> 的外覆类（wrapper）</h3><p>标准 C++ 提供了一个类：<code>std::type_info</code> ，它能让我们在运行期调查类的类型。通常 <code>type_info</code> 会和 <code>typeid</code> 操作符并用，后者会传一个指向 <code>type_info</code> 对象的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">(Base* pObj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 比较两个 type_info 对象，它们分别与 *pObj 和 Derived 有关</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in"><span class="keyword">typeid</span></span>(*pObj) == <span class="built_in"><span class="keyword">typeid</span></span>(Derived)) &#123;</span><br><span class="line">        <span class="comment">// pObj 事实上指向一个 Derived 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>typeid</code> 操作符返回一个指向类型为 <code>type_info</code> 对象的引用。除了支持比较算法 <code>operator==</code> 和 <code>operator!=</code> 以外，<code>type_info</code>提供了额外的两个函数。</p><ul><li><p><code>name</code> 成员函数，以 <code>const char*</code> 的格式，返回一个类型的文本表达。因为没有将类名映射成字符串的标准方法，所以我们不应该期望 <code>typeid(Widget)</code> 返回 “Widget” 这样的字符串。一个比较令人满意的做法是让 <code>type_info:name</code> 对所有类型返回空字符串。</p></li><li><p><code>before</code> 成员函数，它给 <code>type_info</code> 对象带来了一种次序关系。使用 <code>type_info::before</code> ，我们能对 <code>type_info</code> 对象建立索引</p></li></ul><p>不幸的是，<code>type_info</code> 的好用功能被包装得难以使用。<code>type_info</code> 类将拷贝构造函数和拷贝赋值操作符禁用，这使得存储 <code>type_info</code> 对象变得不可能。不过我们可以存储指向 <code>type_info</code> 对象的指针。这个通过 <code>typeid</code> 返回的对象，采用了 static 的存储方式，因此我们不用担心其寿命，但我们得关注指针间的辨识。</p><p>C++ 标准不能保证每次调用 <code>typeid(int)</code> 能返回指向同一个 <code>type_info</code> 对象的引用。如此一来，我们没法比较指向 <code>type_info</code> 对象的指针了。为此，我们必须将指针存储到 <code>type_info</code> 对象中，并且通过运用 <code>type_info::operator==</code> 到解引用的方式，进行指针的比较。</p><p>如果我们想要对 <code>type_info</code> 对象进行排序，我们事实上必须存储指向 <code>type_info</code> 的指针，并且这次我们必须使用 <code>before</code> 这个成员函数。这样一来，如果我们想要使用 STL 的有序容器，必须写一个小的仿函数 <code>functor</code> 并处理指针。</p><p>这些笨拙到足以让我们委派一个关于 <code>type_info</code> 的外覆类来存储指向一个 <code>type_info</code> 的指针，并且，这个外覆类还需要提供：</p><ul><li><p>所有 <code>type_info</code> 的成员函数</p></li><li><p>value 的语义（与 reference 相对），即 public 的拷贝构造函数和拷贝赋值操作符</p></li><li><p>定义 <code>operator&lt;</code> 和 <code>operator==</code> 来保证比较的无暇</p></li></ul><p>Loki 定义了一个外覆类 <code>TypeInfo</code>，它实现了一个与 <code>type_info</code> 有关的，非常方便的外覆类，其大纲如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeInfo</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TypeInfo</span>();</span><br><span class="line">    <span class="built_in">TypeInfo</span>(<span class="keyword">const</span> std::type_info&amp;);</span><br><span class="line">    <span class="built_in">TypeInfo</span>(<span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line">    TypeInfo&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">before</span><span class="params">(<span class="keyword">const</span> TypeInfo&amp;)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> std::type_info* pInfo_;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 比较操作符</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> TypeInfo&amp;, <span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> TypeInfo&amp;, <span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> TypeInfo&amp;, <span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> TypeInfo&amp;, <span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> TypeInfo&amp;, <span class="keyword">const</span> TypeInfo&amp;);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> TypeInfo&amp;, <span class="keyword">const</span> TypeInfo&amp;);</span><br></pre></td></tr></table></figure><p>由于其转换构造函数接受一个 <code>std::type_info</code> 的入参，我们能直接比较类型为 <code>TypeInfo</code> 和 <code>std::type_info</code> 的对象，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">(Base* pObj)</span> </span>&#123;</span><br><span class="line">    TypeInfo info = <span class="built_in"><span class="keyword">typeid</span></span>(Derived);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in"><span class="keyword">typeid</span></span>(*pObj) == info) &#123;</span><br><span class="line">        <span class="comment">// pBase 事实上指向一个 Derived 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝和比较 <code>TypeInfo</code> 对象在许多情况下都非常重要。</p><h3 id="P2-NullType-和-EmptyType"><a href="#P2-NullType-和-EmptyType" class="headerlink" title="P2 NullType 和 EmptyType"></a>P2 <code>NullType</code> 和 <code>EmptyType</code></h3><p>Loki 定义了两个非常简单的类型: <code>NullType</code> 和 <code>EmptyType</code>，我们能在类型计算中使用它们去编辑边界 case。</p><p><code>NullType</code> 是一个用于作为类型的空标记（null marker）的类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NullType</span> &#123;</span>&#125;;</span><br></pre></td></tr></table></figure><p>我们通常不创造类型为 <code>NullType</code> 的对象，它只被使用来暗示”我的类型不被人感兴趣”（一般是用作模板特化的终止，有点类似于 <code>enable_if</code> 的使用）。</p><p>而第二个 helper 类型时 <code>EmptyType</code>，它的定义是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EmptyType</span> &#123;</span>&#125;;</span><br></pre></td></tr></table></figure><p><code>EmptyType</code> 是一个可被继承的合法类型，且我们可以传递 <code>EmptyType</code> 的对象。同门可以使用这个类型作为模板的默认类型。</p><h3 id="P0-Type-Traits"><a href="#P0-Type-Traits" class="headerlink" title="P0 Type Traits"></a>P0 Type Traits</h3><p>Traits 是一种泛型编程技巧，它允许在编译期做一些基于类型的决策，很像我们想要在运行期基于类做的决策。通过加上这个可以解决许多软件工程难题的间接层，traits 能让我们在「类型确定」以外的地方做类型相关的决策。这可以让最终的代码更简洁，更可读，并且更好维护。</p><p>通常，当我们的泛型程序需要的时候，我们要写自己的 trait 模板和类。可是，有些 traits，可被用于任何类型，它们可以帮助我们根据类别特性去更好地裁剪模板代码。</p><p>比如，设想一下，我们要是想实现一个拷贝算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InIt, <span class="keyword">typename</span> OutIt&gt;</span><br><span class="line"><span class="function">OutIt <span class="title">Copy</span><span class="params">(InIt first, Init last, OutIt result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(; first != last; ++first, ++result) &#123;</span><br><span class="line">        *result = *first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理论上，我们不必实现这样的算法，因为它与 <code>std::copy</code> 功能重复，但我们可能想要对某些特殊的类型特化我们的拷贝链路。</p><p>假设我们为一个多处理器机器开发代码，这台机器有一个非常快的 <code>BitBlast</code> 原生函数，并且我们也想尽可能充分利用好这个原生函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prototype of BitBlast in &quot;SIMD_Primitives.h&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BitBlast</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">void</span>* dest, <span class="keyword">size_t</span> bytes)</span></span>;</span><br></pre></td></tr></table></figure><p>当然 <code>BitBlast</code> 这能在拷贝原生类型和简单的旧数据结构时使用。我们不能对一个有 nontrival 拷贝构造函数的类型使用 <code>BitBlast</code>。然后，我们想要实现 <code>Copy</code>  函数，在可能的时候，它可以利用好 <code>BitBlast</code>, 而对于一些精巧类型，该函数会退化到使用更广泛，保守的算法。这样， <code>Copy</code> 操作符在原生类型的范围内就会自动的跑的更快了。</p><p>为了实现这个效果，我们需要对类型做两个测试：</p><ol><li><p><code>InIt</code> 和 <code>OutIt</code> 是通常的指针么？（相比更 fancy 的迭代器类型而言）</p></li><li><p><code>InIt</code> 和 <code>OutIt</code> 指针指向的类型允许 bitwise 的拷贝么？</p></li></ol><p>如果我们能在编译器找到这些问题的答案，并且这两个答案都是 yes，我们就可以使用 <code>BitBlast</code>。否则，我们必须依赖最通常的 <code>for</code> 循环。</p><p>而 Type Traits 就能帮忙解决这个问题。</p><h4 id="实现指针-traits"><a href="#实现指针-traits" class="headerlink" title="实现指针 traits"></a>实现指针 traits</h4><p>Loki 定义了一个类模板 <code>TypeTraits</code> ，它收集了一些列泛型类型的 Traits。<code>TypeTraits</code> 使用内部模板特化，并且将结果暴露出来。</p><p>大部分类型 traits 的实现依赖完全特化或者偏特化，比如，下面的代码决定是否一个类型 <code>T</code> 是否是一个指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeTraits</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">PointerTraits</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">enum</span> &#123;</span> result = <span class="literal">false</span> &#125;;</span><br><span class="line">        <span class="keyword">typedef</span> NullType PointeeType;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">PointerTraits</span>&lt;</span>U*&gt; &#123;</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> &#123;</span> result = <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">typedef</span> U PointeeType;</span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isPointer = PointerTraits&lt;T&gt;::result &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> PointerTraits&lt;T&gt;::PointeeType PointeeType;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第一个定义引入了 <code>PointerTraits</code> 类模板，他表示 <code>T</code> 不是一个指针，并且所谓的被指类型不能被运用。（<code>NullType</code> 是一个在不被运用的情况的占位符行别）</p><p>第二个定义则是介绍了一种 <code>PointerTraits</code> 的偏特化，是一个可以匹配任何指针类型的特化体。对于指向任意东西的指针，这个特化都会被认为是一个比 「针对任何指针类型的泛型模板」更加合适的候选。总之，如果面对指针，则该特化体运行，<code>result</code> 被赋值为 <code>true</code>，而 <code>PointeeType</code> 被合理得定义。</p><p>现在我们可以观察一下 <code>std::vector::iterator</code> 的实现，它是一个简谱的指针呢，还是一个精巧类型？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> IterIsPtr = TypeTraits&lt;vector&lt;<span class="keyword">int</span>&gt;::iterator&gt;::isPointer；</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;vector&lt;int&gt;::iterator is &quot;</span> &lt;&lt; iterIsPtr ? <span class="string">&quot;fast&quot;</span> : <span class="string">&quot;smart&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相似的，<code>TypeTraits</code> 实现一个 <code>isReference</code> 常数和一个 <code>ReferenceType</code> 类型定义。对于一个引用类型 <code>T</code> ，<code>ReferencedType</code> 是一个 <code>T</code> 指向的类型，如果 <code>T</code> 是一个直接的类型（即非引用），<code>ReferenceType</code> 是 T 自己。</p><p>检测指向成员的指针会有一些不同，需要的特化体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeTraits</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">PToMTraits</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">enum</span> &#123;</span> result = <span class="literal">false</span> &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>, <span class="keyword">class</span> <span class="title">V</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">PToMTraits</span>&lt;</span>U V::*&gt; &#123;</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> &#123;</span> result = <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isMemberPointer = PToMTraits&lt;T&gt;::result &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="检测基础类型"><a href="#检测基础类型" class="headerlink" title="检测基础类型"></a>检测基础类型</h4><p><code>TypeTraits&lt;T&gt;</code> 实现了一个 <code>isStdFundamental</code> 编译期常数，这个常数会表明 <code>T</code> 是否是一个 C++ 标准里的基础类型。C++ 标准的基础类型包含类型 <code>type</code> 和所有数字类型，即浮点类型和整型。<code>TypeTraits</code> 定义了一堆常数 用来展现已知类型属于哪种类别的。</p><p>可以简单提一下 <code>typelists</code>，其让检测「是否一个类型属于一系列已知类型」变得简单。目前，我们所需要了解的是一下表达：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TL::IndexOf&lt;T, <span class="built_in">TYPELIST_nn</span>(comman-separated list of types)&gt;::value</span><br></pre></td></tr></table></figure><p>其中，nn 是类型列表中类型的个数，上面的表达式会返回 T 在列表中的位置（以零为 base），如果 T 不再列表中，就返回 -1。比如，当且晋档 T 是一个有符号整型时，表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TL::IndexOf&lt;T,<span class="built_in">TYPELIST_4</span>(<span class="keyword">signed</span> <span class="keyword">char</span>, <span class="keyword">short</span> <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">int</span>)&gt;::value</span><br></pre></td></tr></table></figure><p>会大于等于 0 。</p><p>针对基本类型， <code>TypeTraits</code> 有如下部分定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeTraits</span> &#123;</span></span><br><span class="line">    ... as above ...</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">TYPELIST_4</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> in, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>)</span> UnsignedInts</span>;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">TYPELIST_4</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">char</span>, <span class="keyword">short</span> <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">int</span>)</span> SignedInts</span>;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">TYPELIST_3</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">double</span>, <span class="keyword">long</span> <span class="keyword">double</span>)</span> Floats</span>;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">TYPELIST_3</span><span class="params">(<span class="keyword">bool</span>, <span class="keyword">char</span>, <span class="keyword">wchar_t</span>)</span> OtherInts</span>;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isStdUnsignedInt = TL::IndexOf&lt;T, UnsignedInts&gt;::value &gt;= <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isStdsignedInt = TL::IndexOf&lt;T, SignedInts&gt;::value &gt;= <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isStdIntegral == isStdUnsignedInt || isStdSignedInt ||</span><br><span class="line">        TL::IndexOf&lt;T, OtherInts&gt;::value &gt;= <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isStdFloat = TL::IndexOf&lt;T, Floats&gt;::value &gt;= <span class="number">0</span> &#125;; </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isStdArith = isStdIntegral || isStdFloat &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> isStdFundamental = isStdArith || isStdFloat ||</span><br><span class="line">          Conversion&lt;T, <span class="keyword">void</span>&gt;::sameType &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用类型列表和 <code>TL::IndexOf</code> 给了我们快速推测类型信息的能力，因此我们不用写一个模板特化体多次。</p><p>检测基础类型的真实实现更加复杂，允许更多厂家自行扩展类型（比如 <code>int64</code> 和 <code>long long</code>）</p><h4 id="优化的参数类型"><a href="#优化的参数类型" class="headerlink" title="优化的参数类型"></a>优化的参数类型</h4><p>在模板代码，我们优势需要回答如下问题。已知一个随意的类型 <code>T</code>，用什么办法传递和接收类型 <code>T</code> 的对象作为函数的参数最为高效？通常，最有效地方式是：当对象时精细类型时使用 by reference，而对纯量类型时使用 by value。对于精细类型，我们可以避免额外的临时开销（空间开销 + 时间开销），而对纯量类型，我们避免了使用引用的不直接性（时间开销）。</p><p>需要认真对待的一个细节是：C++  不允许指向引用的引用，因此，如果 <code>T</code> 已经是一个引用，我们不能在它的基础上加一层引用。</p><p>基于大量对函数进行参数优化的分析，我们设计了如下的算法。假设我们正在处理的参数类型为 <code>ParameterType</code>。</p><blockquote><p>如果 <code>T</code> 是某个类型的引用，<code>ParameterType</code> 和 <code>T</code> 一样，保持不变。因为引用的引用不被允许。</p><p>反之，</p><pre><code>如果 `T` 是一个纯量类型 `int`，`float` 等， `ParameterType` 是 `T`。因为基础类型最好通过值传递。如果 `ParameterType` 是 `T` 的一个常量引用 `const T&amp;`，通常，非基础类型最好以引用传递。</code></pre></blockquote><p>这个算法的一个重要成就是：它避免了对引用进行引用的错误。比如，如果我们结合 <code>bind2nd</code> 与 <code>mem_fun</code> 标准库函数，这种错误会出现。</p><p>实现 <code>TypeTraits::ParameterType</code> 非常容易，只要使用我们已经掌握的技巧以及之前定义的 traits - <code>ReferencedType</code> 和 <code>isPrimitive</code> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeTraits</span> &#123;</span></span><br><span class="line">    ... as above ...</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      typdef Select&lt;isStdArith || isPointer || isMemberPointer, T, ReferencedType&amp;&gt;::Result ParameterType;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不幸的是，这个方案如果遇到「以值传递枚举类型时」会失败，因为没有已知的办法去决定是否一个类型是一个枚举类型。</p><h4 id="去除-strip-装饰词"><a href="#去除-strip-装饰词" class="headerlink" title="去除 strip 装饰词"></a>去除 strip 装饰词</h4><p>已知一个类型 <code>T</code>，我们很容易借助 <code>const T</code> 取得常数版兄弟。但是，做其相反的操作会有点困难。同样的，优势我们可能想要去掉 <code>volatile</code> 这类修饰词 qualifier。</p><p>举个例子，我们考虑构建一个智能指针，对染我们想要允许用户创建指向 <code>const</code> 对象的智能指针，比如 <code>SmartPtr&lt;const Widget&gt;</code>，我们依然需要在内部改变指针，使其指向 <code>Widget</code>。因此，在 <code>SmartPtr</code> 内部，我们需要从 <code>const Widget</code> 里获取到 <code>Widget</code>。</p><p>实现一个 <code>const</code> 去除器比较简单，我们需要再次使用到模板的偏特化:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeTraits</span> &#123;</span></span><br><span class="line">    ... as above ...</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">     <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">UnConst</span> &#123;</span></span><br><span class="line">        <span class="keyword">typedef</span> U Result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">UnConst</span>&lt;</span><span class="keyword">const</span> U&gt; &#123;</span><br><span class="line">        <span class="keyword">typedef</span> U Result;</span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     <span class="keyword">typedef</span> UnConst&lt;T&gt;::Result NonConstType;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用-TypeTraits"><a href="#使用-TypeTraits" class="headerlink" title="使用 TypeTraits"></a>使用 <code>TypeTraits</code></h4><p><code>TypeTraits</code> 能帮我们做许多有趣的事情。比如：我们可以通过前面这章的技巧来实现 Copy 函数，它会使用 <code>BitBlast</code> （和前面章节提到的一样）；我们可以使用 <code>TypeTraits</code> 去辨别两个迭代器的类别信息，并以 <code>Int2Type</code> 模板去分派 Copy 去调用 <code>BitBlast</code> 还是一个典型的 Copy 函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CopyAlgoSelector</span> &#123;</span> Conservative, Fast &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Conservative routine-works for any type</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InIt, <span class="keyword">typename</span> OutIt&gt;</span><br><span class="line"><span class="function">OutIt <span class="title">CopyImpl</span><span class="params">(InIt first, InIt last, OutIt result,</span></span></span><br><span class="line"><span class="params"><span class="function">   Int2Type&lt;Conservative&gt;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first, ++result) </span><br><span class="line">        *result = *first;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Fast routine-works only for pointers to raw data template &lt;typename InIt, typename OutIt&gt;</span></span><br><span class="line"><span class="function">OutIt <span class="title">CopyImpl</span><span class="params">(InIt first, InIt last, OutIt result,</span></span></span><br><span class="line"><span class="params"><span class="function">   Int2Type&lt;Fast&gt;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> n = last-first;</span><br><span class="line">    <span class="built_in">BitBlast</span>(first, result, n * <span class="built_in"><span class="keyword">sizeof</span></span>(*first)); </span><br><span class="line">    <span class="keyword">return</span> result + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InIt, <span class="keyword">typename</span> OutIt&gt;</span><br><span class="line"><span class="function">OutIt <span class="title">Copy</span><span class="params">(InIt first, InIt last, OutIt result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> TypeTraits&lt;InIt&gt;::PointeeType SrcPointee; </span><br><span class="line">    <span class="keyword">typedef</span> TypeTraits&lt;OutIt&gt;::PointeeType DestPointee; </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> copyAlgo =</span><br><span class="line">        TypeTraits&lt;InIt&gt;::isPointer &amp;&amp; </span><br><span class="line">        TypeTraits&lt;OutIt&gt;::isPointer &amp;&amp; </span><br><span class="line">        TypeTraits&lt;SrcPointee&gt;::isStdFundamental &amp;&amp; </span><br><span class="line">        TypeTraits&lt;DestPointee&gt;::isStdFundamental &amp;&amp; </span><br><span class="line">        <span class="built_in"><span class="keyword">sizeof</span></span>(SrcPointee) == <span class="built_in"><span class="keyword">sizeof</span></span>(DestPointee) ? Fast :</span><br><span class="line">                Conservative &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CopyImpl</span>(first, last, result, Int2Type&lt;copyAlgo&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 Copy 本身没做多少事，有趣的是函数内部的部分，枚举值 <code>copyAlgo</code> 用来选择哪一种实现。逻辑如下：如果两个迭代器是指针，如果两个指向的类型都是基础的，或者如果两个指向的类型 size 相同，那么我们可以使用 <code>BitBlast</code> 。最后一种情况是一种有趣的变形，如果我们这么做：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p1 = ...;</span><br><span class="line"><span class="keyword">int</span>* p2 = ...;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>* p3 = ...;</span><br><span class="line"><span class="built_in">Copy</span>(p1, p2, p3);</span><br></pre></td></tr></table></figure><p>这时 Copy  会也应该调用快速版本，即使源类型和目标类型不同。</p><p><code>Copy</code> 的缺点是它没法加速所有可以加速的东西。比如，我们可能有一个 C 结构，它内部只包含了基本类型数据，即所谓的 <em>plain old data</em> ，或者 POD 结构。C++ 标准允许 POD 结构的按位拷贝，但是 Copy 函数不能检测它是 POD，所以它会使用运行慢的版本。这里我们不但需要依赖 <code>TypeTraits</code>，也需要依赖一些传统的 traits。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">SupportsBitwiseCopy</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> result = TypeTraits&lt;T&gt;::isStdFundamental &#125;; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InIt, <span class="keyword">typename</span> OutIt&gt;</span><br><span class="line"><span class="function">OutIt <span class="title">Copy</span><span class="params">(InIt first, InIt last, OutIt result,</span></span></span><br><span class="line"><span class="params"><span class="function">   Int2Type&lt;<span class="literal">true</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> TypeTraits&lt;InIt&gt;::PointeeType SrcPointee; </span><br><span class="line">    <span class="keyword">typedef</span> TypeTraits&lt;OutIt&gt;::PointeeType DestPointee; </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> useBitBlast =</span><br><span class="line">        TypeTraits&lt;InIt&gt;::isPointer &amp;&amp; </span><br><span class="line">        TypeTraits&lt;OutIt&gt;::isPointer &amp;&amp; </span><br><span class="line">        SupportsBitwiseCopy&lt;SrcPointee&gt;::result &amp;&amp; </span><br><span class="line">        SupportsBitwiseCopy&lt;DestPointee&gt;::result &amp;&amp; </span><br><span class="line">        <span class="built_in"><span class="keyword">sizeof</span></span>(SrcPointee) == <span class="built_in"><span class="keyword">sizeof</span></span>(DestPointee) &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CopyImpl</span>(first, last, Int2Type&lt;useBitBlast&gt;); &#125;</span><br></pre></td></tr></table></figure><p>现在，想要接触 POD 类型无法使用 <code>BitBlast</code> 的束缚，我们只需要特化 <code>SupportBitwiseCopy</code> 并放进去一个 <code>true</code>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">SupportsBitwiseCopy</span>&lt;</span>MyType&gt; &#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> &#123;</span> result = <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[The C++ in-depth series] Alexandrescu, Andrei_Meyers, Scott_Vlissides, John - Modern C++ design_ generic programming and design patterns applied (2001_2011, Addison-Wesley Professional) </li><li><a href="https://www.cnblogs.com/chmm/p/7469618.html">C++之局部类</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Coding Technique </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bazel WORKSPACE 学习</title>
      <link href="/2022/09/12/Build-Bazel-WORKSPACE-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/12/Build-Bazel-WORKSPACE-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="场景-I"><a href="#场景-I" class="headerlink" title="场景 I"></a>场景 I</h2><h3 id="new-local-repository-使用"><a href="#new-local-repository-使用" class="headerlink" title="new_local_repository 使用"></a><code>new_local_repository</code> 使用</h3><p>在引入第三方库 openssl 时，我们在 <code>WORKSPACE</code> (<code>~/bazel-workspace</code>) 中通过加入 <code>new_local_repository</code> 的方式引入库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_local_repository(</span><br><span class="line">    name = &quot;openssl&quot;,</span><br><span class="line">    path = &quot;/usr&quot;,</span><br><span class="line">    build_file = &quot;depBUILD/openssl.BUILD&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>首先看看这个 <code>new_local_repository</code> <a href="https://docs.bazel.build/versions/main/be/workspace.html#new_local_repository:~:text=use%20piano.jar.-,Arguments,-Attributes">参数</a>的介绍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_local_repository(name, build_file, build_file_content, path, repo_mapping, workspace_file, workspace_file_content)</span><br></pre></td></tr></table></figure><p>该函数允许一个本地目录被变成 bazel 的仓库，这意味着现在的仓库能定义和使用文件系统任何地方的 target。</p><p>这个规则通过创建一个 <code>WORKSPACE</code>文件和「包含到<code>BUILD</code>文件和路径的 symlinks」的子目录，最终创建一个 Bazel 仓库。对已经包含一个 <code>WORKSPACE</code>  文件和 <code>BUILD</code> 文件的目录，我们可以直接使用 <code>local_repository</code>规则。</p><p>针对这里的情况，我们会创造一个 <code>@openssl</code> 的库，这个库与符号链接<code>symlink</code> 到 /usr 路径。我们的 Targets 可以通过加诸如<code>@openssl:crypto</code> 到目标依赖 (target’s dependencies) 的方式依赖这个库。</p><p>参数 <code>build_file</code> 是相对于主仓库的路径或绝对路径。该路径的 <code>BUILD</code> 文件 (<code>~/bazel-workspace/depBUILD/openssl.BUILD</code>) 为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package(</span><br><span class="line">    default_visibility=[&quot;//visibility:public&quot;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">config_setting(</span><br><span class="line">    name = &quot;macos&quot;,</span><br><span class="line">    values = &#123;</span><br><span class="line">        &quot;cpu&quot;: &quot;darwin&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    visibility = [&quot;//visibility:private&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">    name = &quot;crypto&quot;,</span><br><span class="line">    srcs = select(&#123;</span><br><span class="line">        &quot;:macos&quot;: [&quot;lib/libcrypto.dylib&quot;],</span><br><span class="line">        &quot;//conditions:default&quot;: []</span><br><span class="line">    &#125;),</span><br><span class="line">    linkopts = select(&#123;</span><br><span class="line">        &quot;:macos&quot; : [],</span><br><span class="line">        &quot;//conditions:default&quot;: [&quot;-lcrypto&quot;],</span><br><span class="line">    &#125;),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">    name = &quot;ssl&quot;,</span><br><span class="line">    hdrs = select(&#123;</span><br><span class="line">        &quot;:macos&quot;: glob([&quot;include/openssl/*.h&quot;]),</span><br><span class="line">        &quot;//conditions:default&quot;: []</span><br><span class="line">    &#125;),</span><br><span class="line">    srcs = select (&#123;</span><br><span class="line">        &quot;:macos&quot;: [&quot;lib/libssl.dylib&quot;],</span><br><span class="line">        &quot;//conditions:default&quot;: []</span><br><span class="line">    &#125;),</span><br><span class="line">    includes = [&quot;include&quot;],</span><br><span class="line">    linkopts = select(&#123;</span><br><span class="line">        &quot;:macos&quot; : [],</span><br><span class="line">        &quot;//conditions:default&quot;: [&quot;-lssl&quot;],</span><br><span class="line">    &#125;),</span><br><span class="line">    deps = [&quot;:crypto&quot;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>由此，继续介绍以上规则的含义</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a><code>package</code></h3><p><a href="https://bazel.build/reference/be/functions">Bazel package function</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package(default_deprecation, default_testonly, default_visibility, features)</span><br></pre></td></tr></table></figure><p>该函数声明对包中后续的每一个规则的 metadata (元数据) 均适用。它在一个包内（BUILD 文件）中只能使用最多一次。</p><p>package 函数应该在所有 load 声明完成之后，在任何规则之前马上加上。</p><h3 id="config-setting"><a href="#config-setting" class="headerlink" title="config_setting"></a><code>config_setting</code></h3><p><a href="https://bazel.build/reference/be/general#config_setting">Bazel config setting function</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_setting(name, constraint_values, define_values, deprecation, distribs, features, flag_values, licenses, tags, testonly, values, visibility)</span><br></pre></td></tr></table></figure><p>为了触发可配置属性，<code>config_setting</code> 被使用来匹配一个期望的配置状态。（被表达为 编译 flags 或平台约束）。可以理解为，对不同平台，可能我们的编译参数不一致，而 <code>config_setting</code> 和 <code>select</code> 的 combo 使用帮助我们完成这一点。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>第一个例子，它匹配任何设置 <code>--compilation_mode = opt</code> 或者 <code>-c opt</code>的编译，（可能显式得出现在命令行或者 <code>.bazelrc</code> 文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config_setting(</span><br><span class="line">    name = &quot;simple&quot;,</span><br><span class="line">    values = &#123;&quot;compilation_mode&quot;: &quot;opt&quot;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第二个例子，它匹配任意编译，该编译以 ARM 为目标，并且应用自定义的设置<code>FOO=bar</code>。（比如 <code>bazel build --cpu=arm --define FOO-bar ...</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config_setting(</span><br><span class="line">    name = &quot;two_conditions&quot;,</span><br><span class="line">    values = &#123;</span><br><span class="line">        &quot;cpu&quot;: &quot;arm&quot;,</span><br><span class="line">        &quot;define&quot;: &quot;FOO=bar&quot;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bazel </tag>
            
            <tag> BUILD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake-Into-II</title>
      <link href="/2022/08/07/CMake-Into-II/"/>
      <url>/2022/08/07/CMake-Into-II/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="225093a9af95cbf45a65e3fd77342a99fcede848439a5a500da3108c6994d304"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Server Add Member and Passwd</title>
      <link href="/2022/08/05/add-member-to-root-and-add-passwd/"/>
      <url>/2022/08/05/add-member-to-root-and-add-passwd/</url>
      
        <content type="html"><![CDATA[<ol><li><p>登陆机器，进入 root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">smc toc 10.129.112.84</span><br><span class="line">SSE@10-129-112-84:~$ sudo su -</span><br><span class="line">root@10-129-112-84:~#</span><br></pre></td></tr></table></figure></li><li><p>增加 sudoers</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This file MUST be edited with the <span class="string">&#x27;visudo&#x27;</span> <span class="built_in">command</span> as root.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> directly modifying this file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># See the man page for details on how to write a sudoers file.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">Defaults    env_reset</span></span><br><span class="line">Defaults    mail_badpass</span><br><span class="line">Defaults    secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Host <span class="built_in">alias</span> specification</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User <span class="built_in">alias</span> specification</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Cmnd <span class="built_in">alias</span> specification</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User privilege specification</span></span><br><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Members of the admin group may gain root privileges</span></span><br><span class="line"><span class="meta">%</span><span class="bash">admin ALL=(ALL) ALL</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Allow members of group sudo to execute any <span class="built_in">command</span></span></span><br><span class="line"><span class="meta">%</span><span class="bash">sudo    ALL=(ALL:ALL) ALL</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See sudoers(5) <span class="keyword">for</span> more information on <span class="string">&quot;#include&quot;</span> directives:</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">includedir /etc/sudoers.d</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>User privilege specification</code>  中增加 sudoers 权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hang.gao        ALL=(ALL:ALL) ALL</span><br><span class="line">zhenghai.tan    ALL=(ALL:ALL) ALL</span><br><span class="line">dongtf  ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></li><li><p><code>:wq!</code> 退出，已经加入了我们的 sudoers 了</p></li><li><p>给 sudoers 加密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd zijian.zeng</span><br><span class="line">New password: [Add your passwd]</span><br><span class="line">Retype new password: [Retype your passwd]</span><br><span class="line"></span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure></li><li><p>可以愉快得加权限了。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> Handbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmake-Intro-I -- CMakeLists.txt</title>
      <link href="/2022/08/03/CMake-Intro-I/"/>
      <url>/2022/08/03/CMake-Intro-I/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2f4457001718a181a254320a6f3430d5f9ff719a00403263e0c2144429fa68fd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyspark常用操作</title>
      <link href="/2022/05/13/spark%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/05/13/spark%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一周主要在做一些数据构造的工作，主要原因是大维度 embedding 的引入，造成了测试集构造数据处理流程的文件 load 量与内存占用爆发式增加，导致本地数据处理几乎不可能完成。在当前数据中，对每一个 keyword 与 video_id 对，我们需要新添加 5 个 256 维的 emb，每一行的数据几乎膨胀了 20 倍，导致在本地 join 成为 mission impossible。为了实现这样的工作，我们希冀于借助集群分布式处理的方式，使表间 join 成为可能，同时得益于内存处理，加速整个流程。</p><p>在整个过程中，也从 0 到 1 得学习了一下 pyspark 的基础知识（此文不赘述）。这篇博客主要关注的方向是平时在使用 pyspark 时常碰到的问题，以及一些解决/优化方法。</p><h2 id="spark-shell-操作"><a href="#spark-shell-操作" class="headerlink" title="spark-shell 操作"></a>spark-shell 操作</h2><p>在刚开始接触 pyspark 的时候，我们更多的不是通过执行文件，而是一行行的代码去调用 spark API，这样的方式，不仅方便我们了解各个接口的属性，也能方便我们 debug 信息。而使用这种方式的基础，就是启用 spark-shell。</p><h3 id="启动-pyspark"><a href="#启动-pyspark" class="headerlink" title="启动 pyspark"></a>启动 pyspark</h3><p>查看当前下载的 pyspark 路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which pyspark</span><br><span class="line">/usr/share/spark/bin/pyspark</span><br></pre></td></tr></table></figure><p>启动 pyspark，并设定一些参数，确保使用内存有限制，从而不影响其他用户的使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">export HADOOP_USER_NAME=szci_ci_search</span><br><span class="line">export HADOOP_USER_RPCPASSWORD=xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pyspark \</span><br><span class="line">    --master yarn \</span><br><span class="line">    --num-executors 200 \</span><br><span class="line">    --driver-memory 10G \</span><br><span class="line">    --driver-cores 2 \</span><br><span class="line">    --executor-memory 8G \</span><br><span class="line">    --executor-cores 4 \</span><br><span class="line">    --name &quot;xxx.xxx-spark-x&quot; \</span><br><span class="line">    --queue ci-search \</span><br><span class="line">    --conf spark.speculation=true \</span><br></pre></td></tr></table></figure><p>参数设置含义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num-executors: </span><br><span class="line">driver-memory:</span><br><span class="line">driver-cores:</span><br><span class="line">executor-memory:</span><br><span class="line">executor-cores:</span><br><span class="line">name:</span><br><span class="line">queue:</span><br><span class="line">conf:</span><br></pre></td></tr></table></figure><p>启动之后，我们会得到一个 applicationID，并且 spark 会将相关环境打包上传，保证 applicationID 下的正常运行。启动界面如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[GCC 7.3.0] on linux2</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">Setting default log level to &quot;WARN&quot;.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">22/05/13 11:52:42 WARN Utils: Service &#x27;SparkUI&#x27; could not bind on port 4040. Attempting port 4041.</span><br><span class="line">22/05/13 11:52:42 WARN Utils: Service &#x27;SparkUI&#x27; could not bind on port 4041. Attempting port 4042.</span><br><span class="line">22/05/13 11:52:44 INFO Client: Verifying our application has not requested more than the maximum memory capability of the cluster (102400 MB per container)</span><br><span class="line">22/05/13 11:52:44 INFO Client: Will allocate AM container, with 6758 MB memory including 614 MB overhead</span><br><span class="line">22/05/13 11:52:44 INFO Client: Setting up container launch context for our AM</span><br><span class="line">22/05/13 11:52:44 INFO Client: Setting up the launch environment for our AM container</span><br><span class="line">22/05/13 11:52:44 INFO Client: Preparing resources for our AM container</span><br><span class="line">22/05/13 11:52:46 INFO Client: Uploading resource hdfs://tl3/packages/jars/spark-v2.4.7-sdi-028.tar.gz -&gt; hdfs://tl7/user/spark/staging/.sparkStaging/application_1649942865376_6398197/spark-v2.4.7-sdi-028.tar.gz</span><br><span class="line">22/05/13 11:52:49 INFO Client: Uploading resource file:/usr/share/spark/python/lib/pyspark.zip -&gt; hdfs://tl7/user/spark/staging/.sparkStaging/application_1649942865376_6398197/pyspark.zip</span><br><span class="line">22/05/13 11:52:50 INFO Client: Uploading resource file:/usr/share/spark/python/lib/py4j-0.10.7-src.zip -&gt; hdfs://tl7/user/spark/staging/.sparkStaging/application_1649942865376_6398197/py4j-0.10.7-src.zip</span><br><span class="line">22/05/13 11:52:50 INFO Client: Uploading resource file:/hadoop/spark/sparklocaldir/spark-bbd4bfd8-6578-4da3-8ee3-80511df8a90b/__spark_conf__5160579084130103039.zip -&gt; hdfs://tl7/user/spark/staging/.sparkStaging/application_1649942865376_6398197/__spark_conf__.zip</span><br><span class="line">22/05/13 11:52:52 INFO Client: Submitting application application_1649942865376_6398197 to ResourceManager</span><br><span class="line">22/05/13 11:52:57 INFO Client: Application report for application_1649942865376_6398197 (state: ACCEPTED)</span><br><span class="line">22/05/13 11:52:57 INFO Client: </span><br><span class="line">         client token: N/A</span><br><span class="line">         diagnostics: AM container is launched, waiting for AM container to Register with RM</span><br><span class="line">         ApplicationMaster host: N/A</span><br><span class="line">         ApplicationMaster RPC port: -1</span><br><span class="line">         queue: ci-search</span><br><span class="line">         start time: 1652413972393</span><br><span class="line">         final status: UNDEFINED</span><br><span class="line">         tracking URL: http://keyhole.data-infra.shopee.io/keyhole/proxy?applicationId=application_1649942865376_6398197</span><br><span class="line">         user: szci_ci_search</span><br><span class="line">22/05/13 11:53:00 INFO Client: Application report for application_1649942865376_6398197 (state: ACCEPTED)</span><br><span class="line">22/05/13 11:53:03 INFO Client: Application report for application_1649942865376_6398197 (state: ACCEPTED)</span><br><span class="line">22/05/13 11:53:07 INFO Client: Application report for application_1649942865376_6398197 (state: RUNNING)</span><br><span class="line">22/05/13 11:53:07 INFO Client: </span><br><span class="line">         client token: N/A</span><br><span class="line">         diagnostics: N/A</span><br><span class="line">         ApplicationMaster host: 10.130.80.227</span><br><span class="line">         ApplicationMaster RPC port: -1</span><br><span class="line">         queue: ci-search</span><br><span class="line">         start time: 1652413972393</span><br><span class="line">         final status: UNDEFINED</span><br><span class="line">         tracking URL: http://keyhole.data-infra.shopee.io/keyhole/proxy?applicationId=application_1649942865376_6398197</span><br><span class="line">         user: szci_ci_search</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &#x27;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 2.4.7-sdi-028</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Python version 2.7.16 (default, Mar 14 2019 21:00:58)</span><br><span class="line">SparkSession available as &#x27;spark&#x27;.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure><p>后面我们就可以像执行 python 一样执行 pyspark 了。</p><h2 id="spark-submit-执行-spark-脚本"><a href="#spark-submit-执行-spark-脚本" class="headerlink" title="spark-submit 执行 spark 脚本"></a>spark-submit 执行 spark 脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spark = SparkSession.builder().master(<span class="string">&quot;local[1]&quot;</span>)</span><br><span class="line">          .appName(<span class="string">&quot;SparkByExamples.com&quot;</span>)</span><br><span class="line">          .getOrCreate()</span><br></pre></td></tr></table></figure><h2 id="pyspark-相关常用语句"><a href="#pyspark-相关常用语句" class="headerlink" title="pyspark 相关常用语句"></a>pyspark 相关常用语句</h2><h3 id="读取-csv-文件-（data-frame-方法）"><a href="#读取-csv-文件-（data-frame-方法）" class="headerlink" title="读取 csv 文件 （data_frame 方法）"></a>读取 csv 文件 （data_frame 方法）</h3><h4 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.</span></span><br><span class="line">data_frame = spark.read.csv(filename, sep= <span class="string">r&#x27;\t&#x27;</span>, header=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Using Header Record For Column Names</span></span><br><span class="line">data_frame = spark.read.option(<span class="string">&quot;header&quot;</span>, <span class="literal">True</span>).option(xxx, xxx).csv(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.</span></span><br><span class="line">df = spark.read.<span class="built_in">format</span>(<span class="string">&quot;csv&quot;</span>)</span><br><span class="line">                  .load(filename)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">df = spark.read.<span class="built_in">format</span>(<span class="string">&quot;org.apache.spark.sql.csv&quot;</span>)</span><br><span class="line">                  .load(filename)</span><br></pre></td></tr></table></figure><h4 id="Extension-1-读取多个文件"><a href="#Extension-1-读取多个文件" class="headerlink" title="Extension 1.  读取多个文件"></a>Extension 1.  读取多个文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_frame = spark.read.csv(&quot;path1,path2,path3&quot;) # 这个我测试的时候没法成功</span><br><span class="line"></span><br><span class="line">file_conf = [filename1, filename2, filename3]</span><br><span class="line">data_frame = spark.read.csv(file_conf)</span><br></pre></td></tr></table></figure><h4 id="Extension-2-读取多个文件"><a href="#Extension-2-读取多个文件" class="headerlink" title="Extension 2. 读取多个文件"></a>Extension 2. 读取多个文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_frame = spark.read.csv(Foldername)</span><br></pre></td></tr></table></figure><h3 id="读取-csv-文件-（RDD-方法-用到-sparkContext-sc"><a href="#读取-csv-文件-（RDD-方法-用到-sparkContext-sc" class="headerlink" title="读取 csv 文件 （RDD 方法, 用到 sparkContext-sc)"></a>读取 csv 文件 （RDD 方法, 用到 sparkContext-sc)</h3>]]></content>
      
      
      <categories>
          
          <category> DA Tools </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> pyspark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Standard Library</title>
      <link href="/2022/05/08/C-Standard-Library/"/>
      <url>/2022/05/08/C-Standard-Library/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名进入职场快一年的员工，如果还没有去具体了解标准库的内容，以及其实现和构造，会是一件比较 shameful 的事情。为了弥补这块缺失，我特别开启这篇博客，用以记录在学习 C++ 标准库中的所知，以及可能的所感。</p><h2 id="Container-容器"><a href="#Container-容器" class="headerlink" title="Container 容器"></a>Container 容器</h2><h3 id="Item-1-小心选择容器"><a href="#Item-1-小心选择容器" class="headerlink" title="Item 1. 小心选择容器"></a>Item 1. 小心选择容器</h3><p>容器的分类（按照是否为标准库容器等标准）：</p><ul><li><p>标准 STL sequence 容器：比如 <code>vector</code>, <code>list</code>, <code>deque</code> 和 <code>string</code></p></li><li><p>标准 STL associative 容器： 比如 <code>set</code>, <code>multiset</code>, <code>map</code> he <code>multimap</code></p></li><li><p>非标准 STL sequence 容器：比如 <code>slist</code> 和 <code>rope</code>， <code>slist</code> 是单向链表，而 <code>rope</code> 可以理解为是 <code>heavy-duty</code> 的 <code>string</code></p></li><li><p>非标准 STL associative 容器，比如 <code>hash_set</code>, <code>hash_multiset</code>,<code>hash_map</code> 和 <code>hash_multimap</code>。</p></li><li><p>还有一些标准 non-STL 容器，包括 <code>arrays</code>, <code>bitset</code>, <code>valarray</code>, <code>stack</code>, <code>queue</code>, 以及 <code>priority_queue</code></p></li></ul><p>需要注意：</p><ul><li><p><code>vector</code> 可以作为标准 associative 容器的替代，有时甚至能比标准 associative 容器在时间空间上表现得更好。</p></li><li><p>有些情况下， <code>vector&lt;char&gt;</code> 替代 <code>string</code> 可能有不错的效果。</p></li></ul><p>同时，我们还有另一种标准去对标准 STL 容器进行分类，即</p><ul><li><p><code>contiguous-memory containers</code> 连续内存容器。它会将元素储存在一个或者多个 chunk 的内存中，同一个 chunk 可以有超过一个容器元素。它的一个特点是，如果一个新元素被插入或者一个存在的元素被清除，同一个内存 chuck 中的其他元素不得不移动，从而给新元素制造空间，或者填充被清除元素所占用的空间。</p></li><li><p><code>node-based container</code> 节点型容器。内存的每一个 chunk 都只有一个元素。插入或删除容器元素只会影响指向节点的指针，而不会影响节点本身，所以当某物被插入或删除时，元素值不必被移动。容器代表了链表，比如 <code>list</code> 和 <code>slist</code> 都是标准的关联性容器（通过平衡树实现）。Note，非标准的 hashed 容器使用不同的 node-based 实现。</p></li></ul><p>以下的一些问题可以作为我们选择容器的判断标准</p><ol><li>我们是否需要插入新元素到容器的任意位置？如果需要，那么 associative 容器就不能满足要求，只能选用 sequence 容器</li><li>我们关注容器内元素的顺序么？如果不关注，那么 hashed 容器变成了一个可行的选择，否则，我们得避免使用 hashed 容器</li><li>我们使用的容器一定要是标准 C++ 的部分么？如果是，我们就不能使用 hashed 容器，slist 和 rope</li><li>我们要求是哪种迭代器？如果必须是random access 迭代器，我们就只能选用 vector, deque 和 string，我们也可能想选用 rope。如果是 bidirectional 迭代器，我们一定要避免 slist 以及 hashed 容器的一种常见实现。</li><li>当插入和清楚发生时，避免移动存在的容器变量是否重要？如果重要，我们需要远离 contiguous-memory 容器。</li><li>容器中的数据是否需要 layout-compatible with C(兼容 C)？如果需要，则我们只能使用 vector</li><li>查询是否加速极端考虑（？）？如果是的，我们可能想要使用 hashed 容器，排好序的 vector 以及标准关联性 associative 容器。</li><li>是否介意潜在的容器使用引用计数 (reference counting)？如果介意，我们可能不能使用 string, 因为需要 string 的实现都是引用计数的。我们也需要避免 rope，因为 definitive rope 的实现也基于 reference counting。如果我们必须表示字符串，我们可能需要考虑使用 <code>vector&lt;char&gt;</code></li><li>对插入和删除我们是否需要 transactional semantics （一种语义，不破坏原有容器内部内容。）？或者说，我们需要保障回滚插入和删除的能力么？如果需要，我们将想要使用 node-based 容器。如果我们需要对多元插入使用 transactional semantics ，我们可能想要使用 list，因为 list 是唯一为多元插入提供 transactional semantics 的标准容器。transactional semantics 对致力于写异常安全代码的程序员尤其重要。</li><li>我们是否需要最小化迭代器，指针和引用的不合理性，如果需要，我们可能想要使用 node-based 容器，因为在这些容器上插入和删除绝不会使迭代器，指针，引用等失效。通常，在 contiguous-memory 容器中插入或删除可能会使容器内所有的迭代器，指针以及引用失效。</li><li>对拥有一个 random access 迭代的 sequence 容器，假设没有东西被删除且插入只发生在 container 的尾部，让其指向数据的指针和引用不失效是否是有用的。这个 case 非常特殊，如果发生上述情况，<code>deque</code> 是我们的理想选择。（这个问题不太理解，需要回来 double check）</li></ol><h3 id="Item-2-小心容器独立代码的迷惑"><a href="#Item-2-小心容器独立代码的迷惑" class="headerlink" title="Item 2. 小心容器独立代码的迷惑"></a>Item 2. 小心容器独立代码的迷惑</h3><p>Beware the illusion of container-independent code</p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas: General Use</title>
      <link href="/2022/04/19/Pandas-General-Use/"/>
      <url>/2022/04/19/Pandas-General-Use/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>日常生活中，我们经常会面临表格数据的处理，而 pandas 是一个封装较好的 API，我们经常可以借助于 pandas 更方便得处理数据。这片文章就简单记录一下工作中常使用的 pandas 语句</p><h2 id="IO-输入输出">IO 输入输出</h2><h3 id="读取">读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csv 文件读取</span></span><br><span class="line">pd.read_csv(filename, sep = <span class="string">&#x27;\t&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="写入">写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_csv(filename, sep = <span class="string">&#x27;\t&#x27;</span>, index = <span class="literal">False</span>, header = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="选取">选取</h2><h3 id="根据某一列聚合遍历">根据某一列聚合遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已知 data_frame</span></span><br><span class="line">data_frame</span><br><span class="line"><span class="comment"># 固定列名</span></span><br><span class="line">col_name_list = [<span class="string">&quot;feat_1&quot;</span>, <span class="string">&quot;feat_2&quot;</span>]</span><br><span class="line">data_frame.columns = col_name_list</span><br><span class="line"><span class="comment"># 聚合某一列</span></span><br><span class="line">data_group = data_frame.groupby(<span class="string">&quot;feat_1&quot;</span>)</span><br><span class="line"><span class="comment"># 遍历每一个根据 feat_1 聚合的 data_frame</span></span><br><span class="line"><span class="keyword">for</span> name, group <span class="keyword">in</span> data_group:</span><br><span class="line">    <span class="comment"># 遍历 group 这个 dataframe</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The row of dataframe is as follow when feat_1 equal to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">for</span> row_index, row <span class="keyword">in</span> group.iterrows():</span><br><span class="line">        feat_2_val = row[<span class="string">&quot;feat_2&quot;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;row_index : &#123;&#125;, feat_2_val : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(row_index, feat_2_val))</span><br><span class="line"><span class="comment"># 查看聚合的所有 feat_1 的值，去重后结果</span></span><br><span class="line"><span class="built_in">print</span>(data_group.groups.keys())</span><br><span class="line"><span class="comment"># 根据 feat_1 的值拿出其中一个 group 的 data_frame</span></span><br><span class="line">data_group.get_group(feat_1_val)</span><br></pre></td></tr></table></figure><h3 id="笛卡尔积式-Cross-Join">笛卡尔积式 Cross Join</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># label 为 3 的 dataframe</span></span><br><span class="line">df_label_1</span><br><span class="line"><span class="comment"># label 为 2 的 dataframe</span></span><br><span class="line">df_label_2</span><br><span class="line"><span class="comment"># label 为 1 的 dataframe</span></span><br><span class="line">df_label_3</span><br><span class="line"><span class="comment"># 初始化最终的 data_frame</span></span><br><span class="line">data_frame_cross = pd.DataFrame()</span><br><span class="line"><span class="comment"># merge 两两 cross join 的结果</span></span><br><span class="line">data_frame_cross = pd.concat([data_frame_cross, pd.merge(df_label_1, df_label_2, how = <span class="string">&#x27;cross&#x27;</span>)])</span><br><span class="line">data_frame_cross = pd.concat([data_frame_cross, pd.merge(df_label_2, df_label_3, how = <span class="string">&#x27;cross&#x27;</span>)])</span><br><span class="line">data_frame_cross = pd.concat([data_frame_cross, pd.merge(df_label_1, df_label_3, how = <span class="string">&#x27;cross&#x27;</span>)])</span><br><span class="line"><span class="comment"># 重新排序</span></span><br><span class="line">data_frame_cross.index = <span class="built_in">range</span>(data_frame_cross.shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="某一列的所有取值">某一列的所有取值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Series 化 unique</span></span><br><span class="line">pd.Series([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], name=<span class="string">&#x27;A&#x27;</span>).unique()</span><br></pre></td></tr></table></figure><h3 id="根据-bin-分桶">根据 bin 分桶</h3><p><code>pd.cut</code> 注意参数 <code>bins</code>，<code>right</code>, <code>labels</code></p><h3 id="对-groupby-的-dataframe-重新设置-index">对 groupby 的 dataframe 重新设置 index</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=df.groupby(<span class="string">&#x27;A&#x27;</span>).apply(<span class="keyword">lambda</span> x: x.reset_index(drop=<span class="literal">True</span>)).drop(<span class="string">&#x27;A&#x27;</span>,axis=<span class="number">1</span>).reset_index()</span><br><span class="line">grouped.get_group(<span class="string">&#x27;foo&#x27;</span>).iloc[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> DataFrame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ (IV)</title>
      <link href="/2022/03/24/Effective-C-IV/"/>
      <url>/2022/03/24/Effective-C-IV/</url>
      
        <content type="html"><![CDATA[<p>这章主要是对于良好 C++ 接口的设计与声明提出意见与建议。而软件设计，就是以一般性的构想出发，逐步实现整体结构，以允许特殊接口开发的步骤。使用以下提到的准则，有利于我们实现代码开发的正确性，高效性，封装性，维护性，延展性以及协议的一致性。</p><h2 id="Item-18-让接口容易正确使用且不易误操作"><a href="#Item-18-让接口容易正确使用且不易误操作" class="headerlink" title="Item 18. 让接口容易正确使用且不易误操作"></a>Item 18. 让接口容易正确使用且不易误操作</h2><p><strong>make interfaces easy to use correctly and hard to use incorrectly</strong></p><p>日常工作中，程序员如果使用 C++，一定会接触到各式各样的接口。比如函数接口、类接口、模板接口。而接口是客户与程序员开发代码的互动手段。好的代码应该具有这样的要求，当客户使用某个接口时，如果该接口不能获得预期结果，则代码不该通过编译。</p><p>要实现这个要求，则程序员在设计时需要考虑客户可能产生的错误。</p><p>需要记住：</p><ul><li><p>好的接口应该满足容易被正确使用却不容易被误用的条件。这应该是我们在实现每一个接口时需要尽可能考虑的事情。</p></li><li><p>接口的“正确使用”需要包括接口的一致性，以及内置类型的行为兼容。</p></li><li><p>接口的“不易误用”则要求在类型创立时限制类型操作，尽可能减少对象值被无意修改的可能性，消除客户的资源管理责任等。</p></li><li><p><code>shared_ptr</code> 允许 custom deleter，这可以防范动态链接错误，可被用来自动解除 mutex 上。</p></li></ul><h2 id="Item-19-像设计-type-一样设计-class"><a href="#Item-19-像设计-type-一样设计-class" class="headerlink" title="Item 19. 像设计 type 一样设计 class"></a>Item 19. 像设计 type 一样设计 class</h2><p><strong>Treat class design as type design</strong></p><p>与其他 Object-Orient Program Language 一样，当我们设计一个新类时，我们实际也是定义了一个新类型。而大部分时间，我们实际上都是在扩展我们的 type system。我们需要思考重载函数和操作符，控制内存的 allocate，以及定义对象初始化与终结销毁等。因此，我们需要像语言设计者设置语言内置类型一样得谨慎研究class 的设计。</p><p>对于设计每一个 class，我们都需要考虑如下的问题：</p><ul><li><p>新类型的对象应该如何被创建和销毁？这会影响类的 constructor, desctructor, 以及内存分配与释放函数（operator new, operator new[],  operator delete 和 operator deletep[]）的设计</p></li><li><p>对象的初始化与对象的赋值应该有什么区别？</p></li><li><p>新类型的对象如果被 pass-by-balue，会发生什么？copy constructor 用来定义一个类型的 pass-by-value 如何实现</p></li><li><p>什么是新类型的“合法值”？</p></li><li><p>新类型需要配合某个 inheritance graph 继承图谱么</p></li><li><p>新类型需要什么样的转换</p></li><li><p>什么样的操作符合函数对新类型是合理的？</p></li><li><p>什么样的标准函数应该驳回，我们必须将其声明为 private。</p></li><li><p>谁该取用新类型的成员，这决定了类中哪个成员是 public 的，哪个是 protected 的，哪个是 private 的。也会帮助我们决定哪个 class 或 function 应该是 friend，以及应该实现一个怎样的嵌套关系。</p></li><li><p>什么是新类型的 undeclared interface</p></li><li><p>这个新类型有多么一般化？这个多出现在基类构建与类模板构建上。</p></li><li><p>真的需要新类型么？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 书籍笔记 </tag>
            
            <tag> Design &amp; Declarations </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 国内内网加速</title>
      <link href="/2022/03/24/github-%E5%9B%BD%E5%86%85%E5%86%85%E7%BD%91%E5%8A%A0%E9%80%9F/"/>
      <url>/2022/03/24/github-%E5%9B%BD%E5%86%85%E5%86%85%E7%BD%91%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近 VPN 被墙，这段时间博客的更新都受到了限制。还好最近使用了新的 VPN，但是却只能在 chrome 上连接网页，登录网站使用。这依然无法让我使用 git 拉取和 push 博客。直到今天（2022-03-23），才通过筛选网络搜索的各种方法，发现了现在依然能够正常使用的，快速 pull 与 push git commit 的途径。</p><p>而这个方法，就是使用 HOST 调整网站连接端口。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>假设我们目前已经有了一个 git 本地分支（如果构建本地分支等操作不在本博客范围内），我们要做的就是保证其正常使用我们的账号 push 与 pull 本地贮存的 commit.</p><h3 id="检查不同地区访问时延"><a href="#检查不同地区访问时延" class="headerlink" title="检查不同地区访问时延"></a>检查不同地区访问时延</h3><p>登录网站 <a href="http://tool.chinaz.com/speedworld/github.com">“github.com”国际网站测速结果—国际网站测速-站长工具</a> 输入 <code>github.com</code> 查看分析当前不同监测点解析 IP 的访问时延，可以看到总耗时最短的为新加坡的站点</p><p><img src="https://jason24-zeng.github.io/img/github-国内内网加速/2022-03-24-00-33-58-image.png" alt="时延"></p><p>我们记住它的解析 ip: <code>20.205.243.166</code>，这个 ip 我们后面会用来作为访问 github 的 host 文件对应 ip</p><h3 id="修改-host-文件"><a href="#修改-host-文件" class="headerlink" title="修改 host 文件"></a>修改 host 文件</h3><p>如果是 mac 电脑，修改 <code>/etc/hosts</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加如下命令行到 hosts 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20.205.243.166▸ github.com #/t</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>重启 Terminal 之后，再使用 <code>git pull</code> 与 <code>git push</code> 等指令，就可以快速完成。</p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Version Control System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdb debug 调试</title>
      <link href="/2022/03/19/gdb-debug-%E8%B0%83%E8%AF%95/"/>
      <url>/2022/03/19/gdb-debug-%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="98ca5c865dea0adb67ee5466753120fff93e6d3581d66631aa2f890f7d8037e5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Debug </category>
          
          <category> GDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GDB </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ usable example</title>
      <link href="/2022/03/15/C-usable-example/"/>
      <url>/2022/03/15/C-usable-example/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e1af6f5d78d1f0fb29ba621fe61a68c01435c9da3620c97b6c248fafa0b1f493"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> HandBook </tag>
            
            <tag> Coding Technique </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reg 正则表达式 (Python)</title>
      <link href="/2022/03/11/reg-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/03/11/reg-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="387c613f89595249ecab413589994b852137ff056306389429c5ca1d4efdd1af"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Regular Expression </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 子模块</title>
      <link href="/2022/03/02/git-%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/03/02/git-%E5%AD%90%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们经常碰到这样的情况，当我们在开发某一个项目时，我们需要引入另一个项目的某一部分，它可能是一个第三方库，或者是我们自己开发的一个可复用的项目。这时我们可能希望能区分开这两个项目，但是能在其中一个项目中引用另一个项目。</p><p>我们的一种可能解决方法，是将其中一个项目(比如 library)完整得 copy 到自己的项目树里。但是可能这会导致个性化这个 library 很困难，而且得确保每个客户端都能包含该库 。另外， 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。</p><p>为了解决这个麻烦， git 使用了 submodule，它允许你将一个 git 仓库作为另一个 git 目录的子目录。这样，我们就可以将另一个仓库 clone 到我们自己的项目中，并且保证整个 commits 是分离开的。</p><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><p>通过以下指令，我们可以添加子模块（比如 DbConnector）到某一个项目中, 默认情况会放到统计目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/chaconinc/DbConnector ## 相对/绝对 url</span><br></pre></td></tr></table></figure><p>这时会生成两个文件，其中一个是 <code>DbConnector</code>，另一个是 <code>.gitmodules</code></p><h4 id="gitmodules-文件"><a href="#gitmodules-文件" class="headerlink" title=".gitmodules 文件"></a><code>.gitmodules</code> 文件</h4><p>该文件是用于保存项目 URL 与已经拉取的本地目录之间的映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;DbConnector&quot;]</span><br><span class="line">    path = DbConnector</span><br><span class="line">    url = https://github.com/chaconinc/DbConnector</span><br></pre></td></tr></table></figure><p>多个子模块则会有多条记录，该文件也想 <code>.gitignore</code> 文件一样通过版本进行控制。它会和项目的其他部分一同被拉取推送。</p><h4 id="子目录文件"><a href="#子目录文件" class="headerlink" title="子目录文件"></a>子目录文件</h4><p>虽然 <code>DbConnector</code> 是工作目录中的一个子目录，但 Git 还是会将它视作一个子模块。当你不在那个目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。</p><p>当你提交时，会看到类似下面的信息：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">&#x27;added DbConnector module&#x27;</span></span></span><br><span class="line">[master fb9093c] added DbConnector module</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 DbConnector</span><br></pre></td></tr></table></figure><p>注意 <code>DbConnector</code> 记录的 <code>160000</code> 模式。 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。</p><p>最后，推送这些更改：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></table></figure><h3 id="clone-含有子模块的项目"><a href="#clone-含有子模块的项目" class="headerlink" title="clone 含有子模块的项目"></a>clone 含有子模块的项目</h3><p>当我们 clone 某一个含有子模块的项目时，如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/chaconinc/MainProject</span><br></pre></td></tr></table></figure><p>我们会发现子模块目录下是空的，这时候我们还没有 clone 相应的子模块，通过执行以下两个指令，我们通过<code>git submodule init</code> 用来初始化本地配置文件，并使用 <code>git submodule update</code> 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p><p>另外，还可以通过以下指令，一步完成 clone 操作，甚至完成嵌套子模块的 clone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/chaconinc/MainProject</span><br></pre></td></tr></table></figure><h3 id="clone-但忘记拉取子模块"><a href="#clone-但忘记拉取子模块" class="headerlink" title="clone 但忘记拉取子模块"></a>clone 但忘记拉取子模块</h3><p>如果我们已经将项目 clone 到了本地，但是忘记拉取子模块，则我们可以执行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><p>它会执行 <code>git submodule init</code> 与 <code>git submodule update</code> 指令，去拉取并检出子模块。</p><p>另外，如果子模块里面还有嵌套，我们可以执行以下指令，完成嵌套式的拉取和检出流程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h3 id="拉取子模块远端最新代码"><a href="#拉取子模块远端最新代码" class="headerlink" title="拉取子模块远端最新代码"></a>拉取子模块远端最新代码</h3><p>我们可能不会修改子模块代码，但是想要接受其子模块的最新修改，则我们可以进入子模块目录，执行 <code>git fetch</code> 和 <code>git merge</code> 指令，合并上游分支的新代码到本地。并使用 <code>git diff --submodule</code> 可以看到子模块修改的内容。如果我们这时提交更新，会让子模块锁定为别人修改后的新代码。即大家 <code>git submodule update --init</code> 初始化子模块代码会变成修改后的子模块代码。</p><p>除此以外，还有一个更方便的指令完成上述拉取并检出子模块新修改的方法。就是使用如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote &lt;submodule&gt;</span><br></pre></td></tr></table></figure><h3 id="拉取主模块代码"><a href="#拉取主模块代码" class="headerlink" title="拉取主模块代码"></a>拉取主模块代码</h3><p>注意拉取主模块代码只执行 <code>git pull</code> 或者 <code>git pull --rebase</code> 是不够的，它只是检查到了子模块有修改，并递归得抓取修改，但是它并不会更新子模块，想要更新子模块，我们还需要执行 <code>git submodule update --init --recursive</code>。或者 <code>git pull</code> 加上参数 <code>--recurse-submodules</code> 实现自动化。</p><p>在父级项目中，可能出现这样的情况：当我们拉取的提交中， 可能 <code>.gitmodules</code> 文件中记录的子模块的 URL 发生了改变。这时候执行 <code>git submodule update</code> 或者<code>git pull --recurse-submodules</code> 可能会发生错误，我们需要将新的 URL 复制到本地中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule sync --recursive</span><br></pre></td></tr></table></figure><p>再使用新的 URL 更新子模块即可。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">Git - 子模块</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Version Control System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devops </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 多用户配置</title>
      <link href="/2022/03/02/git-%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/02/git-%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前会经常碰到这样一个问题：在一台电脑上，我们可能会需要开发公司的代码，这需要公司 gitlab 的相关用户，而这台电脑同时又可以作为自己 github 上博客的本地仓库开发地。这时候我们就需要区别不同的 git 用户，并做到轻松切换。否则，我们会经常出现无读写权限的问题。这篇博客主要讨论的，便是如何轻松在一台机器上使用多个 git 用户的方法。</p><h3 id="移除-Git-全局配置"><a href="#移除-Git-全局配置" class="headerlink" title="移除 Git 全局配置"></a>移除 Git 全局配置</h3><p>如果我们 git 配置了全局的 username 或者 email 等，当这个配置与目标 git 所需配置不符时，就可能出现无权限读写的问题。因此，为了后面能使用多个 git。我们需要首先移除全局的 git 配置。步骤如下</p><ol><li><p>打开任意 command line terminal，比如 iterm2</p></li><li><p>输入 <code>git config --list</code> ，我们可以看到我们的全局配置</p></li><li><p>对已有的全局配置，比如 name, email, 和 password 等全局配置，我们使用一下指令去除 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br><span class="line">git config --global --unset user.password</span><br></pre></td></tr></table></figure></li></ol><h3 id="生成不同-Git-公钥"><a href="#生成不同-Git-公钥" class="headerlink" title="生成不同 Git 公钥"></a>生成不同 Git 公钥</h3><p>假设我们有两个用户如下</p><div class="table-container"><table><thead><tr><th>Git平台</th><th>username 用户名</th><th>email邮箱</th><th>hostname 主机名</th></tr></thead><tbody><tr><td>公司私有Git</td><td>yourname</td><td><a href="mailto:yourname@git.company.com">yourname@git.company.com</a></td><td>git.company.com</td></tr><tr><td>Github</td><td>nickname</td><td><a href="mailto:nickname@github.com">nickname@github.com</a></td><td>github.com</td></tr></tbody></table></div><p>我们分别生成两个公钥，到不同的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourname@git.company.com&quot; -f  ~/.ssh/id_rsa_gitlab</span><br><span class="line">ssh-keygen -t rsa -C &quot;nickname@github.com&quot; -f  ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><h3 id="公钥添加-amp-amp-私钥登记"><a href="#公钥添加-amp-amp-私钥登记" class="headerlink" title="公钥添加 &amp;&amp; 私钥登记"></a>公钥添加 &amp;&amp; 私钥登记</h3><p>将不同的公钥（比如 <code>id_rsa_gitlab</code>，<code>id_rsa_github</code>）添加到各个平台，以便 ssh 时能够 Authentization。</p><p>同时，将私钥使用代理模式登记到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启用代理模式</span></span><br><span class="line">ssh-agent bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 Gitlab 私钥添加到本地</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitlab</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 Github 私钥添加到本地</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证用户</span></span><br><span class="line">ssh -T git@git.company.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>最终，可以通过执行 <code>ssh-add -l</code> 验证登记</p><h3 id="配置-ssh-的-config-文件"><a href="#配置-ssh-的-config-文件" class="headerlink" title="配置 ssh 的 config 文件"></a>配置 ssh 的 config 文件</h3><p>config 文件目录在 <code>~/.ssh</code> 创建 <code>config</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 公司gitlab</span></span><br><span class="line">Host gitlab</span><br><span class="line">    HostName git.company.com</span><br><span class="line">    User yourname</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub</span></span><br><span class="line">Host github</span><br><span class="line">    HostName github.com</span><br><span class="line">    User nickname</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><p>该文件分为多个用户配置，每个用户配置包含以下几个配置项：</p><ul><li>Host：Git 平台的别名，clone仓库时，可以替代 HostName 来使用</li><li>HostName：Git 平台的域名（PS：IP 地址应该也可以）</li><li>User：邮箱或用户名</li><li>IdentityFile：私钥路径</li></ul><h3 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h3><p>每次 clone 后，需要给每个仓库配置用户名与邮箱，这样仓库在提交代码是，程序可以知道提交的服务器是哪个，也就清楚使用哪一个密钥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:personal-username/xxx.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置用户名</span></span><br><span class="line">git config user.name &quot;nickname&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置邮箱</span></span><br><span class="line">git config user.email &quot;nickname@github.com&quot;</span><br></pre></td></tr></table></figure><p>如果 repo 还未 clone 到本地，可以修改 clone 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@personal:xxx.git</span><br></pre></td></tr></table></figure><p>注意这个 personal 就是 <code>config</code> 文件的 Host 的名字</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://hanpanpan200.github.io/2019/10/14/setup-multiple-git-accounts-by-ssh-config/">通过 ssh config 配置 Git 多账户 SSH 登录 | 成长自习室</a></p><p><a href="https://emmxxx.com/archives/18">Git 配置多用户</a></p><p><a href="https://www.1024sou.com/article/9523.html">一台电脑，两个及多个git账号配置</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Version Control System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devops </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Presto for Hive</title>
      <link href="/2022/02/28/Presto-for-Hive/"/>
      <url>/2022/02/28/Presto-for-Hive/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Presto？"><a href="#什么是-Presto？" class="headerlink" title="什么是 Presto？"></a>什么是 Presto？</h2><p>Presto 是一种开源的分布式 SQL 查询引擎，它能面向大范围 size 的数据 (从 GB 到 PB)进行交互式的数据分析。它能从不同数据源中取数据，包括 Hive, Cassandra，关联性数据库等。它最大的特点就是使用内存分布式运行，处理数据反应比 hive 都快多个数量级。</p><h3 id="Presto-基本语句"><a href="#Presto-基本语句" class="headerlink" title="Presto 基本语句"></a>Presto 基本语句</h3><h4 id="创建并写入表-I"><a href="#创建并写入表-I" class="headerlink" title="创建并写入表 I"></a>创建并写入表 I</h4><p>基本的建表语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] table_name [ ( column_alias, ... ) ]</span><br><span class="line">[ COMMENT table_comment ]</span><br><span class="line">[ <span class="keyword">WITH</span> ( property_name <span class="operator">=</span> expression [, ...] ) ]</span><br><span class="line"><span class="keyword">AS</span> query</span><br><span class="line">[ <span class="keyword">WITH</span> [ <span class="keyword">NO</span> ] DATA ]</span><br></pre></td></tr></table></figure><p>可以看到其实整个表的创建和 hive 几乎一致，只是对于一些 <code>partition</code> 与 <code>format</code>等操作，Presto 将他们放到了 <code>property_name</code> 中，比如 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">   order_date <span class="type">VARCHAR</span>,</span><br><span class="line">   order_region <span class="type">VARCHAR</span>,</span><br><span class="line">   order_id <span class="type">BIGINT</span>,</span><br><span class="line">   order_info <span class="type">VARCHAR</span></span><br><span class="line">) <span class="keyword">WITH</span> (partitioned_by <span class="operator">=</span> <span class="keyword">ARRAY</span>[<span class="string">&#x27;order_date&#x27;</span>, <span class="string">&#x27;order_region&#x27;</span>])</span><br></pre></td></tr></table></figure><p>需要注意的是每个 column 的类型和 hive 有一定的区别，presto 中的类型可以查询：</p><p><a href="https://prestodb.io/docs/current/language/types.html#string">Data Types &#8212; Presto 0.270 Documentation</a></p><p>且对于 table 中某个 column 的 type，我们可以用 <code>typeof(column_name)</code> 去获取。</p><p>如果我们希望查看整个 table 的列/分区/库结构，则可以输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PARTITION</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><h4 id="创建并写入表-II"><a href="#创建并写入表-II" class="headerlink" title="创建并写入表 II"></a>创建并写入表 II</h4><p>对于已创建的表，我们可以使用 Insert Into 语句写入表中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name [ ( <span class="keyword">column</span> [, ... ] ) ] query</span><br></pre></td></tr></table></figure><p>我们可以看到，这个表除了可以全量插入数据，还可以对特殊的列进行插入操作。其他列会变成 NULL</p><p><strong>Notice:</strong> Presto 没有 Insert Overwrite 的操作，我们只能通过 Delete 然后 Insert Into 的方法写入已创建表</p><h4 id="删除表-I"><a href="#删除表-I" class="headerlink" title="删除表 I"></a>删除表 I</h4><p>直接把表连同表结构进行删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>  [ IF <span class="keyword">EXISTS</span> ] table_name</span><br></pre></td></tr></table></figure><h4 id="删除表-II"><a href="#删除表-II" class="headerlink" title="删除表 II"></a>删除表 II</h4><p>对表的某个分区进行删除，或者删除整个表，但是保留表的列结构等信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [ <span class="keyword">WHERE</span> <span class="keyword">condition</span> ]</span><br></pre></td></tr></table></figure><h4 id="对表进行修改"><a href="#对表进行修改" class="headerlink" title="对表进行修改"></a>对表进行修改</h4><h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [ I <span class="keyword">EXISTS</span> ] name RENAME <span class="keyword">TO</span> new_name</span><br></pre></td></tr></table></figure><h5 id="增加表列"><a href="#增加表列" class="headerlink" title="增加表列"></a>增加表列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] name <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] column_name data_type [ COMMENT comment ] [ <span class="keyword">WITH</span> ( property_name <span class="operator">=</span> expression [, ...] ) ]</span><br></pre></td></tr></table></figure><h5 id="删除表列"><a href="#删除表列" class="headerlink" title="删除表列"></a>删除表列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name</span><br></pre></td></tr></table></figure><h5 id="修改表列名"><a href="#修改表列名" class="headerlink" title="修改表列名"></a>修改表列名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] name RENAME <span class="keyword">COLUMN</span> [ IF <span class="keyword">EXISTS</span> ] column_name <span class="keyword">TO</span> new_column_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DA Tools </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Presto </tag>
            
            <tag> Hive </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 多人开发 与 分支管理</title>
      <link href="/2022/02/27/git-%E5%A4%9A%E4%BA%BA%E5%BC%80%E5%8F%91-%E4%B8%8E-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2022/02/27/git-%E5%A4%9A%E4%BA%BA%E5%BC%80%E5%8F%91-%E4%B8%8E-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="git-多人开发"><a href="#git-多人开发" class="headerlink" title="git 多人开发"></a>git 多人开发</h2><p>在现实工作中，我们经常会碰到多人开发同一个模块或项目的情况，这中间需要注意许多问题，比如分支的理解，冲突的解决等，这片文章就主要讲讲在用 git 开发代码时可能碰到的问题与解决方法。</p><h3 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h3><p>第一次开发的时候，有开发经验的老司机都会发出的警告：<strong>永远不要在本地 master 分支上开发</strong>，要保留一个干净的分支，以便后续切分支。后来在日常工作中，深刻得体会到了干净分支的重要性。</p><p>每个分支只 focus 在一个项目上，不要再同一个分支中搞多项目开发，这会给开发和维护带来很大的困难。</p><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>在确保本地已经安装 git 的前提下，要想在本地进行 git 项目的开发，首先我们需要让本地机器有这个项目的权限。则需要做两件事：</p><ol><li><p>确定自己有 git 账户对这个项目有开发权限，否则需要申请开发权限。如果没有开发权限，我们就无法自行得让本地连接到项目的远程分支仓库中</p></li><li><p>本地生成 ssh 秘钥，将公钥 Add 到项目 repo 的可识别 Key 中，这保证了本地机器能通过 ssh 对分支进行开发推送等。还需要注意本地 ssh 可能会有多个密钥，要确保 git 使用的是 post 到项目 repo 中的 key</p></li></ol><p>完成上述两步，应该就可以开始抓取远程分支进行开发了，使用的 cmd line 为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Jason24-Zeng/Jason24-Zeng.github.io.git $name</span><br></pre></td></tr></table></figure><p>这个指令的意思就是将远程分支拉取到本地，并写到当前路径下的 <code>$name</code> 目录，如果没有就创建。</p><h3 id="查看-Git-远程库信息"><a href="#查看-Git-远程库信息" class="headerlink" title="查看 Git 远程库信息"></a>查看 Git 远程库信息</h3><p>进入 <code>$name</code> 的目录，可以通过输入 <code>git remote -v</code> 显示详细的远程库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin    git@github.com:Jason24-Zeng/Jason24-Zeng.github.io.git (fetch)</span><br><span class="line">origin    git@github.com:Jason24-Zeng/Jason24-Zeng.github.io.git (push)</span><br></pre></td></tr></table></figure><p>origin 是远程仓库的默认名称，fetch 和 push 显示当前具有抓取与推送到 <code>origin</code> 的权限。</p><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>当我们本地进行提交后，我们可以将本地提交推送到远程库中。推送时的指令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>表示将当前本地提交的内容推送到 origin 这个远程仓库的 master 远程分支上。如果推送的结果与前面的结果有冲突，可以先 <code>git pull</code> 将当前的远程分支拉到本地，然后将冲突解决后，再 push 到远程分支上。如果远程分支只有一个人使用，且确认希望就将当前的内容完全 push 到远程分支上，则可以使用 <code>git push -f origin master</code>，它会清空 远程 <code>master</code> 分支的内容，然后把本地分支的内容全部推送给  master。</p><h3 id="不要在本地-master-分支上开发"><a href="#不要在本地-master-分支上开发" class="headerlink" title="不要在本地 master 分支上开发"></a>不要在本地 master 分支上开发</h3><p>再次提到，不要再本地 master 分支上开发，每天让本地 master 分支追踪远程 master 分支，并拉取最新代码，同时保证 master 分支是干净的。这样，我们每次切出的分支才是干净的，这会减少大量可能存在的 bug 引入与 冲突解决。</p><p>检查当前分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>切回 master 分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>拉取最新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure><p>从 master 分支切出新分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev-jason</span><br></pre></td></tr></table></figure><p>这时会已经切到了 dev-jason 分支，但是并没有声明当前分支所追踪的远程分支，则无法知道当前 diff。</p><p>所以跟踪远程 master 分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master dev-jason</span><br><span class="line"><span class="meta">#</span><span class="bash">or</span></span><br><span class="line">git branch -u origin master</span><br></pre></td></tr></table></figure><p>这样就可以再新分支上开发并推送修改到远程 master 分支上了。</p><p>而多人协作时最常出现的情况就是在 push 远程分支上出现冲突，和前面提到的一样，这时因为远程分支已经进行了修改，但是我们切出的分支与远程分支已经分叉，需要做的就是将远程分支的修改拉到切出的分支上，使用 <code>git pull</code> 解决往冲突后，切出的分支实的修改实际就是基于当前更新后的远程 master 分支进行修改了。</p><h3 id="git-pull-操作"><a href="#git-pull-操作" class="headerlink" title="git pull 操作"></a><code>git pull</code> 操作</h3><p><code>git pull</code> 命令先运行 <code>git fetch</code> 去下载相关仓库的内容。然后执行一个 <code>git merge</code> 操作，把远程的内容 ref 与 当前的 head merge, 并指向一个新的当地 merge commit。整个操作如同从图1</p><p><img src="https://jason24-zeng.github.io/img/git-多人开发-与-分支管理/bubble-diagram_01.svg" alt="bubble-diagram_01.svg"></p><p>到图2</p><p><img src="https://jason24-zeng.github.io/img/git-多人开发-与-分支管理/bubble-diagram_02.svg" alt="bubble-diagram_02.svg"></p><p>的整个流程。</p><p>相比 <code>git pull</code> 这个操作需要我们新更新一个 commit 以及 merge 切出去的分支的流程，我个人更喜欢用 <code>git pull --rebase</code> 这种换基的操作。这样做的好处是保证一个线性历史的追踪以及不必要的 merge commit。事实上，因为 —rebase 是一个非常常见的操作，所以我们可以直接设置一个 configuration, 保证使用 <code>git pull</code> 时，其实际操作是 <code>git pull --rebase</code>，这个操作是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global branch.autosetuprebase always</span><br></pre></td></tr></table></figure><p>与 merge 整个分支不同，rebase 把已提交的本地 commits 复制并写到了远程分支 commits 后面，这样就保证了历史 commit 的线性。其图表示为：</p><p><img src="https://jason24-zeng.github.io/img/git-多人开发-与-分支管理/bubble-diagram_03.png" alt="bubble-diagram_03.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Version Control System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devops </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索框架</title>
      <link href="/2022/02/19/%E6%90%9C%E7%B4%A2%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/02/19/%E6%90%9C%E7%B4%A2%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="39b39364f6bbeb4641c874f8001159c000365e0f1177a5166b5af1a4abe3cd06">68a8c3278477baad47ac774912504a9cceb004670a82c9d08beb888f382dd542740dde5e6172bf72d004d7c3b89ea60b11543478adf904d0b2e5a667568c351b9c1abee2c5d58ca8c1e82497524efaa1deb973a4323b6d7bdeeae0a614f495249daa514636ff0f5c4069b767f990eb9da86c1e3f519ba112488ac4d34b75736250e51953735aed25611c4ef7dd978f71c32a7cef14e8937d1689b9d0d60e502c62a8bb6e8f1340d356680f483e347bf6587832d2917b70aa3a432395319c35c76268143d0574abd985c7034acaa3ed9820b7f87b229239104599450d2038ef1c65c168d40a6d5d21a3dcf5544f466508ee767caf338c9267cefbf77b8235dfc73dcd045984421e274be9088434f080256c8a2b36c0a54213a5c9bdadb534381fc1bac1b7103eed46bbd78b495f2b7bd5cf991dfc402e31568d321a2ce799f22bd88a2f5fd21be6b3ba6784b2d8609cddaf7b2f3234084d90579ab2905ecc52875410ff983b0d65394f5ef849db31c48f526e7a48f6110965b17c2ac53513c3875e7527e31134d4d013e4fd0194993faf3801c08f243a1d43510c89f73455ce7923b3e08325e6951b60493f051eba0ea7fb74503c711510d79a3a22fd2d0fb1501a8c3ba631942e7d50a10cf6e93292e2ef45b3dd6f9ab52bf33ed9f78451f50ee32ed8b26c7ba856b1c14cc5f193584e0d73db2e8e0f300aa229aced5da9b0be2e3c0dab89cfea02e1a03ace4157ea52fb122481927ea82ce5df055481f8dd2ec199694123dabba147ce2d69b9d9212984311728ec31fa064178dc9bcdfa1a0d8acc0ab542009d4b36887bae0b5439e9880224c0e68f3fec82c0a6d576998aae26df9176d341db107e03a4d0772e745e022e0e1c40cb134aed33bdf841cf43148dc86cbb9d52241b167154b7cabaca7c259b5025e0fe0a172109059abf50f0ad8884d3c1d6d2e1ac91a731d25d70dc76ac69eb710dd646cb68cfa1b08fc1f799612210abbccd7bbc647a196fb7ed94987b76f46fb0217e98010f8e2ff24f297f9c0738cdd69471a01c96fd441a60f7bcaca59edd18297c2eacacdc88f8053e4eb13326e7b54f16d6b5314b8a190ceac1bf68f2e0d34a3f4c34e9d14afc46b783121bef6333d0d440bc233d601ae17d24a8d972a61829373521341dcc6831065fcbe945b0ec8e299b0675f5000423acdfaedae136f6962751ec1ecb4e766bc006e64e4ca2907e5c7d54bec6f39c7dc7b9c1a888a49d1fdd1a1e4fca323e7ee3995969e73e91b44680bc50756c22f0cf0fc5082b3bd31ba22a8b1ae0ad0bc98df41168680c6c6a1bbc493f51d8f05c31c721d8b5eb9c33cdc309aae673e1e7a57ff1926a8d7e891ff232119128ce2476c9a6edf37f64e7597a45739416162fcf6923935a43bd7d9d047a044ac0564e5ba348ab41230b19ea5266b901f80e43ca48f63875dc7945c5d9bfd3e77ede09860d5fc0609c18d96f226ec99d221cc4e2decdbe5da0d0e5c74c42c3bb979d53255b73b352d7bd405ff129133643a5b8fed736f503c2b0bba5181ac2f559c287e29f3b683757efa34e527803861dfc17ce7b4e776d08e34ee2c6f040985bc72faa36e0629365d3f9ad8d0ddcdee0e0df6ee690e81aed820a977efc411c31b4c0f2af571e73a85c30761811f45e3852559be11cac8ef3cd2cbf5b8543ad8901097e1531d53b6e8539e739d3159409161eee76eb60aeed1d4040adad17f2d212f705898de341e09b963d9bb2b50d2ffc912553a29f29befec9f5161425995d6da7e2f00801c0576c558f756bb1a07d3c6b4f87a8c326f0cd142d76d06f9e4b92980c4ea2ddb4317234719609a9ca190aa150e87a4b02736b5da1b376653e6a2c2b8aa17dedd32ea211b48470b3d425530198b00922f8162db71fd04b5c8f217aed66f06a9dddca5980119235ad5d07cf9c000d16f66f69a98e3b11f0824340cc284af5f10d619fb485cd6748c5c0423584243bc5815cc7d84cdea409d7b68c4f7382f00cece8fd0fec52bb0f09836ede026bd12d6aa2bfeef8f80d4123468f7a083fd362928e40fa27dfc72f4a50830aaf49b4c99e120c32f1ff0fc7d318936f0b2ae5da5b400ea68c957448eb406ae21b2b130b7620f07490e6bc9bf1b707329f80dd337e61920c6b0cd663c8641e8ff99c6085e101e95c08cf3a096e51ac7b0bba9dc7690f6547320fc27a94c21b33d8d2927b225a6c3a2e0ef3c1843cfe163d8c801e481dca8e64b46f4c7dff986c75b8a4bc1ef1f5128f2d08a6f236841de00b6a0fa1b8b53dda5d2fc1eba9c86da767461afa9ffa855e564ea07fb118aed49743be1997c2b976b319f71b57ba70cb4a1d2ad8376708ab54eb044ef950b58913cda30001a376bb1125c22c22e7b64ba73e320940147ec6ba0c9d4119c2ef737436cc27efee9b7142b95a9b2275947168d28941d39a7362436fb1db1971204f77ec61ab6b70c93f95561ecf6cb95f24ed1ad425277f27e4a908e9d2afacf95df9e01dfb52fa2109751a4924d209c235befdaf58a05934e69a53f082e438772d250bdd18d7c7a434e58043b75631a542e5fe9979fb37f04930dd96780a0ed96dffde</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Business MindMap </category>
          
          <category> Search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Search Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>command line 高级语法</title>
      <link href="/2022/02/19/vim-%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/02/19/vim-%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="vim-高级操作"><a href="#vim-高级操作" class="headerlink" title="vim 高级操作"></a>vim 高级操作</h2><h3 id="输出清晰表格"><a href="#输出清晰表格" class="headerlink" title="输出清晰表格"></a>输出清晰表格</h3><p>命令行参数输出为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column -t</span><br></pre></td></tr></table></figure><p>其实就是以 <code>\t</code> 作为分隔符将每行的数据分成不同列<br>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount | column -t</span><br></pre></td></tr></table></figure><p>相应的指令</p><div class="table-container"><table><thead><tr><th>-s sep</th><th>指定一组字符，用于分隔-t选项的列</th></tr></thead><tbody><tr><td>-t</td><td>确定输入包含的列数并创建表</td></tr><tr><td>-n</td><td>禁用将多个相邻分隔符合并为单个分隔符行为</td></tr><tr><td>-c columns</td><td>输出格式化为显示columns列宽</td></tr><tr><td>-x</td><td>在填充行之前填充列</td></tr><tr><td>-e</td><td>不要忽略空白行</td></tr></tbody></table></div><h3 id="重复执行某段代码"><a href="#重复执行某段代码" class="headerlink" title="重复执行某段代码"></a>重复执行某段代码</h3><p>在命令行或者 shell 脚本中经常使用的 while 循环就可以完成这样的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do </span><br><span class="line">ping -c 1 google.com &gt; /dev/null 2&gt;&amp;1 &amp;&amp; break</span><br><span class="line">done ;</span><br></pre></td></tr></table></figure><p>其中还牵涉到了重定向 <code>&gt; /dev/null 2&gt;&amp;1</code> 的操作。</p><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table></div><p>重定向符 <code>&gt;</code> 与 <code>&lt;</code> 等的操作如上。另外需要注意的是</p><blockquote><p>文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><h3 id="对进程进行排序"><a href="#对进程进行排序" class="headerlink" title="对进程进行排序"></a>对进程进行排序</h3><p> 按照内存资源进行排序 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | sort -nk 4</span><br></pre></td></tr></table></figure><p>按照 CPU 资源的使用量对进城进行排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep -nk 3</span><br></pre></td></tr></table></figure><h3 id="返回之前的目录"><a href="#返回之前的目录" class="headerlink" title="返回之前的目录"></a>返回之前的目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure><h3 id="会话关掉之后继续运行环境"><a href="#会话关掉之后继续运行环境" class="headerlink" title="会话关掉之后继续运行环境"></a>会话关掉之后继续运行环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ping -c 10 google.com &amp;</span><br></pre></td></tr></table></figure><p> <strong>nohup</strong> 是一个 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3" title="可移植操作系统接口">POSIX</a> 命令，用于忽略 <code>SIGHUP</code> (“<strong>sig</strong>nal <strong>h</strong>ang <strong>up</strong>“ 译：挂断信号) 。 <code>SIGHUP</code>信号是终端注销时所发送至程序的一个信号。</p><p>最后的 <code>&amp;</code> 则是表示后台执行的意思</p><h3 id="创建指定大小的文件"><a href="#创建指定大小的文件" class="headerlink" title="创建指定大小的文件"></a>创建指定大小的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=out.txt bs=1M count=10</span><br></pre></td></tr></table></figure><h3 id="以-root-用户来执行最后一个指令"><a href="#以-root-用户来执行最后一个指令" class="headerlink" title="以 root 用户来执行最后一个指令"></a>以 root 用户来执行最后一个指令</h3><p>当我们发现用一般用户无法运行指令时，我们可以切换到 root 用户去执行，而使用一下指令，可以直接使用 root 用户执行操作前的最后一个指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo !!</span><br></pre></td></tr></table></figure><h3 id="tr-命令"><a href="#tr-命令" class="headerlink" title="tr 命令"></a><code>tr</code> 命令</h3><p>我们可以用 <code>tr</code> 命令替换任意字符</p><h4 id="标签符号替换空格符"><a href="#标签符号替换空格符" class="headerlink" title="标签符号替换空格符"></a>标签符号替换空格符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat text.txt | tr `:[space:]` ` ` &gt; out.txt</span><br></pre></td></tr></table></figure><h4 id="大写转小写"><a href="#大写转小写" class="headerlink" title="大写转小写"></a>大写转小写</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat myfile | tr a-z A-Z&gt; output.txt</span><br></pre></td></tr></table></figure><h3 id="Xargs-指令"><a href="#Xargs-指令" class="headerlink" title="Xargs 指令"></a>Xargs 指令</h3><p>我们可以使用这个命令将命令的输出作为参数传递给另一个命令，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find. -name *.png -type f -print | xargs tar -cvzf images.tar.gz</span><br><span class="line">cat urls.txt | xargs wget</span><br><span class="line">ls /etc/*.conf | xargs -i cp &#123;&#125; /home/likegeeks/Desktop/out</span><br></pre></td></tr></table></figure><p>其中，第三行的 <code>-i</code> 与 <code>&#123;&#125;</code> 制定了命令行输出的位置</p><h2 id="vim-使用操作"><a href="#vim-使用操作" class="headerlink" title="vim 使用操作"></a>vim 使用操作</h2><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><ul><li><p><code>:sp</code>，split，水平划分。前面加上数字以设置新的窗口高度</p></li><li><p><code>:vs</code>, vertical split，垂直划分。</p></li><li><p><code>ctrl + w + w</code> 光标切换到下一个窗口</p></li><li><p><code>ctrl + w + h/j/k/l</code> 将光标沿方向更改到指定窗口</p></li><li><p><code>ctrl + w + c</code> 关闭当前窗口</p></li><li><p><code>ctrl + w+</code> 增大窗口大小</p></li><li><p><code>ctrl + w-</code> 减少窗口大小</p></li><li><p><code>:only</code> 关闭当前窗口以外的所有窗口</p></li><li><p><code>ctrl + w + n</code> 打开新窗口，窗口使用新的缓冲区。</p></li></ul><h3 id="Tab-管理"><a href="#Tab-管理" class="headerlink" title="Tab 管理"></a>Tab 管理</h3><p>我们可以分别管理每个选项卡的窗口布局。要创建标签，我们可以使用<code>:tabnew</code>命令打开一个新标签。</p><p>一些简单的选项卡管理方法是:</p><ul><li><code>:tabnew</code>:打开新标签</li><li><code>:tabclose</code>:关闭当前标签页</li><li><code>:tabn</code>:切换到下一个标签（<strong>n</strong>ext）</li><li><code>gt</code>:切换到下一个标签</li><li><code>:tabp</code>:切换到上一个标签</li><li><code>gT</code>:切换到上一个标签</li><li><code>:tab ball</code>:在单个选项卡中打开所有缓冲区</li><li><code>:tabs</code>:列出所有可用的标签</li></ul><p>随着缓冲区，窗口和选项卡的混排，有时会混淆您当前正在查看的文件。查找当前正在查看的文件名的快速方法是键入:</p><ul><li><strong>CTRL-g</strong>:显示当前文件名</li></ul><h3 id="vimrc-的使用"><a href="#vimrc-的使用" class="headerlink" title="vimrc 的使用"></a><code>vimrc</code> 的使用</h3><p>在 <code>vim</code> 中，我们可以通过 <code>:version</code> 命令查看 vim 载入配置的优先顺序，比如我所在的 macOS 系统的返回结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  system vimrc file: &quot;$VIM/vimrc&quot;</span><br><span class="line">    user vimrc file: &quot;$HOME/.vimrc&quot;</span><br><span class="line">2nd user vimrc file: &quot;~/.vim/vimrc&quot;</span><br><span class="line">     user exrc file: &quot;$HOME/.exrc&quot;</span><br><span class="line">      defaults file: &quot;$VIMRUNTIME/defaults.vim&quot;</span><br><span class="line"> fall-back for $VIM: &quot;/usr/share/vim&quot;</span><br></pre></td></tr></table></figure><p>可以看到 vim 会有限读取 user vimrc file: <code>&quot;$HOME/.vimrc&quot;</code>，当这个文件不存在时，vim 会去寻找 2nd user vimrc file：<code>&quot;~/.vim/vimrc&quot;</code>。了解这个对以后查询 <code>vim</code> 不生效的原因很重要。</p><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><h4 id="单词补全"><a href="#单词补全" class="headerlink" title="单词补全"></a>单词补全</h4><p>这种补全方式属于单词的前缀匹配，在 Insert 模式下，我们输入一些单词，然后按 <code>ctrl + n</code>， vim 会自动出现下拉菜单，且默认选中第一个单词，此时可以使用上下光标进行单词的选择。而 <code>ctrl + p</code> 的功能也是这样的，只是默认选中列表的最后一个单词。</p><h4 id="行补全"><a href="#行补全" class="headerlink" title="行补全"></a>行补全</h4><p>这种补全方式不再只补全其中一个单词，而是自动补全整句，使用的操作命令顺序为：<code>ctrl + x</code> 、 <code>ctrl + l</code></p><h4 id="字典补全"><a href="#字典补全" class="headerlink" title="字典补全"></a>字典补全</h4><p>假定有一个候选字典表 <code>my_diction.txt</code>，里面每一行都会有一个单词，我们可以载入这个词典表，基于这个词典表进行 Vim 自动补全，设置步骤为：</p><ol><li><p>在 <code>$HOME/.vimrc</code> 配置文件中加入: <code>set dictionary-=~/dict.txt dictionary+=~/dict.txt</code></p></li><li><p>打开 <code>vim</code>，在插入模式下输入 <code>ctrl + x</code> 后输入 <code>ctrl + k</code>，就可以匹配字典中的单词</p></li><li><p>如果想要使用单词补全的方法显示列表，即使用 <code>ctrl + n</code>，可以考虑配置 <code>.vimrc</code> 文件，加入: <code>set complete-=k complete+=k</code></p></li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://zhuanlan.zhihu.com/p/47383299">15个超实用的Linux 命令行使用技巧</a></p><p><a href="https://zhuanlan.zhihu.com/p/90721457">Vim 高级使用技巧汇总</a></p><p><a href="https://webdevetc.com/blog/tabs-in-vim/">Beginners Guide to Tabs in Vim</a></p><p><a href="https://www.youtube.com/watch?v=J0-N1nVTU4k">https://www.youtube.com/watch?v=J0-N1nVTU4k</a></p><p><a href="https://github.com/wsdjeg/vim-galore-zh_cn#%E4%BB%80%E4%B9%88%E6%98%AF-vim">Vim 从入门到精通</a></p><p><a href="https://vimjc.com/vim-auto-complement.html">Vim自带自动补齐功能-Vim入门教程(11)</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Text Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VIM </tag>
            
            <tag> Command Line Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSL 语句学习</title>
      <link href="/2022/02/19/DSL-%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/02/19/DSL-%E8%AF%AD%E5%8F%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> DSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多机使用 Hexo</title>
      <link href="/2022/02/04/%E5%A4%9A%E6%9C%BA%E4%BD%BF%E7%94%A8-Hexo/"/>
      <url>/2022/02/04/%E5%A4%9A%E6%9C%BA%E4%BD%BF%E7%94%A8-Hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Reference">Reference</h3><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">Git 工具 - 子模块</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">Git 分支 - 分支的新建与合并</a></p><p><a href="https://mindawei.github.io/2018/05/01/%E5%A4%9A%E6%9C%BA%E4%BD%BF%E7%94%A8Hexo%E5%8D%9A%E5%AE%A2/">多机使用Hexo博客</a></p><h3 id="前言">前言</h3><p>因为工作原因，需要在新电脑上更新博客，为此，我特地研究了一下如何将源码传到博客上的方法。但是对于一些 prerequisite 的软件要求，还需要按照 <a href="https://jason24-zeng.github.io/2022/01/14/%E6%90%AD%E5%BB%BAHexo-blog/">搭建 Hexo 博客</a> 里的提示下载安装。</p><h3 id="思路">思路</h3><p>完成源码多机使用的关键是源码共享，为此，我们需要将 hexo 的根目录上传到一个远程仓库中，对其他机器可见，而其他有权限机器也能对其做修改。而 <code>git</code> 恰好可以满足我们的要求。</p><h3 id="实现步骤">实现步骤</h3><h4 id="创建贡献远程分支">创建贡献远程分支</h4><h5 id="在博客根节点上初始化-git">在博客根节点上初始化 git</h5><p><code>cd</code> 到相应目录，初始化根节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h5 id="创建并切换分支">创建并切换分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h5 id="连接远程分支到根目录">连接远程分支到根目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@…&lt;git_url&gt;</span><br></pre></td></tr></table></figure><h5 id="关联远程分支">关联远程分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u origin master</span><br></pre></td></tr></table></figure><h5 id="push-远程分支到相应的-branch-分支">push 远程分支到相应的 branch 分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h5 id="切换跟踪分支">切换跟踪分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u orgin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h5 id="更新分支">更新分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方法 I</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;your commit&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> push</span></span><br><span class="line">git push origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h4 id="新主机使用博客操作">新主机使用博客操作</h4><h5 id="拉取代码">拉取代码</h5><h5 id="注意事项">注意事项</h5><p>注意上述操作可能会出现 submodule 的缺失问题，需要使用 <code>git submodule init</code> 等操作进行更新。主要原因是上传的根目录下，存在一些其他的 git 节点，这些节点没有被上传。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch (VI) -- Kibana 使用</title>
      <link href="/2022/02/03/ElasticSearch-VI/"/>
      <url>/2022/02/03/ElasticSearch-VI/</url>
      
        <content type="html"><![CDATA[<h3 id="Kibana-介绍"><a href="#Kibana-介绍" class="headerlink" title="Kibana 介绍"></a>Kibana 介绍</h3><p>Kibana 是一种辅助 ElasticSearch 进行可视化数据分析的工具，它的存在大大方便了我们对线上搜索日志数据或者机器性能等的 Inspection。可以简单得通过 docker-compose 启动一个 kibana 容器，并与 elastic 服务相连。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: elasticsearch:<span class="number">7.16</span><span class="number">.2</span></span><br><span class="line">    container_name: elasticsearch</span><br><span class="line">    environment:</span><br><span class="line">      - discovery.type=single-node</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      # - cluster.initial_master_nodes=elasticsearch</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: <span class="number">-1</span></span><br><span class="line">        hard: <span class="number">-1</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">9200</span>:<span class="number">9200</span></span><br><span class="line">      - <span class="number">9300</span>:<span class="number">9300</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./elasticsearch/data:/usr/share/elasticsearch/data</span><br><span class="line">      - ./elasticsearch/logs:/usr/share/elasticsearch/logs</span><br><span class="line">    networks:</span><br><span class="line">      - es-net</span><br><span class="line"></span><br><span class="line">  kibana:</span><br><span class="line">    image: kibana:<span class="number">7.16</span><span class="number">.2</span></span><br><span class="line">    container_name: kibana_1</span><br><span class="line">    depends_on:</span><br><span class="line">      - elasticsearch</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">5601</span>:<span class="number">5601</span></span><br><span class="line">    environment:</span><br><span class="line">      - ELASTICSEARCH_HOSTS=http:<span class="comment">//elasticsearch:9200</span></span><br><span class="line">      - I18N_LOCALE=zh-CN</span><br><span class="line">      - xpack.monitoring.ui.container.elasticsearch.enabled=<span class="literal">false</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:rw</span><br><span class="line">    networks:</span><br><span class="line">      - es-net</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  es-net:</span><br></pre></td></tr></table></figure><p>注意在上面的配置中，我们使用 networks 连接，并将这个 network 取名为 es-net。如果这个 es-net 不存在，则使用上述配置，否则，network 项需要改成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">networks:</span><br><span class="line">  es-net: </span><br><span class="line">    driver: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>另外 kibana 环境在 docker-compose 中无法切换成中文，需要进入 <code>/usr/share/kibana/config</code> 目录中，修改或添加下列几项到 <code>kibana.yml</code> 文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ] <span class="comment"># 与 elasticsearch 中设定的名字有关</span></span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="Kibana-使用简单入门"><a href="#Kibana-使用简单入门" class="headerlink" title="Kibana 使用简单入门"></a>Kibana 使用简单入门</h3><p>当我们打开浏览器，连接 <code>http://127.0.0.1:5601/</code> 出现如下网页或者让我们添加集成时，就显式我们已经成功：</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-VI/kibana_welcome.png" alt="kibana_welcome.png"></p><p>或者我们可以使用其开发工具输入 <code>GET _search</code>查看配置，便能看到相应的返回结果如下</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-VI/discover_devops.png" alt="discover_devops.png"></p><h3 id="Discover-Overview"><a href="#Discover-Overview" class="headerlink" title="Discover Overview"></a>Discover Overview</h3><p>我们在使用 Kibana 时，最常使用的应该就是 Kibana 的 Discover 功能，他为我们提供了一个可视化过滤与汇总统计数据的方式，是我们使用 ElasticSearch 阶段不可缺少的工具。</p><p>首先在左侧选择栏中找到 「Management（管理）: Stack Management」&gt;&gt; 「Kibana: Index Pattern（索引模式）」中点击创建索引模式进行创建。这里就不单独介绍了，直接使用样例进行创建，创建后在索引模式中展现如下。</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-VI/kibana_index_pattern.png" alt="kibana_index_pattern.png"></p><p>可以看到左侧选择栏有 「Analytics : Discover」这一栏，点击它，便进入了进行可视化数据统计的入口如下页面展示，接下来主要介绍这四个区域。</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-VI/discover_overview.png" alt="discover_overview.png"></p><h4 id="区域-A"><a href="#区域-A" class="headerlink" title="区域 A"></a>区域 A</h4><p>条件搜索框，用于根据条件返回有关信息。主要有两部分 搜索框 + 时段框 + 其他筛选条件，在设置好这两个条件框及其他筛选条件后，点击刷新，就完成了搜索。</p><h5 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h5><p>有两种语言，一种是 KQL(Kibana Query Language)，一种是 Lucene。两者是一致的，只是 KQL 提供简化查询语法并支持脚本字段，同样KQL 还提供自动完成功能，用于条件的选择，而对 Lucene 的支持稍微差一点，需要手写 Lucene 条件匹配语句。搜索语句可以保存。</p><h5 id="时段框"><a href="#时段框" class="headerlink" title="时段框"></a>时段框</h5><p>时段框用于对统计时间区间进行筛选，支持绝对筛选，相对筛选。</p><p>绝对筛选：即筛选从「某年某月某日某时某分某秒」到 「某年某月某日某时某分某秒」的数据</p><p>相对筛选：即筛选离「当前」「多少 秒/分钟/小时/日/周/月/季度/年/十年」「前/后」等的数据。注意，可以就筛选「当前」。</p><h5 id="其他筛选条件"><a href="#其他筛选条件" class="headerlink" title="其他筛选条件"></a>其他筛选条件</h5><p>看到有一个「 + 添加筛选 」的选项，点击，选择想要进行筛选的字段和运算符，进行条件的筛选。这个筛选栏拿出来的目的是多个筛选可能会用到一些同样的条件，使用这个其他筛选条件可以保持这些筛选条件的固定。</p><h4 id="区域-B"><a href="#区域-B" class="headerlink" title="区域 B"></a>区域 B</h4><p>区域 B 是一个统计柱状图，统计整个时间区间内，每个时段的数据 <code>count</code> 值，可以通过右上角 「图标选项」进行一定操作，比如隐藏图标，或者设定时段区间。</p><h4 id="区域-C"><a href="#区域-C" class="headerlink" title="区域 C"></a>区域 C</h4><p>区域 C 为命中的 doc 及其相关信息，与其只展现 Time 与一些 区域 D 选中的相关字段。</p><h4 id="区域-D"><a href="#区域-D" class="headerlink" title="区域 D"></a>区域 D</h4><p>区域 D 则为选择想要展示的字段，以及可选的字段。注意，每次请求发送所返回的响应体，会包含所有可选字段(域内所有字段)，而我们可以通过 区域 D 进行选择想要的字段。而选择字段可以通过一个个浏览的方式去选择，也可以通过字段名称的搜索匹配去选择，还可以通过类别筛选的方式进行。</p><h4 id="其他区域"><a href="#其他区域" class="headerlink" title="其他区域"></a>其他区域</h4><p>其实 Discover 右上角还有一些 「选项」，「检查」等操作，可以用来查看更底层的发送请求与相应，同样支持保存操作，已被后续修改。</p><h4 id="后台运行搜索-session"><a href="#后台运行搜索-session" class="headerlink" title="后台运行搜索 session"></a>后台运行搜索 session</h4><p>有时候我们可能想要搜索大量的数据，这可能会花很长的时间。这时候我们可以在后台运行我们的请求，从而可以继续进行其他工作。操作步骤：</p><ol><li><p>Load dashboard。搜索会话自动开始，在 dashboard 的 title 后的时钟 icon 会展示当前搜索会话的状态，是正在运行，还是结束。</p></li><li><p>为了告诉 Kibana 要持续后台搜索，点击那个时钟 icon ，然后点击「保存会话 / Save session」</p></li><li><p>而为了看我们保存的搜索，可以打开主菜单，然后点击 「Stack Management」&gt; 「Search Session」。</p></li><li><p>选择要看的那个搜索会话，点击 </p><ol><li><p>「Inspect」查看造成这个搜索的请求和过滤条件</p></li><li><p>「Edit」 编辑一个会话的名字</p></li><li><p>「Extend」延长一个完整 session 的 expiration</p></li><li><p>「Delete」删除一个会话</p></li></ol></li></ol><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>Dashboard 就是我们常说的可视化看板，是为了将字段或者一些统计数据直观得展现出来的可视化界面。它可以是直接通过对源数据进行聚合进行展现，也可以通过上面的 Discover 保存的结果中进行 Add。主要展现形式是图标。</p><h5 id="将搜索结果加入看板"><a href="#将搜索结果加入看板" class="headerlink" title="将搜索结果加入看板"></a>将搜索结果加入看板</h5><ul><li><p>打开一个 Dashboard</p></li><li><p>点击 「Add from Library」或「从库中添加」</p></li><li><p>从选项中选择保存过的搜索，然后点击 <strong>X</strong> 退出</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.tizi365.com/archives/796.html">Kibana Discover数据查询</a><br><a href="https://www.cnblogs.com/chenqionghe/p/12501218.html">Lucene查询语法汇总</a><br><a href="https://www.cnblogs.com/chenqionghe/p/12503181.html">Kibana详细入门教程</a><br><a href="https://zhuanlan.zhihu.com/p/102185616">ELK总结——第四篇Kibana的简介</a><br><a href="https://www.elastic.co/guide/en/kibana/current/discover-search-for-relevance.html">Search for relevance</a><br><a href="https://www.elastic.co/guide/en/kibana/current/dashboard.html#dashboard">Dashboard and visualizations</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Apache </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch (V) -- 中文分词</title>
      <link href="/2022/02/02/ElasticSearch-V/"/>
      <url>/2022/02/02/ElasticSearch-V/</url>
      
        <content type="html"><![CDATA[<p>这一章节主要讲解如何下载安装与使用分词器。</p><p>ElasticSearch 镜像里有各式各样的英文分词器，比如特定语言分词器，正则分词器，stop 分词器，空白分词器，简单分词器，标准分词器等。但是对于中文分词的支持不是很好，我们需要单独下载安装中文分词的插件，这里介绍对中文分词器 IK-analyzer 的下载安装。</p><h3 id="分词器下载安装"><a href="#分词器下载安装" class="headerlink" title="分词器下载安装"></a>分词器下载安装</h3><h4 id="使用-docker-compose-对集群进行安装"><a href="#使用-docker-compose-对集群进行安装" class="headerlink" title="使用 docker-compose 对集群进行安装"></a>使用 docker-compose 对集群进行安装</h4><p>需要单独给每个节点安装，使用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec es01 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip</span><br><span class="line">docker-compose exec es02 elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip</span><br></pre></td></tr></table></figure><p>然后需要重启 es 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart es01</span><br><span class="line">docker-compose restart es02</span><br></pre></td></tr></table></figure><p>需要注意，分词器的版本需要与 es 的镜像版本保持一致，比如上面，我们使用的 elasticsearch 的版本就是 7.16.2。镜像更新后，其他 plugin 也需要相应得进行更新。否则可能有如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Plugin [analysis-ik] was built for Elasticsearch version 7.1.1 but version 7.16.2 is running</span><br></pre></td></tr></table></figure><h4 id="进入容器内对单点进行安装"><a href="#进入容器内对单点进行安装" class="headerlink" title="进入容器内对单点进行安装"></a>进入容器内对单点进行安装</h4><p>另一种方法稍微麻烦一点，不使用 <code>docker-compose</code> 命令，整体操作如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 0x01. 进入容器</span><br><span class="line">docker exec -it elasticsearch_01 /bin/bash</span><br><span class="line">// 0x02. 使用 bin 目录的 elasticsearch-plugin install 安装插件</span><br><span class="line">bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.1/elasticsearch-analysis-ik-7.16.2.zip</span><br><span class="line">// 0x03. cmd + D 退出并重启容器</span><br><span class="line">docker restart elasticsearch_01</span><br></pre></td></tr></table></figure><h4 id="验证分词插件是否成功"><a href="#验证分词插件是否成功" class="headerlink" title="验证分词插件是否成功"></a>验证分词插件是否成功</h4><p>首先先通过重启后的日志检查是否 load 了 <code>analysis-ik</code> 这个插件，具体如下图：</p><p><img src="/Users/zijianzeng/Documents/hexo/new_blog/source/img/ElasticSearch-V/ik_installed_info.png" alt="ik_installed_info.png"></p><p>则表示 load 成功了，再验证能否正常使用该插件。</p><p>使用 postman 发送分析请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://127.0.0.1:9200/_analyze</span><br></pre></td></tr></table></figure><p>使用 <code>ik_smart</code> 分词，请求体为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;我们是中国软件工程师&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或使用 <code>ik_max_word</code> 分词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;我们是中国软件工程师&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终 <code>ik_smart</code> 返回结果是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;我们&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;是&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;软件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;工程师&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ik_max_word</code> 与之稍有区别，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;我们&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;是&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;软件工程&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;软件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;工程师&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;工程&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">6</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;师&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而非报错信息，即证明分词器可用。</p><h3 id="创建索引时设置分词器"><a href="#创建索引时设置分词器" class="headerlink" title="创建索引时设置分词器"></a>创建索引时设置分词器</h3><p>操作例子如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT http://elasticsearch-1:9200/analyzer_index</span><br></pre></td></tr></table></figure><p>请求体为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;analysis&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span>: &#123;</span><br><span class="line">               <span class="attr">&quot;my_analyzer&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;whitespace&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;team_name&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;play_year&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;jerse_no&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 mapping 中的 title 使用了 analyzer 配置。当然，在 <code>&quot;title&quot;</code>里面设置 analyzer 还可以直接设置已有的 plugin，比如 <code>&quot;ik_max_word&quot;</code>。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.cnblogs.com/geoffreygao/p/13889696.html">ElasticSearch7.2简单命令实操(postman版)</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Apache </tag>
            
            <tag> Ik 分词器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch (IV) -- Elastic 搜索查询语法</title>
      <link href="/2022/02/02/ElasticSearch-IV/"/>
      <url>/2022/02/02/ElasticSearch-IV/</url>
      
        <content type="html"><![CDATA[<h3 id="DSL-搜索"><a href="#DSL-搜索" class="headerlink" title="DSL 搜索"></a>DSL 搜索</h3><p>DSL 搜索时 Domain Speicific Search。我们不必如下式全局搜索展示的一样在搜索时写一连串的条件体。这样的做法在于方便 debug。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/nba/_search?q=play_year:10&amp;q=name:库里</span><br></pre></td></tr></table></figure><h4 id="DSL-搜索形式"><a href="#DSL-搜索形式" class="headerlink" title="DSL 搜索形式"></a>DSL 搜索形式</h4><p>DSL 以 JSON 请求体的形式发起搜索请求，允许更加复杂，强大的查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc/_search</span><br><span class="line"><span class="meta">#</span><span class="bash">  请求</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot; : &#123; # match 只是查询中的一种</span><br><span class="line">            &quot;play_year&quot; : 10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求与返回结果如下：</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-IV/DSL_1.png" alt="DSL_1.png"></p><h4 id="多条件判断"><a href="#多条件判断" class="headerlink" title="多条件判断"></a>多条件判断</h4><p>复杂一点的范围查询，比如找出 <code>play_year &gt; 5</code> 且 <code>position = shooting guard</code> 的 NBA 球员</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc/_search</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;range&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;play_year&quot;</span> : &#123;</span><br><span class="line">                        <span class="attr">&quot;gt&quot;</span> : <span class="number">5</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;must&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;match&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;position&quot;</span> : <span class="string">&quot;shooting guard&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样搜索就可以了。返回结果</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-IV/DSL_2.png" alt="DSL_2.png"></p><h4 id="或逻辑判断"><a href="#或逻辑判断" class="headerlink" title="或逻辑判断"></a>或逻辑判断</h4><p>如果我们想返回 <code>name=Lebron 詹姆斯</code> 和 <code>name=James 哈登</code>两个匹配的结果，可以输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc/_search</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Lebron James&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果如下，因为 match 是指找到所有能匹配请求体中 string 的结果。</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-IV/DSL_3.png" alt="DSL_3.png"></p><h3 id="高亮显式"><a href="#高亮显式" class="headerlink" title="高亮显式"></a>高亮显式</h3><p>想要高亮否一些 fields，可以通过在请求体中加入一个与 <code>query</code> 同级的 <code>highlight</code> 请求体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc/_search</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span> : &#123; </span><br><span class="line">            <span class="attr">&quot;position&quot;</span> : <span class="string">&quot;shooting guard&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;position&quot;</span> : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>类似于 SQL 中的 group by 操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc/_search</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;all_interests&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;play_year&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量查询或插入数据"><a href="#批量查询或插入数据" class="headerlink" title="批量查询或插入数据"></a>批量查询或插入数据</h3><h4 id="批量查询数据"><a href="#批量查询数据" class="headerlink" title="批量查询数据"></a>批量查询数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc/_mget</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;ids&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;23&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有数据不存在，不影响结果的返回，只是对该 id 的返回体 <code>found</code> 为 <code>false</code></p><h4 id="批量插入、修改、删除数据"><a href="#批量插入、修改、删除数据" class="headerlink" title="批量插入、修改、删除数据"></a>批量插入、修改、删除数据</h4><p>使用 <code>_bulk</code> api 完成如下请求格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;action : &#123;metadata&#125; &#125; \n</span><br><span class="line">&#123;request body        &#125; \n</span><br><span class="line">&#123;action : &#123;metadata&#125; &#125; \n</span><br><span class="line">&#123;request body        &#125; \n</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h6 id="插入请求体示例"><a href="#插入请求体示例" class="headerlink" title="插入请求体示例"></a>插入请求体示例</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;create&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;nba&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Anthony Davids&quot;</span>, <span class="attr">&quot;team_name&quot;</span>:<span class="string">&quot;Los Angles Lakers&quot;</span>, <span class="attr">&quot;position&quot;</span>:<span class="string">&quot;Center&quot;</span>, <span class="attr">&quot;play_year&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;create&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;nba&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="attr">&quot;_id&quot;</span>: <span class="number">12</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Russel Westbrook&quot;</span>, <span class="attr">&quot;team_name&quot;</span>:<span class="string">&quot;Los Angles Lakers&quot;</span>, <span class="attr">&quot;position&quot;</span>:<span class="string">&quot;Point Guard&quot;</span>, <span class="attr">&quot;play_year&quot;</span>:<span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><p>注意每一行都需要 <code>\n</code></p><h6 id="删除请求体示例"><a href="#删除请求体示例" class="headerlink" title="删除请求体示例"></a>删除请求体示例</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;delete&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;nba&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;delete&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;nba&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;_doc&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;htJWtX4BnmkKdz--Ip7s&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>批量请求大小多少才能使性能最高？并不是越大越好，因为请求越大，给其他请求可用的内存就越小，可以找到一个请求 bulk，超过这个，性能就不再提升。而这个 bulk 数与我们的硬件，文档大小和复杂度以及索引和搜索的负载有关。一个好的批次最好保持在 5 - 15 MB 之间。</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>和 SQL 中的 <code>LIMIT</code> 关键字相似，返回只有一页的结果， Elasticsearch 接受 <code>from</code> 和 <code>size</code> 参数，这两个参数和 C++ 中的 substr 一致，<code>from</code> 表示起始位置与 <code>0</code> 之间的 offset，而 <code>size</code> 则表示需要获取的结果数。</p><p>如果我们想要每页显示 5 个结果，页码从 1 到 3，请求结果为 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET .../_search?size=5</span><br><span class="line">GET .../_search?size=5&amp;from=5</span><br><span class="line">GET .../_search?size=5&amp;from=10</span><br></pre></td></tr></table></figure><p><strong>Warning!</strong> ：需要注意，在集群中做深度分页会有问题。假设我们请求第 1000 页的 10 条结果，每页的 size 为 50 个，那意味着我们会请求节点排序 50050 条结果，但最终丢弃其中的 50040 条结果，排序结果的花销随着分页的深入而成倍增长。因此网络搜索引擎中任何语句都不能返回多余 1000 个结果。</p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>Elasticsearch 可以自动判断类型，但有时其判断的类型和实际需求不符，这时我们需要明确字段类型。</p><p>自动判断的规则为：</p><div class="table-container"><table><thead><tr><th>JSON 类型</th><th>Field 类型</th></tr></thead><tbody><tr><td>Boolean: <code>true</code> of <code>false</code></td><td><code>&quot;boolean&quot;</code></td></tr><tr><td>Whole number: <code>123</code></td><td><code>&quot;long&quot;</code></td></tr><tr><td>Floating point: <code>123.45</code></td><td><code>&quot;double&quot;</code></td></tr><tr><td>String.valid date: <code>&quot;2014-09-15&quot;</code></td><td><code>&quot;date&quot;</code></td></tr><tr><td>String: <code>&quot;foo bar&quot;</code></td><td><code>&quot;string&quot;</code></td></tr></tbody></table></div><p>Elasticsearch 中支持的类型：</p><div class="table-container"><table><thead><tr><th>类型</th><th>表示的数据类型</th></tr></thead><tbody><tr><td>String</td><td><code>&quot;string&quot;,&quot;text&quot;,&quot;keyword&quot;</code></td></tr><tr><td>Whole number</td><td><code>&quot;long&quot;,&quot;byte&quot;,&quot;integer&quot;,&quot;long&quot;</code></td></tr><tr><td>Floating point</td><td><code>&quot;double&quot;,&quot;double&quot;</code></td></tr><tr><td>Date</td><td><code>&quot;date&quot;</code></td></tr><tr><td>Boolean</td><td><code>&quot;boolean&quot;</code></td></tr></tbody></table></div><p>Notice:</p><ol><li><p>Elasticsearch 5.x 不再支持<code>string</code>，而用 <code>text</code> 与 <code>keyword</code> 类型代替。</p></li><li><p>当一个字段要被全文搜索时 (需要分词)，比如 Email 内容，产品描述，应该使用 <code>text</code> 类型。这样字段内容会被分析，在生成倒排索引之前，字符串会被分析器分成一个个词，<code>text</code> 类型的字段不用于排序，很少用于聚合。</p></li><li><p><code>keyword</code> 类型则适用于索引结构化的字段，比如 Email 地址，主机名，状态码和标签。如果字段需要进行过滤、排序、聚合。<code>keyword</code> 类型的字段只能通过精确值搜到。</p></li></ol><h4 id="创建明确类型的索引"><a href="#创建明确类型的索引" class="headerlink" title="创建明确类型的索引"></a>创建明确类型的索引</h4><p>操作 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/itcast</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;number_of_shards&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;person&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;age&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;mail&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;hobby&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子在 ES 7.x 中是会报错的，报错为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;error&quot;: &#123;</span><br><span class="line">        &quot;root_cause&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</span><br><span class="line">                &quot;reason&quot;: &quot;Root mapping definition has unsupported parameters:  [person : &#123;properties=&#123;mail=&#123;type=keyword&#125;, name=&#123;type=text&#125;, age=&#123;type=integer&#125;, hobby=&#123;type=text&#125;&#125;&#125;]&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;Failed to parse mapping [_doc]: Root mapping definition has unsupported parameters:  [person : &#123;properties=&#123;mail=&#123;type=keyword&#125;, name=&#123;type=text&#125;, age=&#123;type=integer&#125;, hobby=&#123;type=text&#125;&#125;&#125;]&quot;,</span><br><span class="line">        &quot;caused_by&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</span><br><span class="line">            &quot;reason&quot;: &quot;Root mapping definition has unsupported parameters:  [person : &#123;properties=&#123;mail=&#123;type=keyword&#125;, name=&#123;type=text&#125;, age=&#123;type=integer&#125;, hobby=&#123;type=text&#125;&#125;&#125;]&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错原因是， ES 7 之后，对于 <code>document_type</code> 这个 mapping type 被移除了，具体的细节可以查询 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html">Removal of mapping types</a></p><p>所以正确的构造请求体为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个明确类型最大的效果实际上是在分词那部分。我们需要给我们需要的字段设定 <code>text</code> 类型，因为 <code>keyword</code>类型无法分词。</p><h3 id="结构化查询"><a href="#结构化查询" class="headerlink" title="结构化查询"></a>结构化查询</h3><p>查询操作使用相同，只是请求体内容不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/nba/_doc/_search</span><br></pre></td></tr></table></figure><h4 id="term-查询"><a href="#term-查询" class="headerlink" title="term 查询"></a>term 查询</h4><p><code>term</code> 主要是用于精确匹配一些数字，日期，布尔值或 <code>not_analyzed</code> 的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;age&quot;</span>:    <span class="number">26</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;date&quot;</span>:   <span class="string">&quot;2022-02-02&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;public&quot;</span>:    <span class="literal">true</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;tag&quot;</span>:    <span class="string">&quot;full_text&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>用例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;play_year&quot;</span> : <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="terms-查询"><a href="#terms-查询" class="headerlink" title="terms 查询"></a>terms 查询</h4><p>相比 <code>term</code> 查询，<code>terms</code> 查询可以查询 满足某个 term 的多个值</p><p>请求体的一个例子为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;play_year&quot;</span>: [</span><br><span class="line">                <span class="number">12</span>,</span><br><span class="line">                <span class="number">10</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="range-查询"><a href="#range-查询" class="headerlink" title="range 查询"></a>range 查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;range&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;play_year&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;gte&quot;</span> : <span class="number">10</span>,</span><br><span class="line">                <span class="attr">&quot;lt&quot;</span>: <span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范围操作符有：</p><ul><li><code>gt</code> : 大于</li><li><code>gte</code> : 大于等于</li><li><code>lt</code> : 小于</li><li><code>lte</code> : 小于等于</li></ul><h4 id="exists-查询"><a href="#exists-查询" class="headerlink" title="exists 查询"></a>exists 查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;exists&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span> : <span class="string">&quot;jerse_no&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于查询当前文档中包含该字段的文档</p><h4 id="match-查询"><a href="#match-查询" class="headerlink" title="match 查询"></a>match 查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;play_year&quot;</span> : <span class="string">&quot;10&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是全文查询还是精确查询基本上都要用到它。无论这个字段是结构化的数据还是非结构化的数据，都可以使用 <code>match</code> 进行查询。在多次搜索中，我们需要 specify 到底我们希望返回的是多词的交还是多词的并，则需要加入 <code>&quot;operator&quot;</code>，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;team_name&quot;</span> : &#123;</span><br><span class="line">                 <span class="attr">&quot;query&quot;</span> : <span class="string">&quot;Anthony Davids&quot;</span></span><br><span class="line">                 <span class="string">&quot;operator&quot;</span> : <span class="string">&quot;or&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多词查询实际上不会选取 <code>AND</code> 和 <code>OR</code> 这种极端，更可能是使用一个相似度得分去查询数据。通过 <code>minimum_should_match</code> 来制定匹配度。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;query&quot;</span> : <span class="string">&quot;Anthony Davids&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;minimum_should_match&quot;</span> : <span class="string">&quot;90%&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bool-查询"><a href="#bool-查询" class="headerlink" title="bool 查询"></a>bool 查询</h4><p>bool 查询是用于合并多个查询结果的布尔逻辑的查询，其主要关键字如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;must&quot;</span> : &#123;<span class="attr">&quot;term&quot;</span> : &#123;<span class="attr">&quot;folder&quot;</span> : <span class="string">&quot;inbox&quot;</span>&#125;&#125;, <span class="comment">// 可以理解为 and</span></span><br><span class="line">        <span class="attr">&quot;must_not&quot;</span> : &#123;<span class="attr">&quot;term&quot;</span> : &#123;<span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;spam&quot;</span>&#125;&#125;, <span class="comment">// 可以理解为 not</span></span><br><span class="line">        <span class="attr">&quot;should&quot;</span> : [                              <span class="comment">// 可以理解为 or</span></span><br><span class="line">            &#123;<span class="attr">&quot;term&quot;</span> : &#123;<span class="attr">&quot;starred&quot;</span> : <span class="literal">true</span>&#125;&#125;,</span><br><span class="line">            &#123;<span class="attr">&quot;term&quot;</span> : &#123;<span class="attr">&quot;unread&quot;</span> : <span class="literal">true</span>&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>距离如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;must_not&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;play_year&quot;</span>: <span class="number">10</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;must&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;team_name&quot;</span>: <span class="string">&quot;Los&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h3><p>前面讲到结构化查询， 而 ES 其实还支持过滤查询，如 term、range、match 等</p><p>一个例子如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;term&quot;</span> : &#123;</span><br><span class="line">                    <span class="attr">&quot;play_year&quot;</span> : <span class="number">15</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这个例子与结构化查询之间有什么区别呢？</p><ul><li><p>一个过滤语句会询问每个文档的字段值，去判断是否包含着特定值</p></li><li><p>查询语句则会询问每个文档的字段值与特定值的匹配程度。也就是会计算每个文档与查询语句的相关性，给出一个相关性评分 <code>_score</code>，然后再按照相关性对匹配的文档进行排序，这种评分方式适用于一个没有完全配置结果的全文本搜索。</p></li><li><p>一个简单的文档列表，快速匹配运算并存入内存是十分方便的。这些缓存的过滤结果集合或许请求的结合使用非常高效。</p></li><li><p>查询结果不仅要查找相匹配的文档，还计算每个文档的相关性，所以一般来说查询语句更耗时，且不缓存结果。</p></li></ul><p>所以，当我们做精确匹配搜索时，最好用过滤语句，这样可以缓存数据，且不必计算相关性。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html">Removal of mapping types</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch (III) -- Elastic 使用入门 + Postman 使用</title>
      <link href="/2022/01/31/ElasticSearch-III/"/>
      <url>/2022/01/31/ElasticSearch-III/</url>
      
        <content type="html"><![CDATA[<h3 id="ElasticSearch-使用入门"><a href="#ElasticSearch-使用入门" class="headerlink" title="ElasticSearch 使用入门"></a>ElasticSearch 使用入门</h3><h3 id="RESTful-api-的创建与使用"><a href="#RESTful-api-的创建与使用" class="headerlink" title="RESTful api 的创建与使用"></a>RESTful api 的创建与使用</h3><p>From Wiki: </p><blockquote><p>REpresentational State Transfer, REST 是一种软件架构风格，定义了一组创建 Web 服务的约束。RESTful Web 服务允许请求系统通过使用统一和预定义的无状态操作集来访问和操作 Web 资源的文本表示。</p></blockquote><p>所以，REST 到底是什么？就是客户端向服务端请求访问制定数据，或者在服务端推送、保存数据，服务端相应客户端请求的过程。从编程的角度可能更加容易解释，服务端提供一个端点 URL 给客户端，客户端连接这个端点并发送数据（REST 不负责存储携带的数据）、服务端返回相应。这样的流程就是 REST 的流程。这里面主要有几个模块需要简单了解。</p><ol><li><p>资源 Resource：真是的对象数据，可以是集合也可以是单个个体，每一种资源都有特定的 URI（统一资源定位符）与之对应。资源里面还可以包含子资源。</p></li><li><p>表现形式 Representational：信息实体，是资源具体呈现的形式，比如 json，xml 等。</p></li><li><p>状态转移 State Transfer：通过HTTP 动词实现增删查改等操作，从而引起资源状态的改变。这个处于 Server 端。</p></li></ol><h4 id="REST-接口规范"><a href="#REST-接口规范" class="headerlink" title="REST 接口规范"></a>REST 接口规范</h4><p>REST 接口指令主要由四部分组成：动作 + 路径 + 过滤信息 + 状态码，动作主要是用于 specify 增删查改等操作，而路径又称 “endpoint”，是 API 的具体网址。</p><h5 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h5><ul><li><p>GET: 请求服务器获取特定资源</p></li><li><p>POST：在服务器上创建一个新的资源</p></li><li><p>PUT：更新服务器上的资源（倾向于整体更新）</p></li><li><p>PATCH：更新服务器上的资源 （倾向于部分更新）</p></li><li><p>DELETE：从服务器删除特定的资源</p></li></ul><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><p>对路径在开发过程中会有一定的规范要求</p><ol><li><p>网址中不能有动词，只能有名词，API 中的名词也应该使用复数。如果 API 调用并不涉及资源（如计算，翻译等操作），可以使用动词。</p></li><li><p>不用大写字母，建议用 <code>-</code> 而非 <code>_</code></p></li></ol><h5 id="过滤信息-Filtering"><a href="#过滤信息-Filtering" class="headerlink" title="过滤信息 (Filtering)"></a>过滤信息 (Filtering)</h5><p>在查询是可以添加特定的条件，建议使用 url 参数的形式。比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /merchandise?is_live=true&amp;size=10</span><br></pre></td></tr></table></figure><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>状态码范围：</p><div class="table-container"><table><thead><tr><th>2xx：成功</th><th>3xx：重定向</th><th>4xx：客户端错误</th><th>5xx：服务器错误</th></tr></thead><tbody><tr><td>200 成功</td><td>301 永久重定向</td><td>400 错误请求</td><td>500 服务器错误</td></tr><tr><td>201 创建</td><td>304 资源未修改</td><td>401 未授权</td><td>502 网关错误</td></tr><tr><td></td><td></td><td>403 禁止访问</td><td>504 网关超时</td></tr><tr><td></td><td></td><td>404 未找到</td><td></td></tr><tr><td></td><td></td><td>405 请求方法不对</td></tr></tbody></table></div><h3 id="Elasticsearch-接口语法"><a href="#Elasticsearch-接口语法" class="headerlink" title="Elasticsearch  接口语法"></a>Elasticsearch  接口语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X&lt;VERB&gt; &#x27;&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;&#x27; -d &#x27;&lt;BODY&gt;&#x27;</span><br></pre></td></tr></table></figure><p>其中：</p><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>VERB</td><td>适当的 HTTP 方法 或 谓词 : GET 、 POST 、 PUT 、 HEAD 或者 DELETE 。</td></tr><tr><td>PROTOCOL</td><td>http 或者 https （如果在 Elasticsearch 前面有一个 https 代理）</td></tr><tr><td>HOST</td><td>Elasticsearch 集群中任意节点的主机名，或者用 localhost 代表本地机器上的节点。</td></tr><tr><td>PORT</td><td>运行 Elasticsearch HTTP 服务的端口号，默认是 9200 。</td></tr><tr><td>PATH</td><td>API 的终端路径（例如 _count 将返回集群中文档数量）。</td></tr><tr><td>QUERY_STRING</td><td>任意可选的查询字符串参数 (例如 ?pretty 将格式化地输出 JSON 返回值，使其更容易阅读)</td></tr><tr><td>BODY</td><td>一个 JSON 格式的请求体 (如果请求需要的话)</td></tr></tbody></table></div><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -HContent-Type:application/json &#x27;http://localhost:9200/_count?pretty&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>它会返回整个 json 格式的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;count&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POSTMAN-使用"><a href="#POSTMAN-使用" class="headerlink" title="POSTMAN 使用"></a>POSTMAN 使用</h4><p>Postman 是一个非常好用的对容器服务做增删查改操作的接口测试工具。其下载地址为 <a href="https://www.postman.com/downloads/">官方网址</a>。下载后直接解压即可使用，注意将解压后的执行文件移至「应用」文件夹。</p><h5 id="界面基础功能介绍"><a href="#界面基础功能介绍" class="headerlink" title="界面基础功能介绍"></a>界面基础功能介绍</h5><p>刚进入界面时，需要自己新建一个 Collection 与 Workspace，然后会进入如下界面。</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-III/postman_intro_1.png" alt="postman_intro_1.png"></p><p>主要有四个部分：</p><ol><li><p>左上 Collection（可以理解成文件夹，可以把一个项目的请求放到 Collections 中方便管理）， History 等 Toolbox，用于查找相关的项目，接口集或者历史等</p></li><li><p>右上请求方式与请求网址等。用于 specify 测试的接口。</p></li><li><p>右中请求参数，可以使 key-value 或者其他任意形式的参数，可以理解成过滤信息。</p></li><li><p>右下相应内容，一般使用 Pretty 格式化响应内容。里面包含 HTTP 响应测试码，响应时间与大小等。</p></li></ol><h5 id="集群设置-自动创建索引"><a href="#集群设置-自动创建索引" class="headerlink" title="集群设置-自动创建索引"></a>集群设置-自动创建索引</h5><p>集群在初始化设置时，不会有 persistent 这个参数，导致使用默认参数 <code>persistent = true</code>，这时，当我们指定一个不存在的索引，新增文档就会报错。而当 <code>persistent = false</code> 时，则会新建文档，同时创建这个不存在的索引。</p><ol><li><p>查看集群设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/_cluster/settings</span><br></pre></td></tr></table></figure><p>response 为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;persistent&quot;</span>: &#123;&#125;,</span><br><span class="line">     <span class="attr">&quot;transient&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改集群设置<br>操作如下图，可看到返回体中 <code>persistent.action.auto_create_index=false</code><br><img src="https://jason24-zeng.github.io/img/ElasticSearch-III/postman_intro_2.png" alt="postman_intro_2.png"></p></li></ol><h5 id="索引操作-index"><a href="#索引操作-index" class="headerlink" title="索引操作 - index"></a>索引操作 - index</h5><h6 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h6><p>动作 + 路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/nba</span><br></pre></td></tr></table></figure><p>JSON 格式的请求体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;team_name&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;play_year&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;jerse_no&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-III/postman_intro_3.png" alt="postman_intro_3.png"></p><h6 id="获取索引"><a href="#获取索引" class="headerlink" title="获取索引"></a>获取索引</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/nba</span><br></pre></td></tr></table></figure><h6 id="关闭索引"><a href="#关闭索引" class="headerlink" title="关闭索引"></a>关闭索引</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_close</span><br></pre></td></tr></table></figure><h6 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE http://localhost:9200/nba/</span><br></pre></td></tr></table></figure><h5 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h5><h6 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/nba/_mapping</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;team_name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;position&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;play_year&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;jerse_no&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;country&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意到如果不是新建索引，而是在之前索引的基础上进行修改，会有如下报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapper [play_year] cannot be changed from type [long] to [keyword]</span><br></pre></td></tr></table></figure><p>表明我们对已经构建的索引类型进行修改。</p><h6 id="获取索引-1"><a href="#获取索引-1" class="headerlink" title="获取索引"></a>获取索引</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/nba/_mapping</span><br></pre></td></tr></table></figure><h5 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h5><h6 id="新增文档-指定-ID"><a href="#新增文档-指定-ID" class="headerlink" title="新增文档-指定 ID"></a>新增文档-指定 ID</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:9200/nba/_doc/23</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Lebron 詹姆斯&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;team_name&quot;</span> : <span class="string">&quot;Los Angle Lakers&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;position&quot;</span> : <span class="string">&quot;small forward&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;play_year&quot;</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="attr">&quot;jerse_no&quot;</span> : <span class="string">&quot;23&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新增文档-不指定-ID"><a href="#新增文档-不指定-ID" class="headerlink" title="新增文档-不指定 ID"></a>新增文档-不指定 ID</h5><p>注意与上一节的区别是，用的操作类型由 <code>PUT</code> 改成了 <code>POST</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:9200/nba/_doc</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;James 哈登&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;team_name&quot;</span> : <span class="string">&quot;Houston Rockets&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;position&quot;</span> : <span class="string">&quot;shooting guard&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;play_year&quot;</span> : <span class="number">10</span>,</span><br><span class="line">    <span class="attr">&quot;jerse_no&quot;</span> : <span class="string">&quot;13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span> : <span class="string">&quot;庞各庄&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;nba&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;htJWtX4BnmkKdz--Ip7s&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的相关内容可以查看 <a href="https://www.cnblogs.com/geoffreygao/p/13889696.html">ElasticSearch7.2简单命令实操(postman版)</a>。例子非常生动形象。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://chinese.freecodecamp.org/news/rest-api-tutorial-rest-client-rest-service-and-api-calls-explained-with-code-examples/">REST API 教程：REST 客户端，REST 服务及 API 调用（含代码示例）</a></p><p><a href="https://www.woshinlper.com/system-design/restful-api/">RestFul API 简明教程</a></p><p><a href="https://www.cnblogs.com/geoffreygao/p/13889696.html">ElasticSearch7.2简单命令实操(postman版)</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch (II) -- docker 启动 + docker-compose</title>
      <link href="/2022/01/30/ElasticSearch-II/"/>
      <url>/2022/01/30/ElasticSearch-II/</url>
      
        <content type="html"><![CDATA[<h2 id="安装与运行-Elasticsearch"><a href="#安装与运行-Elasticsearch" class="headerlink" title="安装与运行 Elasticsearch"></a>安装与运行 Elasticsearch</h2><p>假设已经下载 Docker、Elasticsearch 和 Kibana，接下来讲解在 docker 里面启动 Elasticsearch 和 Kibana，并对 Elasticsearch 集群启用多个节点。</p><h3 id="Docker-中启动单节点-Elasticsearch"><a href="#Docker-中启动单节点-Elasticsearch" class="headerlink" title="Docker 中启动单节点 Elasticsearch"></a>Docker 中启动单节点 Elasticsearch</h3><p>使用如下指令以实例化 ElasticSearch 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name es -d -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.16.2</span><br></pre></td></tr></table></figure><p>以上将 9200 端口与 9300 端口映射到 docker 相应端口，如果不做端口映射，浏览器无法访问 elasticsearch 服务。其中 9200 为供 http 访问端口，9300 为供 tcp 访问端口。注意 <code>discovery.type=single-node</code>  指令，对于单机只生成一个节点的情况而言，这个必须指明，否则 docker 启动 elasticsearch 会闪退，相关报错为：<code>the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</code>。</p><p>如果想要实现数据持久化，则需要通过 -v 参数将 docker 宿主机 (host) 上的目录 mount 到 ElasticSearch 容器里。相关指令如下（<code>/usr/local/es</code> 为宿主机的目录地址）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name es -d -v /usr/local/es:/usr/share/elasticsearch/data -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.16.2</span><br></pre></td></tr></table></figure><p>需要注意的是，宿主机的目录需要赋权，否则会报错：failed to bind service AccessDeniedException</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /usr/local/es</span><br></pre></td></tr></table></figure><p>执行 <code>docker ps</code> 查看容器是否成功运行。在打开浏览器访问 <code>localhost:9200</code>，如果展现如下，则说明服务启动成功。</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-II/local_host.png" alt="local_host.png"></p><p>如果需要可视化管理界面，可以通过 Chrome 浏览器安装插件 ElasticSearch Head. </p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-II/elasticsearch_head.png" alt="elasticsearch_head.png"></p><p>则最终的展示为</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch-II/elasticsearch_head2.png" alt="elasticsearch_head2.png"></p><h3 id="ElasticSearch-测试环境配置修改"><a href="#ElasticSearch-测试环境配置修改" class="headerlink" title="ElasticSearch 测试环境配置修改"></a>ElasticSearch 测试环境配置修改</h3><p>配置文件的修改是很有必要的，因为原始的配置文件可能在网络或者资源环境要求上无法满足/overqualify 了测试环境的要求。</p><h4 id="修改-ES-配置文件"><a href="#修改-ES-配置文件" class="headerlink" title="修改 ES 配置文件"></a>修改 ES 配置文件</h4><p>进入容器后，需要修改 es 配置文件，设置宿主机的 ip 地址为任意网络均可访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改如下 host network ip address</span></span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h4 id="修改启动参数"><a href="#修改启动参数" class="headerlink" title="修改启动参数"></a>修改启动参数</h4><p>如果 Elasticsearch 中的 network.host 不是 localhost 或者 127.0.0.1 的话，该容器环境会被认为是生产环境，这个环境要求的一些内存等比较高，测试环境不一定满足，因此需要修改一些配置。</p><p>修改 jvm 启动参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim config/jvm.options</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改如下配置，将 heap 内存启动参数和最大参数从 4g 修改成 256m</span></span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br></pre></td></tr></table></figure><p>设置一个进程在 VMAs (Virtual Memory Areas) 创建内存映射的最大数量。这个操作需要使用 root 用户去操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上如下配置</span></span><br><span class="line">vm.max_map_count=655360</span><br><span class="line"><span class="meta">#</span><span class="bash"> 记得需要用 root 权限生效该配置。不过也可能因为虚拟机是 OpenZV 而无法修改</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>以 root 权限登入容器 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it --user root f9c23e8de222 /bin/bash</span><br></pre></td></tr></table></figure><p>任何用户组的权限都可以这样切换。如果忘记了用户组名，可以在容器中输入 <code>id</code>, 可以从 <code>groups</code> 中看到组内所有用户。</p><p>如果想要使用 jps、jstack 等 jvm 监控命令，则可能需要换一个 JDK 镜像，因为 docker 中使用的 JDK 镜像是精简版，没有这些额外的 JDK 辅助工具包</p><h3 id="Docker-Compose-使用"><a href="#Docker-Compose-使用" class="headerlink" title="Docker-Compose 使用"></a>Docker-Compose 使用</h3><p>通过上面这些指令去启用 docker 会比较麻烦，主要是后续需要修改一些配置，比如 mount 文件与内存映射最大数量等，这些需要在启动的时候就执行成功，且给予相应的权限，否则进入容器后会因为容器内文件的只读性质而无法更新。同样的，如果写一条冗长的指令满足上述要求的同时，却失去了命令行的简洁直观。这种情况下，提前在宿主机上设置好配置文件，在启动容器时就配置好容器内的一些参数，会是非常必要的方法。而 Docker-Compose 恰好可以承担这样的任务。</p><p>对于下载和安装了 Docker Desktop 或者 Decker for Mac 等的 Mac 用户，我们就不必再单独安装 docker-compose 了。而对于 Linux 用户，则需要如下操作：</p><h4 id="Linux-下-Compose-的安装"><a href="#Linux-下-Compose-的安装" class="headerlink" title="Linux 下 Compose 的安装"></a>Linux 下 Compose 的安装</h4><ol><li><p>下载 Docker Compose 稳定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>给予 binary 可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>构建软链，供执行命令调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置启动文件-docker-compose-yaml"><a href="#配置启动文件-docker-compose-yaml" class="headerlink" title="配置启动文件 docker-compose.yaml"></a>配置启动文件 <code>docker-compose.yaml</code></h4><p>通过配置启动文件，我们可以将一些参数从宿主机直接传到容器。</p><h5 id="单-es-节点-kibana-配置"><a href="#单-es-节点-kibana-配置" class="headerlink" title="单 es 节点 + kibana 配置"></a>单 es 节点 + kibana 配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="comment"># - cluster.initial_master_nodes=elasticsearch</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana_1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">es-data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><p>注意：单节点 <code>single-mode</code> 模式下，<code>cluster.initial_master_nodes</code> 是不被允许设置的。</p><h5 id="单-es-节点-kibana-配置-使用网络"><a href="#单-es-节点-kibana-配置-使用网络" class="headerlink" title="单 es 节点 + kibana 配置 + 使用网络"></a>单 es 节点 + kibana 配置 + 使用网络</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="comment"># - cluster.initial_master_nodes=elasticsearch</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-net</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana_1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTICSEARCH_HOSTS=http://elasticsearch:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">I18N_LOCALE=zh-CN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.monitoring.ui.container.elasticsearch.enabled=false</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:rw</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">es-net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们这里 <code>volumes</code> 不知用到了 data，还需要在当前目录 <code>touch  -e ./kibana/kibana.yml</code> 和 <code>mkdir -p ./elasticsearch/logs</code></p><p>另外需要注意</p><p><code>external</code> is to use an existing network. If you want compose to make networks you simply do:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">networks:</span><br><span class="line">  network1:</span><br></pre></td></tr></table></figure><h5 id="多-es-节点-kibana-配置"><a href="#多-es-节点-kibana-配置" class="headerlink" title="多 es 节点 + kibana 配置"></a>多 es 节点 + kibana 配置</h5><p>这里我们用三个节点来做简单配置。需要根据节点数量配置 memory 的大小，刚开始我只设置了 1 G 的内存，因为启动时就需要 1.5 G 内存，结果容器直接启动失败，且无相关日志产出。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es01/data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">es02:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es02</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es02/data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">es03:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es03</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01,es02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01,es02,es03</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es03/data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kib01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kib01</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_URL:</span> <span class="string">http://es01:9200</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">&#x27;[&quot;http://es01:9200&quot;,&quot;http://es02:9200&quot;,&quot;http://es03:9200&quot;]&#x27;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data01:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">data02:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">data03:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elastic:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>在启动容器之前，还需要根据配置提前设置到 <code>volumes</code>。比如在单节点模式下，我们进入一个目录，假设是 <code>$Home</code>，那么我们需要</p><ol><li><p>提前创建宿主机上的映射目录 <code>mkdir -p elasticsearch/data</code></p></li><li><p>给予相关目录 777 权限 <code>chmod -R 777 elasticsearch</code></p></li></ol><p>设置好之后，在<code>$Home</code> 目录下执行如下命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>docker 就会去访问<code>$Home</code>目录下 <code>docker-compose.yaml</code> 等相关配置文件。根据配置文件去从网络或者本地拉取镜像，新建并使用镜像启动服务等。而上面的 <code>-d</code> 是 detach 的意思，也就是不仅如此容器。</p><p>可以通过 <code>docker ps -a</code> 等指令查看容器的相关状态，比如是否是 <code>up</code> 拉起的状态，或者因为某一些原因<code>Exited</code>退出等。拉起一段时间后，可以通过访问 <code>localhost:5601</code> 查看 kibana 服务是否正常。</p><h4 id="关闭容器等相关操作"><a href="#关闭容器等相关操作" class="headerlink" title="关闭容器等相关操作"></a>关闭容器等相关操作</h4><p>停止当前目录下 <code>docker-compose.yaml</code> 文件启动的相关容器，使用 <code>docker-compose stop</code> 或 <code>docker-compose kill</code> 停掉 docker。这两者的主要区别是 <code>stop</code> 支持优雅退出，也就是会先接受 SIGTERM 请求，做一些预处理工作保存状态，10 s 后再执行 SIGKILL 请求。而 <code>kill</code> 则是直接执行 SIGKILL 请求对应的操作。</p><p>要查看当前<code>docker-compose.yaml</code> 启用的容器的状态，可以使用 <code>docker-compose ps</code></p><p>关闭服务后的容器的启动可使用 <code>docker-compose start</code> 指令，而如果因为更新配置要重启服务，可以使用 <code>docker-compose restart</code> 指令。</p><p>如果想要看当前 docker 运行情况，可以通过指令<code>docker-compose top</code> 完成</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://juejin.cn/post/6844904202204872711">Docker部署ElasticSearch及使用</a></p><p><a href="https://www.i4k.xyz/article/Dooonald/87931435">ElasticSearch 6.x 增删改查操作汇总 及 python调用ES中文检索实例_私人天地-程序员信息网</a></p><p><a href="https://stackoverflow.com/questions/65295961/elasticsearch-server-with-docker-compose-java-nio-file-accessdeniedexception">ElasticSearch Server with Docker Compose: java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes</a></p><p><a href="https://zysite.top/archives/elasticsearch-docker-compose-install">docker-compose部署ElasticSearch集群 | January</a></p><p><a href="https://blog.csdn.net/u011790603/article/details/105227925">elasticsearch:7.4.2 的docker compose文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Intro (I)</title>
      <link href="/2022/01/29/Docker-Intro-I/"/>
      <url>/2022/01/29/Docker-Intro-I/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到可移植的镜像中。这样的镜像可以被在任意的 Linux 或 Windows 等包含特定输入输出规则的机器上。它完全使用沙箱机制，相互之间无任何接口。</p><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><h4 id="命令行-Homebrew-安装"><a href="#命令行-Homebrew-安装" class="headerlink" title="命令行 Homebrew 安装"></a>命令行 Homebrew 安装</h4><p>通过 homebrew 下载并安装到应用目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask --appdir=/Applications docker</span><br></pre></td></tr></table></figure><h4 id="Docker-Desktop-for-Mac-安装包安装"><a href="#Docker-Desktop-for-Mac-安装包安装" class="headerlink" title="Docker Desktop for Mac 安装包安装"></a>Docker Desktop for Mac 安装包安装</h4><p>Docker Desktop for Mac 是 Docker 的一种桌面管理 IDE，用于在 Mac 上构建，调试和测试 Dockerized 应用程序。它是一个完整的开发环境，与 Mac OS Hypervisor 框架，网络与文件系统深度继承，是在 Mac 上运行 Docker 的最快，最可靠的方法。</p><p>在Docker官方网站下载安装文件：<a href="https://link.zhihu.com/?target=https%3A//yq.aliyun.com/go/articleRenderRedirect%3Furl%3Dhttps%253A%252F%252Fhub.docker.com%252Feditions%252Fcommunity%252Fdocker-ce-desktop-mac">https://hub.docker.com/editions/community/docker-ce-desktop-mac</a><br>下载 Docker.dmg安装文件，直接双击安装完成就可以了。</p><h3 id="Docker-更新镜像源"><a href="#Docker-更新镜像源" class="headerlink" title="Docker 更新镜像源"></a>Docker 更新镜像源</h3><p>运行镜像拉取时，可能因为网络原因出现下面 ERROR </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Get https://registry-1.docker.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br></pre></td></tr></table></figure><p>为了解决这个原因，我们可以手动指定镜像源，在 Mac OS 系统中，更新镜像源的文件为 </p><p><code>~/.docker/daemon.json</code> 文件，只用加入 以下 json 配置即可更换镜像源</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>， <span class="comment">// 中国区官方镜像</span></span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,  <span class="comment">// 网易镜像</span></span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>  <span class="comment">// 中科大镜像</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果通过 Homebrew 安装的 Docker，可以尝试点击右上角的🐳图标 &gt; Preference &gt;  Docker Engine 去直接修改那个 configuration 文件</p><h3 id="Docker-容器内安装-vim-等命令行参数"><a href="#Docker-容器内安装-vim-等命令行参数" class="headerlink" title="Docker 容器内安装 vim 等命令行参数"></a>Docker 容器内安装 vim 等命令行参数</h3><p>我们登入 docker 的容器，发现没办法使用 vim 等命令去修改 config 文件或者编辑其他文件，会提示：<code>vim: command not found</code></p><p>为了 solve 这个问题，我们可以进入容器并安装 vim 命令</p><h4 id="可以使用-apt-get-的-sudo-权限安装"><a href="#可以使用-apt-get-的-sudo-权限安装" class="headerlink" title="可以使用 apt-get 的 sudo 权限安装"></a>可以使用 <code>apt-get</code> 的 <code>sudo</code> 权限安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><h4 id="可以使用-yum-的-root-权限安装"><a href="#可以使用-yum-的-root-权限安装" class="headerlink" title="可以使用 yum 的 root 权限安装"></a>可以使用 <code>yum</code> 的 <code>root</code> 权限安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入docker 是开启 root</span></span><br><span class="line">docker exec -it --user root 473f6e871544 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新下列配置，否则会报错</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Error: Failed to download metadata <span class="keyword">for</span> repo <span class="string">&#x27;appstream&#x27;</span>: Cannot prepare internal mirrorlist: No URLs <span class="keyword">in</span> mirrorlist</span></span><br><span class="line">sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-Linux-* &amp;&amp;\</span><br><span class="line">sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-Linux-*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 yum</span></span><br><span class="line">yum upgrade -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载安装 vim</span></span><br><span class="line">yum install vim</span><br></pre></td></tr></table></figure><h4 id="安装-top、ps-等命令行"><a href="#安装-top、ps-等命令行" class="headerlink" title="安装 top、ps 等命令行"></a>安装 <code>top</code>、<code>ps</code> 等命令行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install procps</span><br></pre></td></tr></table></figure><p>不过需要注意的是，最好不要在 docker 容器中修改文件，而是将经常修改的文件挂载到宿主机上，这样避免重启时无法回复修改。</p><h3 id="Docker-挂载本地目录"><a href="#Docker-挂载本地目录" class="headerlink" title="Docker 挂载本地目录"></a>Docker 挂载本地目录</h3><p>Docker 支持把一个宿主机上的目录挂载到镜像里，这样我们就不需要通过修改镜像内的文件去修改配置了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /usr/local/es:/usr/share/elasticsearch/data -e &quot;discovery.type=single-node&quot; -p 9200:9200 -p 9300:9300 --name es elasticsearch</span><br></pre></td></tr></table></figure><h3 id="Docker-相关问题与解决"><a href="#Docker-相关问题与解决" class="headerlink" title="Docker 相关问题与解决"></a>Docker 相关问题与解决</h3><h4 id="Docker-无法通过指令停止"><a href="#Docker-无法通过指令停止" class="headerlink" title="Docker 无法通过指令停止"></a>Docker 无法通过指令停止</h4><p>今天出现了一个无法通过 stop 与 kill 等相关的指令停止或终止容器的问题。</p><p>首先是在已经有一个容器正常运行的基础上，重新 <code>docker-compose up -d</code> 了一个新容器，调用了同一个端口作为映射，导致错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">-----------------------------</span><br><span class="line">Creating network &quot;elasticsearch_default&quot; with the default driver</span><br><span class="line">Creating volume &quot;elasticsearch_es-data&quot; with local driver</span><br><span class="line">Creating elasticsearch_01 ...</span><br><span class="line"></span><br><span class="line">ERROR: for elasticsearch_01  UnixHTTPConnectionPool(host=&#x27;localhost&#x27;, port=None): Read timed out. (read timeout=60)</span><br><span class="line"></span><br><span class="line">ERROR: for elasticsearch_01  UnixHTTPConnectionPool(host=&#x27;localhost&#x27;, port=None): Read timed out. (read timeout=60)</span><br><span class="line">ERROR: An HTTP request took too long to complete. Retry with --verbose to obtain debug information.</span><br><span class="line">If you encounter this issue regularly because of slow network conditions, consider setting COMPOSE_HTTP_TIMEOUT to a higher value (current value: 60).</span><br></pre></td></tr></table></figure><p>这时候通过 <code>docker ps -a</code> 可以看到，容器 STATUS 是 CREATED，但是没办法启动，因为接口不对。所以想要停止之前的容器，然后再启动新容器的服务。这时候发现新容器停不下来了，看容器内服务信息<code>docker logs container-id</code>为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2022-01-31T07:15:51,250Z&quot;, &quot;level&quot;: &quot;ERROR&quot;, &quot;component&quot;: &quot;i.n.u.c.D.rejectedExecution&quot;, &quot;cluster.name&quot;: &quot;docker-cluster&quot;, &quot;node.name&quot;: &quot;8d619a059150&quot;, &quot;message&quot;: &quot;Failed to submit a listener notification task. Event loop shut down?&quot;, &quot;cluster.uuid&quot;: &quot;S33uPEbYT4iKRFfqRiul-Q&quot;, &quot;node.id&quot;: &quot;To5wb_cQRg-BheySS5Nliw&quot; ,</span><br><span class="line">&quot;stacktrace&quot;: [&quot;java.util.concurrent.RejectedExecutionException: event executor terminated&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.SingleThreadEventExecutor.reject(SingleThreadEventExecutor.java:923) ~[netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.SingleThreadEventExecutor.offerTask(SingleThreadEventExecutor.java:350) ~[netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.SingleThreadEventExecutor.addTask(SingleThreadEventExecutor.java:343) ~[netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:825) ~[netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:815) ~[netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.DefaultPromise.safeExecute(DefaultPromise.java:842) [netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:499) [netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616) [netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609) [netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:109) [netty-common-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.channel.DefaultChannelPromise.setFailure(DefaultChannelPromise.java:89) [netty-transport-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.channel.AbstractChannelHandlerContext.safeExecute(AbstractChannelHandlerContext.java:998) [netty-transport-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:796) [netty-transport-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:758) [netty-transport-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1020) [netty-transport-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:311) [netty-transport-4.1.66.Final.jar:4.1.66.Final]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.http.netty4.Netty4HttpChannel.sendResponse(Netty4HttpChannel.java:34) [transport-netty4-client-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.http.DefaultRestChannel.sendResponse(DefaultRestChannel.java:134) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.rest.RestController$ResourceHandlingHttpChannel.sendResponse(RestController.java:588) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.rest.action.RestActionListener.onFailure(RestActionListener.java:55) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.rest.action.RestActionListener.onResponse(RestActionListener.java:40) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.action.support.TransportAction$1.onResponse(TransportAction.java:88) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.action.support.TransportAction$1.onResponse(TransportAction.java:82) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.action.ActionListener.completeWith(ActionListener.java:447) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.action.support.nodes.TransportNodesAction.newResponseAsync(TransportNodesAction.java:181) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.action.support.nodes.TransportNodesAction.newResponse(TransportNodesAction.java:156) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.lambda$finishHim$0(TransportNodesAction.java:295) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:718) [elasticsearch-7.16.2.jar:7.16.2]&quot;,</span><br><span class="line">&quot;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]&quot;,</span><br><span class="line">&quot;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]&quot;,</span><br><span class="line">&quot;at java.lang.Thread.run(Thread.java:833) [?:?]&quot;] &#125;</span><br></pre></td></tr></table></figure><p>出现问题的最主要原因可能是，新创建的容器的某一个配置抢占了旧容器的端口，也阻止了旧容器重新生成旧名称的新容器，因为系统认为旧容器依然存在。</p><p>首先我找到新创建的异常容器，使用 <code>docker rm container-id</code>删除掉了，但是依然 stop 旧容器，报错是 <code>Cannot kill container: : tried to kill container, but did not receive an exit event</code>。</p><p>最后没有办法，直接重启了 docker desktop，就看到旧容器已经 dead 了，然后删除容器即可。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://zhuanlan.zhihu.com/p/22382728">一篇不一样的docker原理解析</a></p><p><a href="https://zhuanlan.zhihu.com/p/22403015">一篇不一样的docker原理解析 提高篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> Dev Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch (I) -- 概念与 docker 启用</title>
      <link href="/2022/01/29/ElasticSearch-I/"/>
      <url>/2022/01/29/ElasticSearch-I/</url>
      
        <content type="html"><![CDATA[<h2 id="ELK-Intro"><a href="#ELK-Intro" class="headerlink" title="ELK Intro"></a>ELK Intro</h2><p>ELK 实际上是三款软件的简称，分别是 Elasticsearch、Logstash、Kibana 组成，在发展过程中，又有新成员 Beats 的加入，所以就形成了 Elastic Stack。</p><p>ELK 主要是用于做日志分析的软件。其中，Elasticsearch 主要是核心存储和检索引擎，而 Kibana 则是用于将 Elasticsearch 的数据可视化化，logstash 是一个高吞吐量数据处理引擎，其将事件日志等通过 Parse 和 Transform 的方式处理后传给 Elasticsearch。而 Beats 则用于采集一切数据，再将这些数据创给 LogStash 或直接传给 Elasticsearch。整个流程框图可简化为：</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch/elastic_stack_workflow.png" alt="elastic_stack_workflow.png"></p><p>上面初步讲解了四个软件之间是如何协调合作的，下面先简单定义一下这四个软件：</p><ul><li><p><strong>Elasticsearch</strong>: 基于 java，是一个开源分布式搜索引擎，其特点是：分布式、零配置、自动发现、索引自动分片、索引副本机制、restful 风格接口，多数据源、自动搜索负载等。</p></li><li><p><strong>Logstash</strong>：基于 Java，是一个开源的用于收集、分析和存储日志的工具</p></li><li><p><strong>Kibana</strong>：基于 nodejs，可以为 Logstash 和 Elasticsearch 提供日志分析友好的 Web 界面，可以汇总、分析和搜索重要数据日志</p></li><li><p><strong>Beats</strong>：elastic 公司开源的采集系统监控数据的代理 agent，是被监控服务器上以客户端形式运行的数据收集器的总称。由如下组成：</p><ul><li><p>Packetbeat: 网络数据包分析器，用于监控、收集网络流量信息。支持 ICMP(v4 and v6)、DNS、HTTP、MySQL、PostgreSQL、Redis、MongoDB 等协议</p></li><li><p>Filebeat：用于监控、收集服务器日志文件，取代 logstash forwarder</p></li><li><p>Metricbeat：定期获取外部系统的监控指标信息，可以监控、收集 Apache、HAproxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、Zookeeper 等服务</p></li><li><p>Winlogbeat： 监控收集 Windows 系统的日志信息</p></li></ul></li></ul><h2 id="Introduction-to-ElasticSearch"><a href="#Introduction-to-ElasticSearch" class="headerlink" title="Introduction to ElasticSearch"></a>Introduction to ElasticSearch</h2><p>ElasticSearch 是一种开源的实时搜索引擎，其是基于 Apache Lucene(TM) 开发的。被认为是目前最先进、功能最齐全的搜索引擎库。需要注意的是 Lucene 只是一个库，需要使用 Java 并将其集成到应用中。要想明白其工作原理，我们还需要充分的了解检索相关的知识才行。</p><p>而 Elasticsearch 便是一个使用 Java 编写的使用 Lucene 建立索引并实现搜索功能的一种引擎。它隐藏了 Lucene 的复杂性，而是让程序员能简单得通过 RESTful API 包装调用。</p><p> 除 Lucene 和全文搜索引擎外，ES 还提供了：</p><ul><li><p>分布式的实时文件存储，每个字段都被索引并可被搜索。</p></li><li><p>实时分析的分布式搜索引擎</p></li><li><p>可扩展性，可扩展至上百台服务器，处理 PB 级的结构化或非结构化数据</p></li></ul><p>而所有的这些功能，都被集中到一台服务器，通过 RESTful API 以及各种语言的 client stub 轻松进行交互。它的另一个特点就是极易上手，隐藏了复杂的搜索引擎理论。</p><h3 id="ES-核心概念"><a href="#ES-核心概念" class="headerlink" title="ES 核心概念"></a>ES 核心概念</h3><h4 id="Near-Real-Time-近实时-NRT"><a href="#Near-Real-Time-近实时-NRT" class="headerlink" title="Near Real-Time 近实时 NRT"></a>Near Real-Time 近实时 NRT</h4><p>搜索平台近实时意味着我们从对文档构建索引到文档能被搜索到之间的时延很短，通常是秒级的。</p><h4 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node 节点"></a>Node 节点</h4><p>一个节点可以理解成 Elasticsearch 中的一个服务器，是整个 ES 集群中的一部分，它存储数据，并参与集群的索引与搜索。一个节点需要一个名字作为标识，这个名字会是随机漫威角色的名字，在启动的时候赋予。这个名字需要额外关注，因为我们会需要确定网络中的服务器对应的节点。</p><p>通过配置集群名，一个节点被加入指定集群(default 情况下是名为 elasticsearch 的集群)。一个集群可以拥有无指定上限个节点。如果当前网络中没有任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做 elasticsearch 的集群。</p><h4 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster 集群"></a>Cluster 集群</h4><p>一个集群就是有一个或多个节点组成的，共同提供整个数据，并一起提供索引和搜索功能的抽象。一个集群会有唯一的名字标识，默认为 elasticsearch。</p><p>Note: 集群名很重要，节点需要制定集群名，才能加入该集群。所以才产品环境中，通常需要显式设定该集群名</p><h4 id="Index-索引"><a href="#Index-索引" class="headerlink" title="Index 索引"></a>Index 索引</h4><p>一个索引可以认为是根据某一些特征将相似文档分到一起后的集合。可以类比关系型数据库 Database。比如，产品类目的索引，订单数据的索引。一个索引需要一个名字(小写字母) 来表示。当我们要对索引中文档进行索引、搜索、更新和删除时，都需要这个名字。</p><h4 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type 类型"></a>Type 类型</h4><p>类型类似于关系型数据库中 Table 的概念。在一个索引中，可以定义一种或多种类型。一个类型可以理解为索引中的逻辑分类/分区。通常会为具有一组共同字段的文档定义一个类型。</p><h4 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document 文档"></a>Document 文档</h4><p>文档是可被索引的基础信息单元。比如，一个客户的文档，一个商品的所有信息。文档以 JSON (JavaScript Object Notation) 格式表示。</p><p>在一个 index / type 里，我们可以存储任意多的文档。需要注意的是，文档虽然物理上是存在于索引之中，但文档必须索引、赋予一个索引的 type。类似于关系型数据库中 Record 的概念。除了用户定义的数据外，文档还需要包括 <code>_index</code>，<code>_type</code> 与 <code>_id</code> 字段</p><h4 id="Shard-amp-Replicas-分片与复制"><a href="#Shard-amp-Replicas-分片与复制" class="headerlink" title="Shard &amp; Replicas 分片与复制"></a>Shard &amp; Replicas 分片与复制</h4><p>有时候一个索引存储的数据超过了任意一个节点对应硬件的负荷要求，比如磁盘空间，或者 CPU 处理相应时延等。ElasticSearch 的解决方法便是分片，将索引划分成多份。每个分片本身也是功能完善并且独立的 “索引”，可被分配给任意节点。</p><p>分片的优势：</p><ol><li><p>提升扩展性，允许扩展内容容量</p></li><li><p>分布式并行操作，提高性能/吞吐量</p></li></ol><p>除此以外，ES 还管理了分片分布以及文档索引聚合的工作。</p><p>另一个问题是，当网络/云环境中，失败发生是很频繁的事情，这可能导致某个节点突然无法工作，需要一个故障转移机制去 back up 这种情况。而 ElasticSearch 的解决方法是允许创建分片的一份或多份拷贝，这个操作被称为 Replica / 复制。</p><p>复制的优势：</p><ol><li><p>分片/节点失败时，可以从其他分片/节点索引，提高引擎可用性。也因为这个原因，复制的分片不能与原分片处于同一节点上</p></li><li><p>扩展了搜索量/吞吐量。</p></li></ol><p>需要注意：分片与复制的数量可以在索引创建的时候指定。但索引一旦创建，分片数就固定了，我们只能动态改变复制的数量。而一个索引的多个分片可以存放在集群中的一台主机，也可以存在多台主机上，主要取决于集群机器数量。主分片和复制分片的具体位置被 ES 内在的策略决定。</p><h4 id="ES-版本选择"><a href="#ES-版本选择" class="headerlink" title="ES 版本选择"></a>ES 版本选择</h4><p>ES 5.0 之前， Elastic Stack 的各个版本都不同意，容易出现版本号混乱问题。从 5.0 开始，所有的 Elastic Stack 中的项目全部统一版本号。方便大家维护和更新。</p><h3 id="elasticsearch-下载和安装"><a href="#elasticsearch-下载和安装" class="headerlink" title="elasticsearch 下载和安装"></a>elasticsearch 下载和安装</h3><h4 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h4><p>详情可参考 <a href="https://jason24-zeng.github.io/2022/01/29/Docker-Intro-I/">Docker Intro (I)</a>，首先安装 Docker，后续 ES，kibana 的使用都在 docker 里运行。</p><h4 id="下载-ES-和-Kibana"><a href="#下载-ES-和-Kibana" class="headerlink" title="下载 ES 和 Kibana"></a>下载 ES 和 Kibana</h4><p>先运行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search elasticsearch</span><br></pre></td></tr></table></figure><p>查看 docker hub 公用镜像中存在的 elasticseaerch 镜像。可看到显示如下：</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch/docker_search_elasticsearch.png" alt="docker_search_elasticsearch.png"></p><p>可以考虑 pull elasticsearch-kibana 镜像，使用下面指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><p>或者考虑分别下载 es 和 kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.16.2</span><br><span class="line">docker pull kibana:7.16.2</span><br></pre></td></tr></table></figure><p>安装时可以看到如下的信息提示：</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch/docker_id.png" alt="docker_id.png"></p><p>可以看到 docker 的镜像 ID</p><h5 id="检查机内已安装镜像"><a href="#检查机内已安装镜像" class="headerlink" title="检查机内已安装镜像"></a>检查机内已安装镜像</h5><p>通过下面指令，可以看本机已安装的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>或者通过 docker desktop 可视化界面查看。</p><p>如图，可以看到相关的 tag， IMAGE ID 以及创造时间</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch/image_on_disk.png" alt="image_on_disk.png"></p><h5 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h5><p>需要映射容器和本机端口 port 9200, 9300, 5601(kibana 专用)</p><p>指令为 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9200:9200 -p 9300:9300 -p 5601:5601 --name eskibana nshou/elasticsearch-kibana</span><br></pre></td></tr></table></figure><h4 id="Docker-内执行"><a href="#Docker-内执行" class="headerlink" title="Docker 内执行"></a>Docker 内执行</h4><h5 id="查看当前运行容器"><a href="#查看当前运行容器" class="headerlink" title="查看当前运行容器"></a>查看当前运行容器</h5><p>指令： </p><ul><li><p><code>docker ps</code> （查看正在运行的容器）</p></li><li><p><code>docker ps -a</code> （查看所有容器）</p></li></ul><p>如下图，可以看到 CONTAINER ID 为 f9c23e8de222，NAMES 指定为 eskibana</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch/docker_ps.png" alt="docker_ps.png"></p><p>进入容器指令： <code>docker exec -it f9c23e8de222 /bin/bash</code></p><p>后续的许多操作都是在该容器中执行的。</p><p>如果不存在 bash，可考虑下面指令 <code>docker exec -it f9c23e8de222 sh</code></p><p>退出容器，则是 <code>cmd + d</code> 或者输入 <code>exit</code></p><h5 id="启动一个已退出的容器"><a href="#启动一个已退出的容器" class="headerlink" title="启动一个已退出的容器"></a>启动一个已退出的容器</h5><p>指令 <code>docker start container-id</code>比如上一节的 <code>docker stop f9c23e8de222</code></p><h5 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h5><p>指令: <code>docker stop container-id</code></p><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><p>指令: <code>docker rm container-id</code></p><h5 id="移除正在运行的容器"><a href="#移除正在运行的容器" class="headerlink" title="移除正在运行的容器"></a>移除正在运行的容器</h5><p>指令：<code>docker rm -f webserver</code></p><h5 id="列出本地镜像"><a href="#列出本地镜像" class="headerlink" title="列出本地镜像"></a>列出本地镜像</h5><p>指令：<code>docker list</code></p><h5 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h5><p>在大部分场景下，我们希望 docker 的服务是后台运行的，可以通过 <code>-d</code> 执行容器的运行模式。比如下式，启动 <code>elasticsearch:7.16.2</code> 镜像，但是不进入容器，如果不加 <code>-d</code>，默认会直接进入 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd elasticsearch:7.16.2 /bin/bash</span><br></pre></td></tr></table></figure><h5 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h5><p>执行指令: <code>docker rename origin-Names new-Names</code></p><p>如下图，将一个 Names 为 clever_mcnulty 的容器重命名为 abc</p><p><img src="https://jason24-zeng.github.io/img/ElasticSearch/docker_rename.png" alt="docker_rename.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一章节主要简单介绍了一下 Elastic Stack 以及 Elasticsearch，并介绍了如何在 docker 中安装和运行容器 elasticsearch 与 kibana。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.cnblogs.com/sunsky303/p/9438737.html">Elasticsearch入门，这一篇就够了</a></p><p><a href="https://zhuanlan.zhihu.com/p/135939591">如何系统学习ElasticSearch：死磕 Elasticsearch 方法论（初学者必看</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch Guide</a></p><p><a href="[Mac中docker版本的ElasticSearch和Kibana安装及操作_十步杀一人-千里不留行-CSDN博客_docker elasticsearch mac](https://blog.csdn.net/m0_37609579/article/details/82698173">Mac中docker版本的ElasticSearch和Kibana安装及操作</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Intro (I)</title>
      <link href="/2022/01/28/Golang-Intro-I/"/>
      <url>/2022/01/28/Golang-Intro-I/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e1fff359d39cd57dd41ae7a3d61af24784793483b2bf9f0e2d52caefb65cf043">288c496f07cd7a970f0e86fc14828c2c7ff54ab2cc0761c06bcad47f6660946924e3d2bcb9311f6d61fc5adc8abe0cce2f5b55a65346ee70c6be6e42274e45bc81b3f4f2d6eee45410f98a1da3ba55087086a0dba266934370e52e4cf1f2ab73b52c55b22f2be0d4a5257f8031157bdd198067041e223a968d98a2c00fdfe9063363197b3ba531a9426874ff4c88d97cbb34ea9053c1a592fac586fd9c170ee1ecb9d8c41292c2661fc9e0467400d1b1dd9c4f5fe3d46e5973643a3b630ed98c0b36f647860a28b5ca147b661db5769d2a90a311cbe3168050602886a5e2036328723110ffee8934ffb3063225676a7c7b87cf2617ce460b979d7559b6ecdf8a84059bcf19eed23770d02cd12187bf02c7eba17d52e54e57d3da4a9a919db9eaee48a814fecba20e4afb175820bd5ae11a660b944dff254a5c89a95e7e3a66275d97b8ff0c7c6cbdf225c9b688c41c353aaebc4c14a26b849cf16f4c999f5cc0bcff1e3bbd8e740d8970d0a42d7c5010e85e49362371941004d967d409f5404ef63dd6759fc462227f9ed8e11ee9cbdb5d15fe9bf4b1021da9cc2433361e6ccd759931839289eb86a2f7b19710f362499af2f2bdb67904e101b48119fe9824dfd1a8b3368744bb2049a2e5de47cf224d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码辅助查验</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRPC and protobuf</title>
      <link href="/2022/01/26/grpc-and-protobuf/"/>
      <url>/2022/01/26/grpc-and-protobuf/</url>
      
        <content type="html"><![CDATA[<h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><h3 id="什么是-RPC"><a href="#什么是-RPC" class="headerlink" title="什么是 RPC?"></a>什么是 RPC?</h3><p>RPC 是 Remote Procedure Call 的缩写，即远程过程调用，该调用包含了传输协议和编码协议等。无需额外的变成，就能实现一台计算机的程序为另一台计算机的程序调用的交互过程。我们常称之为 RPC 调用。从抽象的角度来说，RPC 不在本地执行，其都拥有三个特点：</p><ul><li><p>需要事先约定调用的语义 — Interface</p></li><li><p>需要网络传输</p></li><li><p>需要定义网络传输的数据结构</p></li></ul><h3 id="什么是-gRPC"><a href="#什么是-gRPC" class="headerlink" title="什么是 gRPC?"></a>什么是 gRPC?</h3><p>gRPC 是主要由 google 开发的开源，免费的 基于 Protobuf 开发的跨语言的 RPC 框架，其特点主要有：</p><ol><li><p>使用 ProtoBuf 进行数据编码，从而提升了数据的压缩。ProtoBuf 是一种 Interface Description Language (IDL) 借口描述行语言。</p></li><li><p>使用 HTTP/2 带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特性传输协议，相比 HTTP 1.1 协议在移动设备上性能和空间占用上都有优化。</p></li><li><p>同时在调用方 (Stub/Client) 与服务端 (Server) 使用协议约定文件，可以通过增加 protobuf 结构，为版本兼容留下缓冲空间。</p></li></ol><h3 id="gRPC-基本组成"><a href="#gRPC-基本组成" class="headerlink" title="gRPC 基本组成"></a>gRPC 基本组成</h3><p>下图为一个简单的调用模型</p><p><img src="https://jason24-zeng.github.io/img/grpc-and-protobuf/grpc_concept_diagram.jpeg" alt="grpc_model"></p><p>我们可以看到其主要的模块有：</p><ul><li><p>客户端 (gRPC Stub)，通过程序调用方法，发起 RPC 调用</p></li><li><p>对请求信息事先 pb 对象序列化</p></li><li><p>服务端 (gRPC Server) 接受请求 Proto Request，解码 (反序列化) 请求内容结构，进行相关业务逻辑处理，并返回 Proto Responses.</p></li><li><p>从服务端传会客户端，也需要进行对象序列化，从而压缩传递空间。</p></li><li><p>客户端接收服务端的 Response，对其进行解码 (反序列化)。唤醒正在等待响应的客户端调用并返回响应结果。</p></li></ul><h3 id="gRPC-的优势"><a href="#gRPC-的优势" class="headerlink" title="gRPC 的优势"></a>gRPC 的优势</h3><ol><li><p>快速序列化，server 端和 stubs 端</p></li><li><p>序列化结构较小，从而需要传输的带宽小</p></li><li><p>基于 HTTP/2 协议进行设计，有显著的优势</p></li><li><p>相比于 JSON、XML，定义更简单明了。</p></li></ol><h3 id="gRPC-的缺点"><a href="#gRPC-的缺点" class="headerlink" title="gRPC 的缺点"></a>gRPC 的缺点</h3><ol><li><p>Protobuf 序列化后的数据可读性查，无法想 HTTP/1.1 那样调试。</p></li><li><p>需要额外的组建协助浏览器调用 gRPC 服务，同时对浏览器的支持是有限的。</p></li><li><p>各大组建对 HTTP/2 的支持较差，即使支持，社区相关资料较少。</p></li></ol><h2 id="ProtoBuf"><a href="#ProtoBuf" class="headerlink" title="ProtoBuf"></a>ProtoBuf</h2><h3 id="什么是-ProtoBuf"><a href="#什么是-ProtoBuf" class="headerlink" title="什么是 ProtoBuf ?"></a>什么是 ProtoBuf ?</h3><p>Protocal Buffers (ProtoBuf) 是一种 IDL，具有可扩展的序列化结构化。它与平台，语言无关，常用于通信协议，数据存储等等。相比 JSON、XML 等结构，它更小、更快，收到广泛开发人员的青睐。</p><h3 id="ProtoBuf-基本语法"><a href="#ProtoBuf-基本语法" class="headerlink" title="ProtoBuf 基本语法"></a>ProtoBuf 基本语法</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明使用 proto3 语法，如果不声明，默认使用 proto2 语法</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RPC 服务定义</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义了一个 RPC 方法，叫做 SayHello，入参为 HelloRequest 结构体，出参为 HelloReply 结构体</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息体，</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 消息体中的字段，定义了字段类型，字段名称，以及 idx</span></span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloReply</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>proto 文件通常以 <code>.proto</code> 后缀结尾，通常进行编译并生成对应语言的 proto 文件。根据 Protobuf 编辑器选择的语言或者调用的插件情况的不同，生成相对应的 Service Interface Code 和 Stubs</p><h4 id="Proto-编译"><a href="#Proto-编译" class="headerlink" title="Proto 编译"></a>Proto 编译</h4><p>前面已经提到，protobuf 支持多语言，而语言之间的切换实际是通过使用一个编译器的不同插件完成的。这个编译器就是 <code>protoc</code>，对 <code>.proto</code> 文件进行编译</p><h5 id="protoc-安装"><a href="#protoc-安装" class="headerlink" title="protoc 安装"></a><code>protoc</code> 安装</h5><p>为了安装 <code>protoc</code> ，我们依次执行以下安装 command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/google/protobuf/releases/downloads/v3.11.2/protobuf-all-3.11.2.zip</span><br><span class="line">unzip protobuf-all-3.11.2.zip &amp;&amp; cd protobuf-3.11.2/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过执行 <code>protoc --version</code> 检查是否安装成功</p><h5 id="protoc-gen-go-插件安装"><a href="#protoc-gen-go-插件安装" class="headerlink" title="protoc-gen-go 插件安装"></a><code>protoc-gen-go</code> 插件安装</h5><p>假设我们已经完成了上面关于 <code>protoc</code> 编译器的安装，但是仅仅有这个编译器还是不够的。前面提到，针对不同的语言，我们需要调用不同的 <code>protoc</code> 插件，从而完成相关语言 <code>.proto</code> 文件的转换。</p><p>因此，我们主要执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Instal a specific version.</span></span><br><span class="line">go install example.com/cmd@v1.2.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install the highest available version.</span></span><br><span class="line">go install example.com/cmd@latest</span><br></pre></td></tr></table></figure><p>需要注意：<code>Go 1.17</code> 之后，使用 <code>go get</code> 去安装插件的方式不再被推荐，取而代之的是使用 <code>go install</code> 方法，因为这个原因，我刚开始使用 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u google.golang.org/protobuf/cmd/protoc-gen-<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>会有下述错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can&#x27;t load package: package google.golang.org/protobuf/cmd/protoc-gen-go: cannot find package &quot;google.golang.org/protobuf/cmd/protoc-gen-go&quot; in any of ...</span><br></pre></td></tr></table></figure><p>根据这个社区讨论  <a href="https://stackoverflow.com/questions/62190610/cannot-find-package-google-golang-org-protobuf-cmd-protoc-gen-go">cannot find package “google.golang.org/protobuf/cmd/protoc-gen-go”</a>，我们可以有一些其他的解决方法，但是，比较推荐的方式还是使用 <code>go install</code></p><p>在安装以后，还需要给 golang 添加路径（否则会出现报错：<a href="https://stackoverflow.com/questions/57700860/protoc-gen-go-program-not-found-or-is-not-executable">protoc-gen-go: program not found or is not executable</a>）：</p><ol><li><p>执行 <code>vim ~/.bash_profile</code></p></li><li><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GO_PATH=$HOME/go</span><br><span class="line">export PATH=$PATH:/$GO_PATH/bin</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>source ~/.bash_profile</code></p></li></ol><p>另一种方法是直接将二进制文件目录 <code>bin</code> 移到默认路径上。不过这种方法需要当前执行者具有移到 local 路径的权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ~/go/bin/protoc-gen-go /usr/local/go/bin</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><p><a href="https://golang2.eddycjy.com/posts/ch3/01-simple-grpc-protobuf/">Go 语言编程之旅</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/148139089#:~:text=gRPC%E6%98%AF%E4%B8%80%E6%AC%BERPC,%E5%85%BC%E5%AE%B9%E7%95%99%E4%B8%8B%E7%BC%93%E5%86%B2%E7%A9%BA%E9%97%B4">gRPC系列(一) 什么是RPC？</a></p></li><li><p><a href="https://developers.google.com/protocol-buffers/docs/cpptutorial">Protocol Buffer Basics: C++</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev Tools </category>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gRPC </tag>
            
            <tag> ProtoBuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ (III)</title>
      <link href="/2022/01/24/Effective-C-III/"/>
      <url>/2022/01/24/Effective-C-III/</url>
      
        <content type="html"><![CDATA[<p>资源是一种有借有还的“东西”，一旦使用它，就需要未来的某个时间段还给系统。而资源的形式多种多样，C++ 程序中最长使用的资源就是动态分配内存 (如果不归还，会导致内存泄漏)。除此以外，file descriptors，mutex locks，图形界面的字型和笔刷、数据库连接，网络 sokcet等，都是一种资源。</p><p>资源管理的手段还不充分，但是确保资源归还给系统很重要。而这篇博客中就主要讲解一些基于对象的资源管理办法，并加入一些专属条款弥补一般化条款的不足，从而保证管理内存的对象能适当并正确的进行。</p><h3 id="Item-13-使用对象管理资源"><a href="#Item-13-使用对象管理资源" class="headerlink" title="Item 13. 使用对象管理资源"></a>Item 13. 使用对象管理资源</h3><p><strong>use objects to manage resources</strong></p><p>首先，我们将资源放进对象内，就可以依赖 C++ 的析构函数自动调用机制确保资源被释放。</p><p>对于我们创造的一个对象（比如调用工厂函数动态分配一个对象），我们可能因为跳过释放对象语句过早退出而形成了内存泄漏。这种过早退出的可能有：</p><ul><li><p>一个过早的 <code>return/continue/goto</code> 语句</p></li><li><p>抛出异常</p></li></ul><p>无论是那种情况，都不是单纯通过判断 “总是执行 delete 语句” 能够解决的。因为代码可能被增加，但是人们可能无法注意到后面的 delete 语句。</p><p>许多资源被动态分配到 heap 后，被用在一个单一区域或函数内，这些资源应该在控制流离开区域时就被释放。标准库中提供的智能指针 auto_ptr 正是针对这种形式设计的。它是一种 “pointer-like object” 类指针现象。其<strong>析构函数自动对其所指对象调用 delete</strong>。比如下面的例子，我们调用了 <code>auto_ptr</code> 创造对象后就不用再自己释放对象对应资源了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::auto_ptr&lt;Investment&gt; <span class="title">pInv</span><span class="params">(createInvestment())</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Investment</span>&#123;</span>...&#125;;</span><br><span class="line"><span class="function">Investment* <span class="title">createInvestment</span><span class="params">()</span></span>; <span class="comment">// 通过共产函数供应某特定的 Investment 对象</span></span><br></pre></td></tr></table></figure><p>这显示了本节的两个关键想法：</p><ol><li><p>获取到资源后立即放进管理对象中。RAII: Resource Acquistion Is Initialization</p></li><li><p>管理对象运用析构函数确保资源的释放。</p></li></ol><p>注意，一定不要让多个 <code>auto_ptr</code> 指向同一个对象，因为每个 <code>auto_ptr</code> 被销毁时都会自动删除它所指的对象。为了避免这个问题，如果通过 copy constructor 或者 copy assignment 去复制<code>auto_ptr</code>，被复制的 <code>auto_ptr</code> 会变成 null，而复制后的 <code>auto_ptr</code> 拥有取得资源的唯一权。比如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::auto_ptr&lt;Investment&gt; <span class="title">pInv1</span><span class="params">(createInvestment())</span></span>;  <span class="comment">// pInv1 is not null</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::auto_ptr&lt;Investment&gt; <span class="title">pInv2</span><span class="params">(pInv1)</span></span>; <span class="comment">// pInv1 is null, while pInv2 is not null</span></span><br><span class="line"></span><br><span class="line">pInv1 = pInv2;  <span class="comment">// pInv1 is not null, while pInv2 is null</span></span><br></pre></td></tr></table></figure><p>因为 <code>auto_ptr</code> 的这个性质，使其无法成为管理动态分配资源的好工具。如果 STL 容器要求能有正常的复制行为，则不能使用 <code>auto_ptr</code>。</p><p>其替代方法是大家都应该比较了解的「引用计数型智能指针」(reference-counting smart pointer; RCSP)。它表示的是，该指针会追踪有多少对象指向了该资源，如果 counting 为 0 则会自动删除该资源。</p><p>这种方法依然会有一定的问题，主要问题出现在 cycle of references 环状引用上：即两个对象彼此互指，及时已经没有使用这两个对象了，依然因为 counting  不为 0 而不被销毁。</p><p><code>shared_ptr</code> 就是这样一个 RCSP。</p><h3 id="Item-14-资源管理类中的-copying-行为需要慎重考虑"><a href="#Item-14-资源管理类中的-copying-行为需要慎重考虑" class="headerlink" title="Item 14. 资源管理类中的 copying 行为需要慎重考虑"></a>Item 14. 资源管理类中的 copying 行为需要慎重考虑</h3><p><strong>Think carefully about copying behavior in resource-managing classes</strong></p><p>上一节描述了 RAII 在资源管理中的重要意义，同时描述了智能指针如何将这些观念运用到 heap-based 的资源上。但需要注意，不是所有资源都是 heap-based，而智能指针不适合作为 resource handlers。我们对于这种情况，可能需要建立自己的资源管理类。</p><p>这一章节需要记住：</p><ul><li><p>在 Copy RAII 对象时必须一并复制它管理的资源，因此资源的 copying 行为会决定 RAII 对象的 copying 行为。</p></li><li><p>普遍常见的 RAII 类拷贝行为有：阻止 copying，使用引用计数法。也可能有其他实现行为。</p></li></ul><h3 id="Item-15-资源管理类中提供原始资源访问"><a href="#Item-15-资源管理类中提供原始资源访问" class="headerlink" title="Item 15. 资源管理类中提供原始资源访问"></a>Item 15. 资源管理类中提供原始资源访问</h3><p><strong>provide access to raw resources in resource-managing classes</strong></p><p>我们要善用资源管理类来处理和资源之间的所有互动，而非直接处理原始资源。但是许多 APIs 都直接引用资源，这使我们只能直接绕过资源管理对象直接访问原始资源。</p><p>在实际操作中，如果我们需要一个函数可将 RAII class 对象转换成其所内含的原始对象，有两种方式可以达成目标：显式 casting 或者 隐式 casting。是否该提供一个显式转换函数（比如 get 成员函数）还是提供隐式转换，主要取决于 RAII 被设计执行的特定工作，以及它被使用的情况。最佳的设计是需要坚持 Item 18 的忠告：让接口容易被正确使用，不易被误用。做开始时需要做的就是隐藏客户不需要看的部分，但准备好客户需要的所有东西。</p><p>这一章节，需要记住：</p><ul><li><p>APIs 通常要求访问原始资源，所以每个 RAII class 都应该提供一个 ”取得所管理资源“ 的方法。</p></li><li><p>对原始资源的访问可以有显式转换，也可以是隐式转换。通常，显式转换更加安全，但隐式转换对客户更加方便。</p></li></ul><h4 id="Item-16-使用相应的-new-和-delete-操作时要采用相同的形式"><a href="#Item-16-使用相应的-new-和-delete-操作时要采用相同的形式" class="headerlink" title="Item 16. 使用相应的 new 和 delete 操作时要采用相同的形式"></a>Item 16. 使用相应的 new 和 delete 操作时要采用相同的形式</h4><p>一开始，文中举了个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::string* stringArray = <span class="keyword">new</span> std::string[<span class="number">100</span>];</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> stringArray;</span><br></pre></td></tr></table></figure><p>看起来没毛病，但 <code>stringArray</code> 中所含的 100 个 <code>string</code> 对象中 99 个不太可能被适当得删除，因为它们的析构函数很可能没被调用。</p><p>当使用 <code>new</code> 时，有两件事发生</p><ol><li><p>内存通过 <code>operator new</code> 的函数被分配出来</p></li><li><p>针对这个内存，一个（或多个）构造函数被调用。</p></li></ol><p>而当使用 <code>delete</code> 时，也有两件事发生</p><ol><li><p>针对这个内存会有一个（或多个）构造函数被调用</p></li><li><p>内存通过 <code>operator delete</code> 的函数被释放</p></li></ol><p>上面的问题在于，被删除的内存之内存在多少对象？这个问题决定了多少个析构函数必须被调用。数组所用的内存通常还包括 ”数组大小“ 的记录，从而方便 <code>delete</code> 调用析构函数的次数。</p><p>当我们对一个指针使用 <code>delete</code>，唯一能让其知道 ”数组大小的方式“ 就是显式得告诉它。如果 <code>delete</code> 时加上方括号，则表明指针指向的是数组，否则认为其指向单一对象。因此我们需要如下得匹配删除相应的对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::string* stringPtr1 = <span class="keyword">new</span> std::string;</span><br><span class="line">std::string* stringPtr2 = <span class="keyword">new</span> std::string[<span class="number">100</span>];</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> stringPtr1;</span><br><span class="line"><span class="keyword">delete</span> [] stringPtr2;  <span class="comment">// 删除一个由对象组成的数组</span></span><br></pre></td></tr></table></figure><p>当程序员以 <code>new</code> 创建 <code>typedef</code> 类型对象时， <code>typedef</code> 的作者必须说清该以哪种 <code>delete</code> 形式删除它。而为了避免 <code>typedef</code> 数组类型带来的不清楚使用哪个 <code>delete</code> 函数的问题，我们最好不要对数组形式做 <code>typedef</code> 动作。</p><h3 id="Item-17-用独立语句将新建-newed-对象存储进智能指针"><a href="#Item-17-用独立语句将新建-newed-对象存储进智能指针" class="headerlink" title="Item 17. 用独立语句将新建 (newed) 对象存储进智能指针"></a>Item 17. 用独立语句将新建 (newed) 对象存储进智能指针</h3><p><strong>Storing newd objects in smart pointers in standalone statements</strong></p><p>不要写如下的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">processWidget</span>(std::shared_ptr&lt;Widget&gt;(<span class="keyword">new</span> Widget), <span class="built_in">priority</span>())</span><br></pre></td></tr></table></figure><p>因为这个函数在执行之前需要执行三个步骤:</p><ol><li><p><code>new Widget</code></p></li><li><p><code>priority()</code></p></li><li><p><code>call shared_ptr function</code></p></li></ol><p>其中 <code>priority()</code> 这个函数的调用次序不固定。我们假定函数当前遵循上述调用步骤，如果<code>priority()</code> 抛出异常，我们就碰到了 Item 13 中谈到的问题，<code>new Widget</code> 对象因为没有使用 <code>shared_ptr</code> 函数调用而无法自行销毁，这样便容易造成内存泄漏。</p><p>正确的做法是，使用独立语句新建对象，然后将智能指针传给函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;Widget&gt;  <span class="title">pw</span><span class="params">(<span class="keyword">new</span> Widget)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">processWidget</span>(pw, <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>这样，我们就保证了执行秩序，从而避免了一些内存泄漏问题的发生，或者说避免了分开 <code>new Widget</code> 与 <code>call shared_ptr function</code> 的动作。</p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 书籍笔记 </tag>
            
            <tag> Resource Management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective C++ (II)</title>
      <link href="/2022/01/23/Effective-C-II/"/>
      <url>/2022/01/23/Effective-C-II/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>一个月前，因为工作调 动原因，有了充分的时间去拜读 C++ 相关书籍，于是决心从 <em>effetive C++</em> 开始，通过简单得学习了前 8 个条款，感觉自己茅塞顿开，发现自己之前工作中的许多不愉快都源于自己的代码习惯不够好。希望自己能在入职前，将这本工程师必读之作整体拜读一次，并以博客代替日记的方式记录下来，以备未来回顾。</p><h4 id="Item-09-不要再构造函数与析构函数中调用虚函数"><a href="#Item-09-不要再构造函数与析构函数中调用虚函数" class="headerlink" title="Item 09. 不要再构造函数与析构函数中调用虚函数"></a>Item 09. 不要再构造函数与析构函数中调用虚函数</h4><p><strong>Never call virtual functions during construction or destruction</strong></p><p>使用 C++ 时，不要在这两个函数中调用 virtual 函数，否则可能会得到预想以外的结果。这时 C++ 与 Java 或 C# 的区别。</p><p>下面有一个看似合理，实则反直观的例子，来解释这种行为的不合理性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建一个 base class, 创建交易对象，同时调用函数记录日志</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Transaction</span>();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;    <span class="comment">// base 中的日志记录接口</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transaction::<span class="built_in">Transaction</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">logTransaction</span>();                        <span class="comment">// base 构造函数中调用 virtual 函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span> :</span> <span class="keyword">public</span> Transaction &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">()</span> <span class="keyword">const</span></span>;    <span class="comment">// 继承类 BuyTransaction 内定义的日记函数</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTransaction</span> :</span> <span class="keyword">public</span> Transaction &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">()</span> <span class="keyword">const</span></span>;    <span class="comment">// 继承类 SellTransaction 内定义的日记函数</span></span><br><span class="line">    ...                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这上面的函数继承构造看似合理，但如果我们初始化一个 <code>BuyTransaction</code> 对象，就会发现问题了。初始化构造继承类对象时，基类对象的成分会首先构造妥当，这个行为发生在继承类单独成分构造之前。而基类 <code>Transaction</code> 构造时会调用 <code>logTransaction</code> 函数，且被调用的是 <code>Transaction</code> 中的版本，而非 <code>BuyTransaction</code> 中的版本。导致我们如上初始化的 <code>BuyTransaction</code> 对象表现与基类一样。也就这样理解，在 base class 构造期间，virtual 函数并非 virtual 函数。</p><p>而这种先完全构造好 base class 的行为也是合理的：如果基类初始化时调用了继承类的成员，而这些成员未初始化，则大大增加了不确定性。</p><p>唯一能避免上面的情况的做法就是，确定我们构造函数与析构函数都没有调用 virtual 函数，且它们调用的所有函数也服从这一约束—不调用 virtual 函数。</p><p>那上面这个问题怎么解决呢？也就是如何保证对象创建时能有正确版本的 <code>logTransaction</code> 函数被调用？</p><p>一种做法是，虽然我们没办法把使用 <code>virtual</code> 函数从基类向下调用，但是可以<em>让继承类向上传递足够信息给基类构造函数</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Transaction</span><span class="params">(<span class="keyword">const</span> std::string&amp; logInfo)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logTransaction</span><span class="params">(<span class="keyword">const</span> std::string&amp; logInfo)</span> <span class="keyword">const</span></span>; <span class="comment">// non-virtual</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transaction::<span class="built_in">Transaction</span>(<span class="keyword">const</span> std::string&amp; logInfo) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">logTransaction</span>(logInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTransaction</span>:</span> <span class="keyword">public</span> Transaction &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BuyTransaction</span>(parameters) : <span class="built_in">Transaction</span>(<span class="built_in">createLogString</span>(parameters)) </span><br><span class="line">    &#123;...&#125;    \\ 将 log 信息传给基类构造函数</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> std::string <span class="title">createLogString</span><span class="params">(parameter)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意到<code>private static</code> 的用法。比起使用成员初值列 (member initialization list) 的基类初始化方法，利用辅助函数传递值给基类的方法更方便。且此函数为 <code>static</code>，就保证了在基类初始化时指向的继承类成员变量是已经初始化好了的。</p><h4 id="Item-10-令赋值操作符返回一个-this-的引用"><a href="#Item-10-令赋值操作符返回一个-this-的引用" class="headerlink" title="Item 10. 令赋值操作符返回一个 *this 的引用"></a>Item 10. 令赋值操作符返回一个 *this 的引用</h4><p><strong>Have assignment operators return a reference to *this</strong></p><p>在赋值时，对于所有内置类型以及 STL 库中提供的类型如 <code>string</code>, <code>vector</code>,<code>complex</code>, <code>tr1::shared_ptr</code>等，我们发现 C++   可以满足连续赋值的形式，比如 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line">x = y = z = <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>为了实现这样的连续赋值，赋值操作符需要返回一个指向操作符左边实参的引用，这时一个我们在为 classes 实现赋值操作时应该遵守的协议：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">    <span class="comment">// 返回指向当前对象的引用</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不仅标准赋值形式适用，还适用于所有赋值相关运算</span></span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，这个协议不是强制的，因此，即使不遵守，在编译时也能通过，但是因为几乎所有标准类型都遵守这个协议，所以建议在自己定义的时候也遵守。</p><h4 id="Item-11-在-operator-操作符里面处理自赋值"><a href="#Item-11-在-operator-操作符里面处理自赋值" class="headerlink" title="Item 11. 在 operator= 操作符里面处理自赋值"></a>Item 11. 在 <code>operator=</code> 操作符里面处理自赋值</h4><p><strong>Handle assignment to self in operator=</strong></p><p>自赋值，或者自我赋值，是指对象被赋值给自己，典型的场景有如下几个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象，赋值给自己</span></span><br><span class="line">Widget w;</span><br><span class="line">...</span><br><span class="line">w = w;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 i = j 时，自我赋值</span></span><br><span class="line">a[i] = a[j];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 px 与 py 指向同一个东西</span></span><br><span class="line">*px = *py;</span><br></pre></td></tr></table></figure><p>这些不明显的自赋值现象，都是 alias 别名带来的结果。一般来说，如果某段代码操作指针或者引用，而它们又被用来”指向多个想同类型的对象”时，就可能出现指向同一个对象的情况。</p><h5 id="自赋值陷阱例子"><a href="#自赋值陷阱例子" class="headerlink" title="自赋值陷阱例子"></a>自赋值陷阱例子</h5><p>如果遵循后面要提到的 Item 13 与 Item 14，我们会运用对象来管理资源，且可以确定资源管理对象在 copy 发生时有正确的行为。此时，赋值操作符自赋值也许是安全的。但是，如果尝试自行管理资源（写一个用于资源管理的 class 时），我们就可能掉进在停止使用资源之前意外释放资源的情况。文中举了一个这样的例子，我们建立一个 class 来保存一个指针，该指针指向一块动态分配的 bitmap：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bitmap</span> &#123;</span>...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    Bitmap* pb;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们需要实现一个 <code>operator=</code>赋值操作符，去更新位图 </p><h5 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h5><p>最初始的版本，貌似合理，但是如果 *this 和 rhs 是同一个对象，则可能出现问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb); <span class="comment">// 可能会因为自赋值而报错</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h5><p>修改版本，先判断是否自赋值，再执行。这个保证了自我赋值是安全的，但是如果 <code>new Bitmap</code> 导致异常，会产生一个指向被删除 <code>Bitmap</code> 的指针，我们无法安全删除，也无法安全读取，因此这一版本的 <code>operator=</code> 不具备异常安全性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb); <span class="comment">// 可能会因为自赋值而报错</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Version-3"><a href="#Version-3" class="headerlink" title="Version 3"></a>Version 3</h5><p>把焦点放在异常安全性上，因为当 <code>operator=</code> 具备异常安全性时，它自然就具备了自赋值安全性。如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">    Bitmap* pOrig = pb;</span><br><span class="line">    pb = <span class="keyword">new</span> <span class="built_in">Bitmap</span>(*rhs.pb); <span class="comment">// copy assignment;</span></span><br><span class="line">    <span class="keyword">delete</span> pOrig;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意，自赋值的时候，依然需要复制一份原来的值，可能不高效。可以考虑使用 Version 2 的方法加入一个 identity test，但需要考察是否有必要，比如这种自赋值出现的频率是否能 cover 住新增控制流分支与代码的效率降低。</p><h5 id="Version-4"><a href="#Version-4" class="headerlink" title="Version 4"></a>Version 4</h5><p>采用 copy and swap 技术，这个技术在 pb 文件的赋值操作中经常用到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Widget&amp; rhs)</span></span>;     <span class="comment">// 交换 *this 和 rhs 数据</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget&amp; rhs) &#123;</span><br><span class="line">    Widget <span class="built_in">temp</span>(rhs);</span><br><span class="line">    <span class="built_in">swap</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or </span></span><br><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(<span class="keyword">const</span> Widget rhs) &#123;</span><br><span class="line">    <span class="built_in">swap</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 损失了函数的清晰性。</span></span><br></pre></td></tr></table></figure><h4 id="Item-12-复制对象的每一个成分"><a href="#Item-12-复制对象的每一个成分" class="headerlink" title="Item 12. 复制对象的每一个成分"></a>Item 12. 复制对象的每一个成分</h4><p><strong>Copy all parts of an object</strong></p><p>当我们不用编辑器默认生成的 copying 函数，而自己声明 copying 函数时，即使这个 copying 函数有明显的错误，比如少引入了对象的一部分 private 成员变量时，编辑器依然不会报错。所以，如果我们在 class 中添加一个成员变量，我们必须同时修改 copying 函数。我们需要修改所有构造函数，以及任何非标准形式的 <code>operator=</code>。</p><p>一旦还有继承类，这种潜在的危机就更不容易被察觉。有些继承类，其 copy 构造函数看似copy 了类里所有声明的变量，但是因为没有制定实参传给基类构造函数，所以基类成分会被不带实参的基类 default 构造函数初始化。copy assignment 操作符的整体流程同上。</p><p>在任何时候只要我们为继承类编写 copying 函数，我们就必须小心赋值其基类成分。需要注意这些成分是 private 的，所以无法直接访问它们，而应该用继承类的 copying 函数调用相应的基类函数。</p><p>综上，当我们需要编写一个 copying 函数时，我们需要保证</p><ol><li><p>复制所有的 local 成员变量</p></li><li><p>调用所有基类适当的 copying 函数</p></li></ol><p>需要注意的是，令 copy 赋值操作符调用 copy 构造函数是不合理的，这时在构造一个存在的对象。同样，让 copy 构造函数调用 copy 赋值操作符，同样无意义，我们无法对一个为构造好的对象赋值。</p><p>如果 copy 构造函数和 copy assignment 操作符有相近的代码，最好的处理方式是建立一个成员函数供两者调用，这个函数往往是 private 且常被命名为 <code>init</code>。（是不是很熟悉？）</p>]]></content>
      
      
      <categories>
          
          <category> Coding Language </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 书籍笔记 </tag>
            
            <tag> 构造 </tag>
            
            <tag> 析构 </tag>
            
            <tag> 赋值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alias Table Sampling</title>
      <link href="/2022/01/23/alias-table-sampling/"/>
      <url>/2022/01/23/alias-table-sampling/</url>
      
        <content type="html"><![CDATA[<h3 id="离散按概率随机抽样算法-Alias-method">离散按概率随机抽样算法 - Alias method</h3><p>因为最近学习图嵌入 graph embedding 的相关操作与算法，发现无论在使用 deepwalk, LINE, node2vec 还是 SDNE 等图嵌入方法时，随机游走选择下一个节点都会用到一种按概率采样的方法，也就是 Alias 方法。第一次学习到这个算法，是在转专业刷知乎是看到的，想来也是很奇妙，果然有些优秀的算法容易被人提起并记住。这种方法因为其 $O(1)$ 的时间复杂度，大幅加速了候选集的生成。接下来的章节将主要讲解一些相关的随机抽样算法，最后再讲到 Alias method。</p><h4 id="问题阐述">问题阐述</h4><p>假设候选集为 $M$ 个事件，用 $1, … ,m$ 对这些时间编号。这些事件互斥，发生的概率为 $p_i, i = 1, …, m$，满足 $\sum^m_{i = 1} p_i = 1$。问，如何产生一个事件发生器，根据发生概率去产生事件呢？</p><h4 id="Solution-1：preSum-方法">Solution 1：preSum 方法</h4><p>步骤：</p><ul><li><p>通过数组 $p_i$ 依照前缀和方法生成 prefix Sum 数组 <code>presum</code>。亦将概率密度函数&quot;积分&quot;成概率分布函数</p></li><li><p>产生 0 - 1 的随机数，判断随机数处于哪个概率区间，返回对应的事件。</p></li></ul><p>复杂度分析：</p><ul><li><p>时间复杂度: 产生 <code>presum</code> 数组 $O(n)$，返回随机事件使用二分法 $(O(logn))$</p></li><li><p>空间复杂度：维护 <code>presum</code> 数组 $O(n)$</p></li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">preSum_method</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; presum;</span><br><span class="line">    std::random_device rd;</span><br><span class="line">    <span class="function">std::default_random_engine <span class="title">eng</span><span class="params">(rd())</span></span>;</span><br><span class="line">    <span class="function">std::uniform_real_distribution&lt;<span class="keyword">float</span>&gt; <span class="title">distr</span><span class="params">(FLOAT_MIN, FLOAT_MAX)</span></span>;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">preSum_method</span>(vector&lt;<span class="keyword">float</span>&gt;&amp; prob) &#123;</span><br><span class="line">        presum.<span class="built_in">reserve</span>(prob.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="number">0.0f</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != prob.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            presum[i + <span class="number">1</span>] = presum[i] + prob[i];    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">generate_case</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = presum.<span class="built_in">size</span>() - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">float</span> random_num = <span class="built_in">distri</span>(eng);</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (random_num &lt; nums[mid + <span class="number">1</span>] &amp;&amp; random_num &gt;= nums[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (random_num &gt;= nums[mid + <span class="number">1</span>]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Solution-2-预设候选集法">Solution 2 : 预设候选集法</h4><p>步骤，</p><ul><li><p>根据概率生成一个很大的候选集</p></li><li><p>通过随机数的值返回对应候选集位置的事件</p></li></ul><p>复杂度分析：</p><ul><li><p>产出候选集的时间复杂度 $O(N)$，$N$ 与精度有关，返回随机事件 $O(1)$</p></li><li><p>空间复杂度 $O(N)$</p></li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandidateSet</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; candidate_set;</span><br><span class="line">    <span class="keyword">int</span> P;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CandidateSet</span>(vector&lt;<span class="keyword">float</span>&gt;&amp; prob, <span class="keyword">int</span> precision) &#123;</span><br><span class="line">        P = <span class="number">10</span> ** precision;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != prob.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">temp</span><span class="params">(i, (<span class="keyword">int</span>) (i * P))</span></span>;</span><br><span class="line">            std::<span class="built_in">copy</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>(), std::<span class="built_in">back_insert</span>(candidate_set));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">generate_case</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> random_number = <span class="built_in">rand</span>() % P;</span><br><span class="line">        <span class="keyword">return</span> candidate_set[random_number];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种方法主要的弊端在于需要申请很大一块连续空间来存储候选集。</p><h4 id="Solution-3-Alias-Method">Solution 3 : Alias Method</h4><p>本文的重点。主要的创新点在于建表环节。我们考虑到等概率抽样的时间复杂度为 $O(1)$，而对二项分布的时间进行抽样的时间复杂度也是 $O(1)$。因此，整个时间的思路变成了如何把依概率抽样的时间转变为等概率抽样。</p><p>alias method 考虑维护一个 alias 表，里面有 $M$(事件个数) 个值得数组，对数组中的每个元素，是一个二项分布参数的三元组<code>prob, lower_event, higher_event</code>。通过等概率选取数组的元素，再依概率选择二元事件，我们就可以完成依概率对多元事件的抽样。</p><p>步骤：</p><ul><li><p>制表。两张表：</p><ul><li><p>等概率表，大小为 $M$</p></li><li><p>维护两个队列，small, large 分别存放小于 1 和 大于 1 的时间下标</p></li><li><p>每次从 small，large 中各取一个，用 large 里的值填补 small 的，使 small 的整体概率等于 1，然后根据 large 剩余的整体概率，将元素重新放回 large 或 small 中。</p></li><li><p>所有的概率都等于 1</p></li></ul></li><li><p>采样</p></li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliasMethod</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; alias_method;</span><br><span class="line">    <span class="keyword">int</span> multiplier;</span><br><span class="line">    std::random_device rd;</span><br><span class="line">    <span class="function">std::default_random_engine <span class="title">eng</span><span class="params">(rd())</span></span>;</span><br><span class="line">    <span class="function">std::uniform_real_distribution&lt;<span class="keyword">float</span>&gt; <span class="title">distr</span><span class="params">(FLOAT_MIN, FLOAT_MAX)</span></span>;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CandidateSet</span>(vector&lt;<span class="keyword">float</span>&gt;&amp; prob, <span class="keyword">int</span> precision) &#123;</span><br><span class="line">        std::queue&lt;<span class="keyword">int</span>&gt; large, small;</span><br><span class="line">        multiplier = prob.<span class="built_in">size</span>();</span><br><span class="line">        alias_method.<span class="built_in">reserve</span>(multiplier);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != multiplier; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> new_prob = prob[i] * multiplier;</span><br><span class="line">            <span class="keyword">if</span> (new_prob &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                small.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (new_prob &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                large.<span class="built_in">push</span>(i)</span><br><span class="line">            &#125;</span><br><span class="line">            alias_method[i] = new_prob == <span class="number">1</span> ? &#123;new_prob, i&#125; : &#123;new_prob, <span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!large.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> large_pos = large.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">int</span> small_pos = small.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">auto</span>&amp; l = alias_method[large_pos];</span><br><span class="line">            large.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">auto</span>&amp; s = alias_method[small_pos];</span><br><span class="line">            small.<span class="built_in">pop</span>();</span><br><span class="line">            l.first -= s.first;</span><br><span class="line">            s.second = large_pos;</span><br><span class="line">            <span class="keyword">if</span> (l.first &lt; <span class="number">1</span>) small.<span class="built_in">push</span>(large_pos);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (l.first &gt; <span class="number">1</span>) large.<span class="built_in">push</span>(large_pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">generate_case</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> random_case = <span class="built_in">rand</span>() % multiplier;</span><br><span class="line">        <span class="keyword">float</span> random_num = <span class="built_in">distri</span>(eng);</span><br><span class="line">        <span class="keyword">auto</span>&amp; temp = alias_method[random_case];</span><br><span class="line">        <span class="keyword">return</span> temp.first &lt;= random_num ? random_case : temp.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Probability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Probability </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embedding Introduction (VI)</title>
      <link href="/2022/01/22/Embedding-Introduction-VI/"/>
      <url>/2022/01/22/Embedding-Introduction-VI/</url>
      
        <content type="html"><![CDATA[<h4 id="SDNE-Structural-Deep-Network-Embedding">SDNE : Structural Deep Network Embedding</h4><p>DeepWalk, LINE, Node2vec 这几个 Graph Embedding  的方法，在训练 Embedding 的时候使用的都是 skip-gram 的模型结构。这个模型结构只有一层隐藏层，很难学到一些高阶非线性的特征。而 SDNE 为了表达高阶非线性，引入了更深的网络结构。</p><h4 id="训练网络结构">训练网络结构</h4><p>SDNE 使用的训练框架是一种半监督式的深度模型训练框架。其整体的网络结构如下：</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-VI/SDNE_top.png" alt="SDNE_framework"></p><p>首先搞清楚一边的深层网络结构 ： Autoencoder</p><h5 id="Autoencoder-for-second-order-proximity">Autoencoder for second-order proximity</h5><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-VI/autoencoder.png" alt="SDNE_autoencoder"></p><p>如上图，为一个 autoencoder 的基本结构。我们自下往上的看。</p><p>输入层 $x_i \in R^{|V|}$ ， $|V|$ 为所有节点的数量。如果 $(i, j)$ 边存在，则 $x_{ij} &gt; 0$，可以理解为 $x_{ij} = w_{ij}$ 为 edge $(i,j)$ 的边权，否则，$x_{ij} = 0$。</p><p>紫色部分是 encoder，是将稀疏向量 $x_i$ 降维，使之稠密的过程。</p><p>中间蓝色部分就是每个顶点 $i$ 对应的输出 embedding $y_i^{(K)}$ 。</p><p>深蓝色部分则是 decoder，可以认为是紫色部分的 revert，升维，使之稀疏，最终输出向量 $\hat{x_i}$。</p><p>整个 autoencoder 的过程是无监督的。在迭代过程中，我们需要计算输入向量 $x_i$ 与向量 $\hat{x_i}$ 的 loss，认为是二阶近邻关系的目标函数表达。</p><p>这个 loss 表示为：</p><p>$$<br>\begin{aligned}<br>\mathcal{L}_{2nd} &amp;=  \sum^n_i |(\mathbf{\hat{x}}_i - \mathbf{x}_i) \bigodot  \mathbf{b}_i|^2_2  \\<br>&amp;= |(\hat{X}_i - X_i) \bigodot  B |^2_F<br>\end{aligned}<br>$$</p><p>其中 $\bigodot$ 表达 Hadamard 乘积，即按位置相乘之和。如果 $s_{i,j} = 0$，则 $b_{i,j} = 1$。否则 $b_{i,j} = \beta &gt; 1$。因此，通过将临接矩阵 $S$作为输入，使用修改的深层 autoencoder，有相似邻居结构的顶点会在表达空间 embedding 中靠近。</p><h5 id="Supervised-component-for-first-order-proximity">Supervised component for first-order proximity</h5><p>除了 global 的网络结构，我们也需要抓住局部结构，这里的局部结构在文中专指 first-order proximity。损失函数可从网络图中得到：</p><p>$$<br>\begin{aligned}<br>\mathcal{L}_{1st} &amp;= \sum^n_{i,j = 1} s_{i,j}|y^{K}_i - y^{K}_j|^2_2\\<br>&amp;= \sum^n_{i,j = 1} s_{i,j}|y_i - y_j|^2_2<br>\end{aligned}<br>$$</p><p>(这里出现 markdown 与 mathjax 对 _ 的转义出现冲突，导致数学公式显示有问题。需要再 _ 前加下划线解决。)</p><p>这个损失函数表征的是，如果两个节点相连，则存在一定的相似性，如果权重越大，相似性越高。公式中的 $y$ 表示自编码器的中间层输出。</p><h5 id="整个模型损失函数">整个模型损失函数</h5><p>整个模型的损失函数结合了一阶和二阶 proximity 相关的目标函数，同时引入了一个正则项：</p><p>$$<br>\mathcal{L}_{reg} = \frac{1}{2}\sum^K_{k = 1}(|W^{(k)} |^2_F + |\hat{W}^{(k)} |^2_F)<br>$$</p><p>其中 $W^{(k)}$ 与 $\hat{W}^{(k)}$ 分别代表自编码器中 encoder 和 decoder 网络的权重。</p><p>整体损失函数如下：</p><p>$$<br>\begin{aligned}<br>\mathcal{L}_{mix} &amp;= \mathcal{L}_{2nd} + \alpha\mathcal{L}_{1st} + \mu\mathcal{L}_{reg} \\<br>&amp;= |(\hat{X}_i - X_i) \bigodot  B |^2_F + \alpha \sum^n_{i,j = 1} s_{i,j}|y_i - y_j|^2_2 + \mu\mathcal{L}_{reg}<br>\end{aligned}<br>$$</p><p>这个损失函数在实验效果上明显由于 LINE，但是因为网络结构更加复杂，输入输出中又分厂稀疏，因此时间复杂度较高，是一个优化的方向。</p><h4 id="Reference-12">Reference</h4><p><a href="https://www.kdd.org/kdd2016/papers/files/rfp0191-wangAemb.pdf">Structural Deep Network Embedding</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Embedding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> Graph Embedding </tag>
            
            <tag> SDNE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embedding Introduction (V)</title>
      <link href="/2022/01/21/Embedding-Introduction-V/"/>
      <url>/2022/01/21/Embedding-Introduction-V/</url>
      
        <content type="html"><![CDATA[<h3 id="DeepWalk-的优化-Node2Vec">DeepWalk 的优化 - Node2Vec</h3><p>可以这么理解，deepwalk 主要是基于 DFS 邻域的 graph embedding 算法，而 LINE 则是基于 BFS 邻域的 graph embedding 算法。接下来介绍的 node2vec 则是总和考虑 DFS 与 BFS 的 graph embedding 算法，是结合 DFS 与 BFS 的随机游走的 deep walk。</p><h4 id="算法原理">算法原理</h4><p>定义：</p><ol><li><p>$f(u)$ 为顶点 $u$ 到其对应 embedding 向量的映射</p></li><li><p>$N_S(u)$ 为在采样策略 $S$ 下顶点 $u$ 的近邻顶点集合</p></li></ol><p>而 node2vec 优化的目标比较直接，就是希望找到最优映射 $f(u)$，使近邻顶点出现的概率最大化，即</p><p>$$<br>max_f\sum_{u \in V} \log Pr(N_s(u) | f(u))<br>$$</p><p>为了使该最优化问题可解，文章做了两个假设：</p><ol><li><p>条件独立性假设。即在给定顶点 $u$ 下，其近邻顶点出现的概率，与近邻集合中其他顶点无关。即</p><p>$$<br>Pr(N_s(u) | f(u)) = \prod_{n_i\in N_s(u)} Pr(n_i | f(u))<br>$$</p></li><li><p>特征空间对称性假设。与 LINE 不同，假设一个顶点无论是作为原顶点还是近邻顶点，其共享同一套 embedding 向量。对应表达为</p><p>$$<br>Pr(n_i | f(u)) = \frac{\exp(f(n_i)\cdot f(u))}{\sum_{v\in V} \exp(f(v)\cdot f(u))}<br>$$</p></li></ol><p>最终，根据假设条件，我们的最终目标函数表示为</p><p>$$<br>max_f\sum_{v\in V}\left[-\log Z_u + \sum_{n_i\in N_s(u)} f(n_i) \cdot f(u)\right]<br>$$</p><p>其中 $Z_u = \sum_{n\in N_s(u)} \exp(f(n_i)\cdot f(u))$ 的计算代价高，需要采用负采样技术进行优化。</p><h4 id="采样策略">采样策略</h4><p>相比随机游走 deep walk 中的采样方式， node2vec 也是随机游走，但是是一种依概率随机游走，这种随机游走是有偏的。</p><p>比如给定当前顶点 $v$，访问下一个顶点 $x$ 的概率我们设定为</p><p>$$<br>P(c_i = x | c_{ - 1} = v) = \frac{\pi_{vx}}{Z} \text{, if } (v, x) \in E<br>$$</p><p>$$<br>P(c_i = x | c_{i - 1} = v) = 0  \text{, otherwise}<br>$$</p><p>其中 $\pi_{vx}$ 表示顶点 $v$  与顶点 $x$ 之间的转移概率（未 normalized）， $Z$ 则是归一化常数</p><p>文中 node2vec 引入两个参数 $p$ 与 $q$ 来控制随机游走的策略。</p><p>$$<br>\pi_{vx} = \alpha_{pq}(t, x)\cdot w_{vx}<br>$$</p><p>其中 $w_{vx}$ 表示顶点 $v$ 与 $x$ 之间的边权。而 $\alpha_{pq}$ 则与上一次游走起点 $t$ 和当次游走终点 $x$ 有关，可知两个顶点的距离 $d_{tx}$ 可以有三个取值：</p><ul><li>$d_{tx} = 0$，即两点属于同一个点，此时设定 $\alpha_{pq}(t, x) = \frac{1}{p}$，所以 $p$ 又被称为 return parameter，表示马上重新访问原来 node 的可能性。</li><li>$d_{tx} = 1$，即 $t, x$ 与 $v$ 三点均相邻，此时设定 $\alpha_{pq}(t, x) = 1$</li><li>$d_{tx} = 2$，即 $x$ 远离 $t$ 点，两点不直接相邻，此时设定 $\alpha_{pq}(t, x) = \frac{1}{q}$，所以 $q$ 又被称为 in-out parameter。</li></ul><p>从解释中可以看出， $p, q$ 值的设定，描述了算法对 BFS 与 DFS random walk 的倾向性。具体的取值可以通过下图直观看出:</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-V/node2vec_pm.png" alt="node2vec_parameter"></p><h4 id="算法策略">算法策略</h4><p>采样顶点序列后，后续的方式与 deepwalk 与 LINE 一致，均通过 word2vec 的方法去学习 embedding 向量。node2vec 与 LINE 一样，是依概率抽取邻接点，同时采用 alias table 算法进行采样。</p><p>其核心算法伪代码如下：</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-V/node2vec_algorithm.png" alt="node2vec_algorithm"></p><h4 id="Reference-11">Reference</h4><p><a href="https://www.kdd.org/kdd2016/papers/files/rfp0218-groverA.pdf">node2vec: Scalable Feature Learning for Networks</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Embedding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> Graph Embedding </tag>
            
            <tag> Node2Vec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embedding-Introduction (IV)</title>
      <link href="/2022/01/21/Embedding-Introduction-IV/"/>
      <url>/2022/01/21/Embedding-Introduction-IV/</url>
      
        <content type="html"><![CDATA[<h4 id="LINE">LINE</h4><p>接 <a href="https://jason24-zeng.github.io/2022/01/20/Embedding-Introduction-III/">上一章节</a></p><p>我们已经定义好处理 LINE 的一阶与二阶 proximity 的目标函数，这一节主要是讨论函数的优化。</p><h4 id="模型优化">模型优化</h4><h6 id="回顾">回顾</h6><p>first-order proximity 目标函数</p><p>$$<br>O_1 = - \sum_{(i, j)\in E} w_{ij}\log p_1(v_i, v_j) \tag{1}<br>$$</p><p>second-order proximity 目标函数</p><p>$$<br>O_2 = - \sum_{(i, j)\in E} w_{ij} \log p_2(v_j|v_i) \tag{2}<br>$$</p><p>计算 second-order proximity 消耗较高，因为需要计算每个顶点的条件概率，然后把这些概率加和。为了解决这个消耗问题，文中采用了负采样的方法，通过每条边的一些噪音分布去采样多条负边。对边 $(i, j)$ 的目标函数变为：</p><p>$$<br>\log\sigma(\vec{u_j}^{1T} \cdot \vec{u_i}) + \sum^K_{i = 1} E_{v_n \sim P_n(v)}\left[\log\sigma(\vec{u}_n^{1T} \cdot \vec{u}_i)\right] \tag{3}<br>$$</p><p>其中，$\sigma(x) = 1 / (1 + \exp(-x))$ 是 sigmod 函数。前一项基于观察的边建模，后一项对从噪音分布采样得到的负边建模。$K$ 表示负边的总数。我们设定 $P_n(v) \propto d_v^{3/4}$，而 $d_v$ 为顶点 $v$ 的出度。</p><p>对于目标函数 $1$， 存在一个平凡解：$\forall i k, u_{ik} = \infty$。为了避免这个问题，我们依然使用方程 $3$ 中的负采样方法，只是把 $\vec{u_j}^{1T}$ 换成 $\vec{u_j}^{T}$ 即可。</p><p>为了最优化方程 $3$，文中采用了异步随机梯度算法（asynchronous stochastic gradient algorithm, ASGD）。每一步，ASGD 算法采样了一 mini-batch 的边，然后更新模型参数。如果一条边 $(i, j)$ 被采样，则梯度 (顶点 $i$ 的embedding 向量 $\vec{u_i}$) 会被使用一下方程计算</p><p>$$<br>\frac{\partial O_2}{\partial \vec{u_i}} = w_{ij}\cdot \frac{\partial \log p_2(v_j|v_i)}{\partial \vec{u_i}}<br>$$</p><p>这样的问题在于梯度会被乘以边权，当边权方差较大时，可能出现问题。</p><p>上面的问题主要出在对于不同的边权，固定的学习率不合适。所以一个简单的解决方法是将边权为 $w$ 的边 unfold 成 $w$ 条 0 - 1 边。这可以解决问题，但是会显著提升内存占用。文中的解决方法实际上是，将 $w$ 作为作为概率分布的权重，随机采样样本边，将取到的样本边作为 0 - 1 边去训练。这个想法与 XGBoost 中的直方图思想如出一辙。</p><p>而随机采样要达到空间时间上的最优还要考虑一些算法上的优化。我们假设 $W = (w_1, w_2, …, w_{|E|})$ 表示一系列边的权重，我们可以通过计算一个 $w_{sum} = \sum_{i = 1}^{|E|}$ 作为随机数的上界，判断这个随机数处于哪个区间，便能 sample 出边，这样的算法时间复杂度是 $O(|E|)$ ，在边很多的情况下时间花销较大。为了解决这个问题，可以考虑使用 <a href="https://blog.csdn.net/haolexiao/article/details/65157026">alias table 方法</a>，这个方法可以再 $O(1)$ 的时间复杂度下从固定的离散分布里根据权重筛选样本。</p><p>由此，我们可知，采样一条边需要 $O(1)$ 的时间复杂度，那么负采样优化后整体的时间花销为 $O(d(K + 1))$ ，$K$ 为负采样数量。因此，每一步迭代会花费 $O(dK)$ 次。而实际情况下，每次消耗的时间正比于边的数量 $|E|$。因此，LINE 的整体时间复杂度是 $O(dK|E|)$，与顶点数量无关。</p><h6 id="总结-2">总结</h6><p>从上面的理论推到可以看出，边的采样策略在不影响整体效果的前提下提升了随机梯度下降的效率。</p><h1></h1>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Embedding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> Graph Embedding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embedding Introduction (III)</title>
      <link href="/2022/01/20/Embedding-Introduction-III/"/>
      <url>/2022/01/20/Embedding-Introduction-III/</url>
      
        <content type="html"><![CDATA[<h3 id="Embedding-在互联网场景的使用-Graph-Embedding">Embedding 在互联网场景的使用 - Graph Embedding</h3><p>之前讲的 word2vec 和 item2vec 实际上都是在一个序列的基础上获得对象的隐式向量表达的。但是在互联网场景下，数据对象之前可能更多得呈现的是图结构，比如使用用户行为生成的物品全局关系图，或者物品属性知识图谱等。这种背景下，传统的序列 embedding 方法无法很好处理，因此，对图结构中节点进行表达的 graph embedding 便成了新的研究方向。随着大数据时代的到来，推荐系统愈发重要，这项技术也因此愈发受到重视。</p><h3 id="Graph-Embedding-早期方法-Deep-Walk">Graph Embedding 早期方法 - Deep Walk</h3><p>基于随机游走生成图结构对应的节点序列，是早期 Graph Embedding 的一种重要方法。其允许重复访问已访问节点，使用深度优先（DFS）进行序列生成。</p><p>其思路是，给定一个节点，通过随机采样的方法，获得该节点相邻节点中的一个，以此作为序列的下一个节点。重复上述步骤，知道序列长度达到预期长度。再使用 skip-gram word2vec 的方法表达向量。使用了 Hierachical Softmax 中构造 Huffman 树的技巧优化了 softmax 的时间复杂度</p><p>其伪代码表示为：</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-III/fake_coding.png" alt="graph embedding deep walk algorithm"></p><p>使用随机游走的方法创建训练数据，这种方法的特点：</p><ul><li><p>可以实现机器、进程或线程维度的并行</p></li><li><p>适合动态更新，更新时只对新增节点增加</p></li></ul><p>该算法的超参数有：</p><ul><li><p>skip-gram 的窗口大小 $w$</p></li><li><p>生成向量的维度，隐藏层的神经元个数 $d$</p></li><li><p>每个节点的游走次数 $\gamma$</p></li><li><p>游走长度 $t$</p></li></ul><p>可认为 DeepWalk 是 Graph Embedding 的 baseline 方法。</p><p>参考：<a href="https://arxiv.org/pdf/1403.6652.pdf">DeepWalk: Online Learning of Social Representations</a></p><h3 id="Large-scale-Information-Network-Embedding-LINE">Large-scale Information Network Embedding (LINE)</h3><p>LINE 将非常大的信息网络映射到了低维向量空间（embedding）中，对可视化，节点分类等问题都有不错的效果。其相对 DeepWalk 这种纯粹随机游走的序列生成方式有以下两个特点：</p><ol><li><p>可以应用到有向图、无向图以及边有权重的网络</p></li><li><p>使用一阶、二阶的临近关系引入目标函数，从而使最终学出的 node embedding 的分布更加均匀平滑，避免 node embedding 聚集的情况发生</p></li><li><p>适用于大规模 network 上进行应用(Deep Walk 也适用)</p></li></ol><h4 id="问题定义">问题定义</h4><h5 id="Information-Network">Information Network</h5><p>$G = (V, E)$ 其中 $V$ 是 vertex 节点集合，$E$ 是 edge 边集合。定义 $e = (u, v) \in E$ 是一个有序的节点对，边权 $W_{uv} &gt; 0$。如果 $G$ 为无向图 (undirected graph)，则有 $(u, v) = (v, u)$ 与 $W_{uv} =  W_{vu}$。而如果 $G$ 为有向图 (directed graph)，那么有 $(u, v) \neq (v, u)$ 与 $W_{uv} \neq W_{vu}$</p><h5 id="First-order-Proximity-local-network-structure-一阶近邻关系">First-order Proximity (local network structure) 一阶近邻关系</h5><p>边权 $W_{uv}$ 就表示节点 $u$ 与 $v$ 之间的 first-order proximity。两个节点之间相连的边权重越高，则这两个点越相似。若两点之间没有边，则 first-order proximity 为 0</p><h5 id="Second-order-Proximity-global-netword-structure-二阶近邻关系">Second-order Proximity (global netword structure) 二阶近邻关系</h5><p>首先定义一个 $P_u = (W_{u,1},…, W_{u, |V|})$ 便是节点 $u$ 与其他所有节点的 first-order proximity 组成的集合。$u$ 与 $v$ 之间的相似度，则可以通过 $P_u$ 与 $P_v$ 之间的权重重合程度来决定相似度。两个节点的 neighbors 重复得越多，两者越相似。特别的，如果没有节点同时指向 $u$ 与 $v$ 或者 被 $u$ 与 $v$ 所指向，则 $u$ 与 $v$ 之间的 second-order proximity 为 0。</p><p>如下图的一个 Information Netword 的 toy model，可以看出 5 与 6 之间有较高的 second-order proximity，而 6 与 7 之间有较高的 first-order proximity。</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-III/line_information_network.png" alt="Information Network"></p><h5 id="Large-scale-Information-Network-Embedding">Large-scale Information Network Embedding</h5><p>使用一个低维向量去表示整个 Information Network，即学习一个函数：</p><p>$$<br>f_G : V \rightarrow R^d, where \ d \ll|V|<br>$$</p><h4 id="模型描述">模型描述</h4><p>如前面所说，一个好的 Information Network Embedding 既需要有 first-order proximity 的信息，也不能忽视 second-order proximity。</p><h5 id="考虑-first-order-proximity-进行建模">考虑 first-order proximity 进行建模</h5><p>对于每个无向边 $(i,j)$，我们可以定义点 $v_i$ 与 $v_j$ 的联合概率如下：</p><p>$$<br>p_1(v_i, v_j) = \frac{1}{1 + \exp(-\vec{u_i}^T\cdot\vec{u_j})} \tag{1}<br>$$</p><p>其中，$\vec{u_i}\in R^d$ 是节点 $v_i$ 的低维向量表达。方程 $1$ 定义了一个在空间 $V \times V$ 的分布函数，它的经验概率可以被定义为</p><p>$$<br>\hat{p_1}(i,j) = w_{ij}/W<br>$$</p><p>其中，</p><p>$$<br>W = {\sum_{(i, j)\in E} w_{ij}}<br>$$</p><p>为了维护 first-order proximity，一个直白的想法是最小化目标函数</p><p>$$<br>O_1 = d(\hat{p}_1(\cdot ,\cdot), p_1(\cdot ,\cdot)) \tag{2}<br>$$</p><p>其中 $d(\cdot ,\cdot)$ 为两个分布之间的距离，这个距离我们选择使用 KL 散度来表达，同时取出其中的常数项，我们就有：</p><p>$$<br>O_1 = - \sum_{(i, j)\in E} w_{ij}\log p_1(v_i, v_j) \tag{3}<br>$$</p><p>需要注意到 first-order proximity 只对无向图有用。通过找到集合 ${\vec{u_i}}_{i = 1…|V|}$ ，使方程 $3$目标函数最小化，我们可以在 $d$ 维空间中表示每个节点。</p><h5 id="考虑-second-order-proximity-建模">考虑 second-order proximity 建模</h5><p>second-order proximity 对有向图与无向图都可行。在考虑 second-order proximity  是，节点扮演了两个角色：</p><ul><li><p>节点本身</p></li><li><p>其他节点的上下文 context</p></li></ul><p>为了区分这两个角色，我们引入了两个向量 $\vec{u}_i$ 与 $\vec{u}'_i$，分别对应魔偶个节点 $v_i$ 的上述两种角色的表达。</p><p>首先我们定义一个上下文 $v_j$ 被 $v_i$ 产生的概率:</p><p>$$<br>p_2(v_j|v_i) = \frac{\exp(\vec{u}_i’^T \cdot \vec{u}_j)}{W(\vec{u}_j)} \tag{4}<br>$$</p><p>其中，</p><p>$$<br>W(\vec{u}_j) = \sum \exp(\vec{u}_k’^T \cdot \vec{u}_j)<br>$$</p><p>该方程实际定义了一个网络里所有节点为节点 $v_i$ context 的条件概率。如果 $p2(\cdot | v2)$ 与 $p2(\cdot | v1)$ 的概率分布相似，则这两个点的 second-order proximity 是相似的。</p><p>为了维护 second-order proximity，我们需要逼近经验分布函数 $\hat{p}_2(\cdot | v_i)$，因此，我们需要最小化一下目标函数</p><p>$$<br>O_2 = \sum_{i \in V} \lambda_i d(\hat{p}_2(\cdot|v_i), p_2(\cdot|v_i)) \tag{5}<br>$$</p><p>因为网络中每个节点的重要性不同，我们引入 $\lambda_i$ 表达网络中节点 $i$ 的优先级，它可以通过度数衡量 (需要进一步探讨，应该是图论中的出入度计算) 或者通过一些算法预估 (比如 PageRank)。</p><p>经验分布</p><p>$$<br>\hat{p_2} (\cdot \vert v_i) = w_{ij} / d_i<br>$$</p><p>其中 $w_{ij}$ 为边 $(i,j)$ 的权重， $d_i = \sum_{k\in N(i)}  w_{ik}$ 表示顶点 $i$ 的出度 (out-degree), $N(i)$ 则是节点 $v_i$ 的 out-neighbors。</p><p>在文章中，简单得将 $\lambda_i$ 设成顶点 $i$ 的度数，即 $\lambda_i = d_i$， 同时采用 KL 散度作为距离方程，同时去掉常数项，则最终我们目标函数变为</p><p>$$<br>O_2 = - \sum_{(i, j)\in E} w_{ij} \log p_2(v_j|v_i)<br>$$</p><p>通过学习集合 ${\vec{u_i}}_{i = 1…|V|} $ 与</p><p>$ {\vec{u_i}'}_{i = 1…|V|}$ 最小化目标，我们可以用一个 $d$ 维向量 $\vec{u_i}$ 表达每一个顶点。</p><h5 id="Combine-一阶与二阶-proximity">Combine 一阶与二阶 proximity</h5><p>文章中分别训练一阶 proximity 和 二阶 proximity，然后将得到的 embedding 拼起来作为该顶点的 embedding 表达。一个更原则性的方式是将目标函数联立起来求。</p><p>参考：<a href="https://arxiv.org/pdf/1503.03578.pdf">LINE: Large-scale Information Network Embedding</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Embedding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> Graph Embedding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embedding Introduction (II)</title>
      <link href="/2022/01/20/Embedding-Introduction-II/"/>
      <url>/2022/01/20/Embedding-Introduction-II/</url>
      
        <content type="html"><![CDATA[<h4 id="生成-Embedding-的方法-II">生成 Embedding 的方法 (II)</h4><h4 id="Item2Vec-Word2Vec-的衍生">Item2Vec : Word2Vec 的衍生</h4><p>Word2Vec 那种用向量 embedding 去表达单词的方法因其 state-of-art 的性能而在 NLP 领域备受关注。同样的，这种技术/技巧在 推荐系统领域也受到了追捧。特别的，通过使用 skip-gram using negative sampling 的 i2i 协同过滤(CF) 算法因为比肩 SVN CF 算法而受到推崇。这边博客，也主要讲解 Item2Vec 中的一些特点。</p><h4 id="Skip-gram-with-negative-sampling-SGNS">Skip-gram with negative sampling (SGNS)</h4><p>Reference: <a href="https://arxiv.org/pdf/1301.3781.pdf%C3%AC%E2%80%94%20%C3%AC%E2%80%9E%C5%93">Efficient estimation of word representations in vector space</a></p><p>SGNS 方法旨在找到单词的表达，使其能够抓住该单词与句子中周围单词的关系。</p><p>我们用 $(w_i)^K_{i = 1}$ 表示一批连续的单词，其中，这些词都来自于一个有限词汇集 $W = {w_i}^W_{i=1}$。 从而，我们可以表达 skip - gram 的目标，最大化：</p><p>$$<br>\frac{1}{K} \sum^K_{i = 1} \sum_{-c &lt;= j &lt;= c, j \neq 0} \log{p(w_{i + j} | w_i)} \tag{1}<br>$$</p><p>其中，$c$ 是上下文的窗口大小，该大小可能取决于 $w_i$。而 $p(w_{i + j} | w_i)$ 则是 softmax 函数：</p><p>$$<br>p(w_{i + j} | w_i) = \frac{\exp(u^T_iv_j)}{\sum_{k\in I_w}\exp(u^T_iv^T_k)}<br>$$</p><p>其中 $u_i\in U(\mathcal{R^m}) $ 和 $v_i \in V(\mathcal{R^m})$ 分别是 $w_i \in W$ 中关于目标和上下文表达的隐向量。$m$ 通常通过经验与数据集的大小去选择。使用 softmax 函数不太现实，因为计算 $\nabla p(w_{i + j} | w_i)$ 的时间复杂度是线性的，与词汇集的大小有关。</p><h5 id="负采样">负采样</h5><p>为了不大幅影响精度的情况下环节上述计算问题。我们将上面的 softmax 函数换成了</p><p>$$<br>p(w_{i + j} | w_i) = \sigma(u^T_iv_j)\prod^N_{k=1} \sigma(u^T_iv^T_k)<br>$$</p><p>其中，$\sigma(x) = \frac{1}{1 + \exp(-x)}$，$N$ 是一个决定每个正样本所需负例样本数的参数。而 $w_i$ 中的负样本原则概率通过一元模型函数（Unigram Distribution） $f(w_i)$ 的 $\frac{3}{4}$ 次方来获得。整个公式为：</p><p>$$<br>P(w_i) = \frac{f(w_i)^{3/4}}{\sum_{j = 0}^n(f(w_i)^{3/4})}<br>$$</p><p>这个一元函数实际上就是将样本中的所有词写到了一个数组中，重复的词重复写到数组的不同位置(使用每个单词的索引填充)，直接通过生成随机数的方式去返回该随机数对应位置的数。如此依赖，如果数组中出现次数多的数，被负采样的概率就更大。</p><p>使用 $\frac{3}{4}$ 次方，更多的是一种经验效果，好于单纯用一元函数模型。</p><h5 id="降采样">降采样</h5><p>除此以外，为了解决稀有与高频词的不平衡问题，文章中提出了一种降采样的方法。</p><p>已知一个输入词序列，我们以一个概率去丢弃每个词：</p><p>$$<br>p(discard | w) = 1 - \sqrt{\frac{\rho}{f(w)}}<br>$$</p><p>其中 $f(w)$ 为该词的词频，$\rho$ 为一个预设阈值。这个操作据报道能提升训练进程，并大幅提升稀有词的表达。</p><p>以上就是<strong>SGNS</strong> 的两大操作 负采样 与 降采样。</p><h4 id="Item2Vec-思路">Item2Vec 思路</h4><p>SGNS 方法被使用到了 item-based 的协同过滤推荐系统中。有些场景，我们没办法达到用户与一系列商品之间的关联信息，这时候，通过商品侧做的协同过滤就尤为重要。使用 SGNS 的想法也很显然，只要我们把一集合的商品认为是一序列的单词，则使用 embedding 去获得商品间的相关性与获得单词之间的相关性就并无不同。</p><p>从序列到集合后，时空信息就丢失了，也就是丢掉了它们之间的相邻关系。而 Item2Vec 就考虑丢掉这部分信息，他们认为在同一个 set 中的商品就应该是相关的，无论用户看到这个 set 的顺序或者时间是如何的。虽然这个假设在其他场景下不成立，不过可以认为在当前场景下是合理的。</p><p>因此，我们认为每对在同一个子集合中的商品是正例。这意味着集合的大小决定了窗口的大小。特别地，对于一个给定集合的商品，方程 $(1)$ 变为</p><p>$$<br>\frac{1}{K} \sum^K_{i = 1} \sum^K_{j \neq i} \log p(w_j | w_i)<br>$$</p><p>整个集合大小为 $K$，计算两两 pair 之间的 log 概率之和。</p><p>另一种方法，则保持方程 $(1)$ 不变，在执行期间 shuffle 每个集合内的商品。实验中发现两种方法最终的表现差不多。</p><p>后面的步骤与上一个 Section 保持一致，这就是 Item2Vec。工作中，我们使用 $u_i$ 作为第 $i$ 个商品的表达，而一对商品的相关性通过 cosine 相关性计算得到。另一种方法是使用 $v_i$，或者 $v_i + u_i$，或者它俩的 concatenation $[u^T_iv^T_i]^T$。最后两种方法优势有更好的效果。</p><h4 id="Item2Vec-效果">Item2Vec 效果</h4><p>将 Item2Vec 生成的 embedding 用作聚类，与基于 SVD 方法的用户 embedding 聚类结果进行比较，向量维度保持一致，即 $m = 40$。对比数据为音乐领域里 web 音乐人根据类别的聚类，同一个颜色的节点表示相同类型的音乐人。对比结果如下</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction-II/item2vec.jpg" alt="item2vec.jpg"></p><p>可以看出，两者差距不大，甚至 Item2Vec 的效果更好。</p><h4 id="Reference-10">Reference</h4><p><a href="https://arxiv.org/pdf/1603.04259v2.pdf">Item2Vec: Neural Item Embedding for Collaborative Filtering</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Embedding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> Item2Vec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embedding Introduction (I)</title>
      <link href="/2022/01/19/Embedding-Introduction/"/>
      <url>/2022/01/19/Embedding-Introduction/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是-Embedding">什么是 Embedding ?</h4><p>广义得说， Embedding 就是一种用向量表达某个词汇的方式。其特点就是可以捕捉到文档中单词的上下文、语义与句法相似以及与其他单词的关系等。</p><p>考虑一下我们之前在做类别特征时常用的 one-hot 方法，假设整个上下文的单词量有 L，对任意一个单词，我们将其做 one-hot 转换成一个长度为 L 的向量，其中某个位置为 1，其余位置为 0。这样我们的确可以将单词映射到一个向量表达上。但当前还有一个问题：这样的表达可以表征两个单词的相关性么？</p><p>答案是不能，因为两个单词的计算 cosine 为 0。(在不同位置包含一个 1)</p><p>所以怎么才能体现相关性呢？可以考虑将这些 one-hot 矩阵映射到一个低位空间，使其向量值变稠密，同时保证“相似”词的 embedding 内积接近 1，不相似词的 embedding 内积接近 0，“相反”词的 embedding 内积接近 -1。这样的向量表达，就是我们常说的 embedding。</p><p>但是，这样的 embedding 需要如何生成呢？这篇文章就主要讲讲生成 embedding 的几种方法。</p><h4 id="生成-word-embeddings-的方式-一">生成 word embeddings 的方式 (一)</h4><h5 id="Word2Vec">Word2Vec</h5><p>word2vec 是一种使用浅神经网络训练 word embedding 的一种流行技巧。它主要通过两种包含神经网络的方式获得 embedding:   Skip Gram 和 CBOW (Common Bag Of Words)</p><p>而 embedding 从模型的什么部分获得呢？当模型训练完后，实际上我们得到了神经网络的权重，因为输入层是 one-hot 格式，到隐藏层时，相当于只有这个词对应的 embedding 被激活了，因而可以用这个 embedding 来表达该单词。</p><h6 id="CBOW-模型">CBOW 模型</h6><p>CBOW 模型：使用每个词的上下文作为输入，以预测准确这个词为训练目标，去训练整个神经网络模型。</p><p>只包含一个上下文单词 one-hot 作为输入的神经网络整体实际结构如下：</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction/CBOW_word2vec.png" alt="CBOW_word2vec.png"></p><p>这个输入，或者说这个上下文单词是一个大小为 V 的 one-hot 编码向量。隐藏层包含 N 个神经元，而输出则同样是一个 Size 为 V 的向量，其中的值通过了 Softmax 做归一化。目的是预测目标单词。</p><p>我们可以看到其中有两个权重矩阵 $W_{vn}$ 和 $W’_{nv}$ 。</p><p>这个神经网络中，唯一牵涉到非线性的地方就是输出层的 softmax，而没有用到其他激活函数，比如 sigmoid, tanh 或者 ReLU。</p><p>同样的，如果我们考虑的上下文单词不是一个，而是多个，则可以考虑如下结构：</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction/CBOW_word2vec_2.png" alt="CBOW_word2vec_2.png"></p><p>将 C 个上下文单词考虑入模型，均使用权重矩阵 $W_{vn}$ 计算隐藏层输入，再对所有 C 取平均值得到输出层的输入。这样，我们就可以使用上下文单词产生词表达。</p><h6 id="Skip-Gram-模型">Skip-Gram 模型</h6><p>整体结构如下，从某种意义上，这个结构就像 CBOW 结构翻转过来一样</p><p><img src="https://jason24-zeng.github.io/img/Embedding-Introduction/skip_gram.png" alt="skip_gram.png"></p><p>对每个上下文位置，我们会得到 C 个 向量来预测词的可能性分布，每个向量对应一个单词。</p><p>两种模型都使用 backward propagation 负反馈的方式去迭代学习。</p><h6 id="优势场景">优势场景</h6><p>对于少量数据，skip gram 工作表现得更好，并且更能表达稀有词语。</p><p>CBOW 模型则对更频繁出现的词语表达更好，且更快。</p><h6 id="算法优化">算法优化</h6><p>文章中还提到了使用 Hierachical Softmax 和 Skip Gram 负采样的方式，使计算变得更有效率。详细文章可以参考<a href="https://arxiv.org/abs/1310.4546">原文</a> 或<a href="https://arxiv.org/pdf/1411.2738.pdf">Xin Rong 的论文</a></p><h5 id="总结-3">总结</h5><p>本文主要介绍了一下词表达的一种形式 embedding，并简单地讲述了 embedding 的两种基础训练方法：CBOW 和 skip-gram。</p><p>在学习过程中，发现一个有趣的地方。通过输入层与隐藏层间权重矩阵的某一列来表达某个单词，这个做法和 Factorization Machine 中某个特征的表达所用的矩阵有异曲同工之妙。同时，也希望自己能在一点点积累知识的同时能继续提升自己的写作能力。 并能手动复现这个基础的训练代码。``</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> Embedding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> Word2Vec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序代码实现</title>
      <link href="/2022/01/17/heap-sort/"/>
      <url>/2022/01/17/heap-sort/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是堆排序？"><a href="#什么是堆排序？" class="headerlink" title="什么是堆排序？"></a>什么是堆排序？</h4><p>堆排序是一种基于比较的排序算法，需要借助于一种叫做二叉堆（Binary Heap）的数据结构。其操作和选择排序很相似，均可以认为是从某个数据结构中选出最小/最大的数出来。</p><h5 id="什么是二叉堆？"><a href="#什么是二叉堆？" class="headerlink" title="什么是二叉堆？"></a>什么是二叉堆？</h5><p>在定义二叉堆之前，让我们先声明一个满二叉树（完全二叉树）的定义。一个满二叉树是一个除最后一层以外，其他层都被完全占满的二叉树。同时，满二叉树还要求树的节点尽可能地靠近左边。</p><p>而二叉堆，则是一个有特殊排序的满二叉树，他每个父节点的值，都比两个子节点的值大(或者小)。前者，被称为最大堆，后者，则是最小堆。这样的堆我们可以用二叉树或者数组来表达。</p><h5 id="怎么用数组的格式表达二叉堆？"><a href="#怎么用数组的格式表达二叉堆？" class="headerlink" title="怎么用数组的格式表达二叉堆？"></a>怎么用数组的格式表达二叉堆？</h5><p>我们要充分利用好满二叉树每一层个数固定的性质。可以看到，如果一个父节点被存在了 <code>i</code> 位置，则其左子节点的位置为 <code>2 * i + 1</code>，而右子节点的位置为 <code>2 * i + 2</code>。这样的 array-base 的表达相比二叉树充分利用了空间。</p><h4 id="Heapify-过程"><a href="#Heapify-过程" class="headerlink" title="Heapify 过程"></a>Heapify 过程</h4><p>将一个二叉树重构成一个堆数据结构的过程，被称作 heapify。</p><h5 id="增序的堆排序算法"><a href="#增序的堆排序算法" class="headerlink" title="增序的堆排序算法"></a>增序的堆排序算法</h5><p>步骤：</p><ol><li><p>通过输入数据件一个最大堆。</p></li><li><p>最大的元素被放到了堆顶。用这个堆的最后一个值与堆顶交换，并使这个堆的 size 缩小一位。最终 heapify 树的根节点。</p></li><li><p>重复第 2 步，知道堆只剩一个元素。</p></li></ol><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// heapify 一个根节点在 i 位置的子树，堆的大小为 n</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> largest = i;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &lt; n &amp;&amp; arr[l] &gt; arr[largest]) largest = l;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; n &amp;&amp; arr[r] &gt; arr[largest]) largest = r;</span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[largest]);</span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序过程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0x01 建堆, 从第一个有子节点的节点开始 heapify</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0x02 一个一个从 heap 中取出最大元素，放到最后，直到堆只剩一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);</span><br><span class="line">        <span class="built_in">heapify</span>(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; arr = &#123;<span class="number">17</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">heapSort</span>(arr, n);</span><br><span class="line">    <span class="built_in">printArray</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Sort </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Sort </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票问题系列--动态规划求解</title>
      <link href="/2022/01/16/stock-problem-dp/"/>
      <url>/2022/01/16/stock-problem-dp/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近刷到多道 Best Time to Buy and Sell Stock 系列的问题，想要探究一下这类题目的通用动态规划解法。为此，特写了此文，找出这类问题的练习，供有面试需求的相关同学学习。</p><h5 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h5><ol><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description">121. Best Time to Buy and Sell Stock</a></li><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/#/description">122. Best Time to Buy and Sell Stock II</a></li><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/#/description">123. Best Time to Buy and Sell Stock III</a></li><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/#/description">188. Best Time to Buy and Sell Stock IV</a></li><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/#/description">309. Best Time to Buy and Sell Stock with Cooldown</a></li><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/">714. Best Time to Buy and Sell Stock with Transaction Fee</a></li></ol><h5 id="通用问题描述"><a href="#通用问题描述" class="headerlink" title="通用问题描述"></a>通用问题描述</h5><p>给定一个数组 <code>vector&lt;int&gt;&amp; prices</code> ，这个数组代表了一个序列化的股票价格，在某些限制条件下，求能通过这些天的股票买卖获得的最大收益。</p><p>首先，我们来记录一下可能的限制条件：</p><ul><li><p>交易次数 <code>int k</code></p></li><li><p>交易冷却时间 <code>int time</code></p></li><li><p>交易费用 <code>int fee</code></p></li></ul><p>以及一些注明 (notation)：</p><ul><li>股票价格所处日期<code>int i</code>，第一天为 <code>0</code></li></ul><p>我们可以看到，上述的这类问题，其实都存在很明显的状态转移关系。</p><ul><li><p>当天有两个状态，持有股票与不持有股票</p></li><li><p>当天的状态，会与前面某天的状态有关。比如如果今天持有股票，则要么昨天也持有股票，要么需要再冷却期内不持有股票。</p></li></ul><h4 id="通用问题状态转移关系"><a href="#通用问题状态转移关系" class="headerlink" title="通用问题状态转移关系"></a>通用问题状态转移关系</h4><p>我们定义一个三维矩阵<code>T</code>， 其中 <code>T[i][k][0]</code> 表示累计到第 <code>i</code> 天，进行了最多 <code>k</code> 次交易，并在第 <code>i</code> 天手上不持有股票下的最大收益；同样的，<code>T[i][k][0]</code> 表示累计到第 <code>i</code> 天，进行了最多 <code>k</code> 次交易，并在第 <code>i</code> 天手上持有股票的最大收益。目前我们可以依此写出base 条件与递归条件：</p><ol><li><p>base 情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始计算股票前一天的初始化，不持有股票认为是合法的，为 0，持有股票认为是不可能</span></span><br><span class="line">T[<span class="number">-1</span>][k][<span class="number">0</span>] = <span class="number">0</span>, T[<span class="number">-1</span>][k][<span class="number">1</span>] = INT_MIN</span><br><span class="line"><span class="comment">// 无可交易次数时的初始化，不持有股票认为是合法的，为 0，持有股票认为是不可能</span></span><br><span class="line">T[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, T[i][<span class="number">0</span>][<span class="number">1</span>] = INT_MIN</span><br></pre></td></tr></table></figure></li><li><p>递归关系：<br>2.1. 不持有股票的状态转移:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当天不持有股票的最大收益，认为是前一天不持有股票的最大收益，与前一天持有当卖出股票的最大收益之间的最大值。</span></span><br><span class="line">T[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][k][<span class="number">0</span>], T[i - <span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line"><span class="comment">// 如果考虑有交易费用，后一项的最大收益需要减去交易费用</span></span><br><span class="line">T[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][k][<span class="number">0</span>], T[i - <span class="number">1</span>][k][<span class="number">1</span>] + prices[i] - fee);</span><br></pre></td></tr></table></figure><p>2.2. 持有股票的状态转移:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当天持有股票的最大收益，认为是前一天持有股票的最大收益，与前一天不持有而今天买入股票的最大收益</span></span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][k][<span class="number">1</span>], T[i - <span class="number">1</span>][k - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line"><span class="comment">// 如果考虑交易费用，除了上面 2.1 在卖出时支付交易费用外，还可以考虑是在买入时支付交易费用</span></span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][k][<span class="number">1</span>], T[i - <span class="number">1</span>][k - <span class="number">1</span>][<span class="number">0</span>] - prices[i] - fee);</span><br><span class="line"><span class="comment">// 如果考虑 cooldown 时间，那么我们能买入的条件也就不是前一天不持有股票，而是 cooldown 时间前不持有股票</span></span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][k][<span class="number">1</span>], T[i - time][k - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br></pre></td></tr></table></figure></li></ol><h4 id="特殊-cases-的求解"><a href="#特殊-cases-的求解" class="headerlink" title="特殊 cases 的求解"></a>特殊 cases 的求解</h4><p>有了上述的通用状态转移关系，我们可以比较轻松得求解参数值固定的情况。</p><h5 id="case-I-k-1"><a href="#case-I-k-1" class="headerlink" title="case I : k = 1"></a>case I : <code>k = 1</code></h5><p>当交易次数限制为 <code>k = 1</code> 时，每天 <code>i</code> 我们需要考虑两个状态下的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], T[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">T[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(T[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], T[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] - prices[i]) = <span class="built_in">max</span>(T[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], - prices[i]);</span><br></pre></td></tr></table></figure><p>从而，这道题的解法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T_10 = <span class="number">0</span>, T_11 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            <span class="comment">// 每次迭代最多只会修改其中一个值</span></span><br><span class="line">            T_10 = <span class="built_in">max</span>(T_10, T_11 + price);</span><br><span class="line">            T_11 = <span class="built_in">max</span>(T_11, -price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T_10;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Case-II-k-INT-MAX"><a href="#Case-II-k-INT-MAX" class="headerlink" title="Case II: k = INT_MAX"></a>Case II: <code>k = INT_MAX</code></h5><p>这个时候，其实 <code>T[i-1][k-1][0] = T[i-1][k][0]</code> 且 <code>T[i-1][k-1][1] = T[i-1][k][1]</code></p><p>每天 <code>i</code> ，我们仍然有两个变量未知</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">0</span>], T[i<span class="number">-1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">1</span>], T[i<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">0</span>] - prices[i]) = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">1</span>], T[i<span class="number">-1</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p>从而，这道题的解法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T_k0 = <span class="number">0</span>, T_k1 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            <span class="keyword">int</span> T_k0_old = T_k0;</span><br><span class="line">            T_k0 = <span class="built_in">max</span>(T_k0, T_k1 + price);</span><br><span class="line">            T_k1 = <span class="built_in">max</span>(T_k1, T_k0_old - price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T_k0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Case-III-k-2"><a href="#Case-III-k-2" class="headerlink" title="Case III : k = 2"></a>Case III : <code>k = 2</code></h5><p>和 case I 很相似，不过现在每天需要考察四个变量，其状态转移关系为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T[i][<span class="number">2</span>][<span class="number">0</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][<span class="number">2</span>][<span class="number">0</span>], T[i<span class="number">-1</span>][<span class="number">2</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">T[i][<span class="number">2</span>][<span class="number">1</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][<span class="number">2</span>][<span class="number">1</span>], T[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">T[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">0</span>], T[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">T[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>], - prices[i])</span><br></pre></td></tr></table></figure><p>同理，解法为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T_10 = <span class="number">0</span>, T_11 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> T_20 = <span class="number">0</span>, T_21 = INT_MIN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            T_20 = <span class="built_in">max</span>(T_20, T_21 + price);</span><br><span class="line">            T_21 = <span class="built_in">max</span>(T_21, T_20 - price);</span><br><span class="line">            T_10 = <span class="built_in">max</span>(T_10, T_11 + price);</span><br><span class="line">            T_11 = <span class="built_in">max</span>(T_11, - price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T_20;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过这样的方法，我们可以解任意 k 的结果。</p><h5 id="Case-IV-k-INT-MAX-但是有冷却"><a href="#Case-IV-k-INT-MAX-但是有冷却" class="headerlink" title="Case IV : k = INT_MAX 但是有冷却"></a>Case IV : <code>k = INT_MAX</code> 但是有冷却</h5><p>我们考虑 cool down 为 1 的情况，也就是如果我们想要在第 <code>i</code> 天买股票，那么我们只能在第 <code>i - 2</code> 前将股票卖出。状态转移方程变为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">0</span>], T[i<span class="number">-1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">1</span>], T[i<span class="number">-2</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p>解法修改为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T_k0 = <span class="number">0</span>, T_k1 = INT_MIN, T_k0_pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            <span class="keyword">int</span> T_k0_old = T_k0;</span><br><span class="line">            T_k0 = <span class="built_in">max</span>(T_k0, T_k1 + price);</span><br><span class="line">            T_k1 = <span class="built_in">max</span>(T_k1, T_k0_pre - price);</span><br><span class="line">            T_k0_pre = T_k0_old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T_k0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Case-V-k-INT-MAX-有交易费用"><a href="#Case-V-k-INT-MAX-有交易费用" class="headerlink" title="Case V : k = INT_MAX 有交易费用"></a>Case V : <code>k = INT_MAX</code> 有交易费用</h5><p>在 case II 的基础上，考虑购买或卖出时收益多减去一个 fee 即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">0</span>], T[i<span class="number">-1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">1</span>], T[i<span class="number">-1</span>][k][<span class="number">0</span>] - prices[i] - fee)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T[i][k][<span class="number">0</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">0</span>], T[i<span class="number">-1</span>][k][<span class="number">1</span>] + prices[i] - fee)</span><br><span class="line">T[i][k][<span class="number">1</span>] = <span class="built_in">max</span>(T[i<span class="number">-1</span>][k][<span class="number">1</span>], T[i<span class="number">-1</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><h6 id="解法-I-买入时考虑费用"><a href="#解法-I-买入时考虑费用" class="headerlink" title="解法 I : 买入时考虑费用"></a>解法 I : 买入时考虑费用</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T_k0 = <span class="number">0</span>, T_k1 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            <span class="keyword">int</span> T_k0_old = T_k0;</span><br><span class="line">            T_k0 = <span class="built_in">max</span>(T_k0, T_k1 + price);</span><br><span class="line">            T_k1 = <span class="built_in">max</span>(T_k1, T_k0_old - price - fee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T_k0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="解法-II-：卖出时考虑费用"><a href="#解法-II-：卖出时考虑费用" class="headerlink" title="解法 II ：卖出时考虑费用"></a>解法 II ：卖出时考虑费用</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T_k0 = <span class="number">0</span>, T_k1 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            <span class="keyword">int</span> T_k0_old = T_k0;</span><br><span class="line">            T_k0 = <span class="built_in">max</span>(T_k0, T_k1 + price - fee);</span><br><span class="line">            T_k1 = <span class="built_in">max</span>(T_k1, T_k0_old - price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T_k0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>对于这一类股票交易相关的问题，动态规划均可求解。</p><p>重点需要关注：</p><ul><li><p>交易日期 <code>i</code></p></li><li><p>最大允许交易次数 <code>k</code></p></li><li><p>每天能有的状态</p></li></ul><p>只要我们弄清楚每天这些状态之间的转移关系，就可以轻松 solve 这一系列问题。同时，弄清楚状态转移关系，还能对空间复杂度进行优化，不再需要使用一个数组去保留每天交易状态的最值。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Self Introduction</title>
      <link href="/2022/01/15/self-introduction/"/>
      <url>/2022/01/15/self-introduction/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="499bd81e3739cec7f20344df8f07fc31580b079f6ebb95c1db81d42c3cece553">68a8c3278477baad47ac774912504a9c1bfd1ffdfa94ee256f03556bd03862034cac0e1195b211f513967ad3603a1e467416ec93d1bfeb239465f963cfa2593d4d1851c03907f3dfa769a26099aa688bd6a9c306381083e77a667906c5e12bdf4e30f7c39bcfc8c2d4f11c5bab3e6bcd4e17557281d8abee8f276d96ac7db87abde9e6b7ca12d3178edba6e9c407c9bd3627ee1f814388c6c16cac367c037141259d46b4513948398f4df629227e6498a823392caad5d69ea132e045b3c586fb74323ff44d7ae78ad0952445d2ecaffd3fdf5167d2a23c9907fdac6332a2e4acbe6e1157c0b6c47ec4af1bf3421de776d1a05a023e1de8f67ab4ee331add67d6d52293323a782aa08545876a7646c6ab45c8954d2e0ee99104c4f0a5557ce4f61a56ed25da2a6979ed2457409e769b4806ec2d3e1ceb1735ead6ef9f84ce2fc538ba15198e029d197e775b2465082023758d23093636309f9e4f56523ad4e860c9b98da884f4ed0f8611fbc056c7b00b0016fcbb7d8a621d39d3968b755e17ad77ccbef0c928ac6c0799f24f5916072cb13ae85947f33a907cd0b60242a4eb9fc023f73305d62846ffccb079baa265688ce39e3c8616e8978f7e0bd8144ccc9be4713715c6286bea0332ebb8e29383889ecac5adac5d205d1dfd8b736962c6d94143faa6b2fe6893b0466fb0a2714ff101d2e51fc7212788e61730c55f3a06d472e302cdc42222fa477076ef3ed220138a2036bad7f6af3eee46100712e7d26ef045d656ffd087aa7dd7c721d272e314b416da596d24d45f7d28a17af5a3b8441fd6d6198a7a0d5b0d4724a06dcf33ba4774096efa037650dac307f347d456cc4be59a544897971ba15cb38bcc2409118addebf22bdd738f789e53b7cfa7be89d539cb11ad5c04896925b9c60c75f1c15e1bac2245afa6e1245be3cd95becef7af343be779d07d9f4881e7a9c3d8a96369cb16d2158c1d936d2dcd45b8ec84bb9b8bc233e91d013a5ce9a786eb75fc2575a711afed0d8b983c1e149805849d2e799e01ca4ed7eb674a6957002a24d288c2c012906026a02c9e856dc308d58326aa5dab0548c292123fb9d9576026fbca2d6331a1ea40926d2ce6dd616b7aeb6a7cc907a88301144a16ebd7c8b8c2ec8472276dd16ca0c69143df5ab38ca8a712d6083e5007a27087925a6fe1e37f2a21</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
          <category> Resume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Resume </tag>
            
            <tag> Self-Introduction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 Hexo 博客</title>
      <link href="/2022/01/14/%E6%90%AD%E5%BB%BAHexo-blog/"/>
      <url>/2022/01/14/%E6%90%AD%E5%BB%BAHexo-blog/</url>
      
        <content type="html"><![CDATA[<h4 id="Mac-安装-Node-js">Mac 安装 Node.js</h4><ul><li>最常用的方法是通过 Homebrew 进行 Node.js 和 npm 的安装。常用指令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新与安装 node</span></span><br><span class="line">brew update</span><br><span class="line">brew install node</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查安装版本</span></span><br><span class="line">brew list</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 node</span></span><br><span class="line">brew uninstall node</span><br></pre></td></tr></table></figure><h4 id="安装-Hexo">安装 Hexo</h4><ul><li>使用 npm 命令安装 Hexo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者安装 懒人包</span></span><br><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="初始化-Hexo">初始化 Hexo</h4><ol><li><p>初始化一个 directory: <code>mkdir ~/hexo/dir &amp;&amp; cd ~/hexo/dir</code></p></li><li><p>初始化博客：<code>hexo init</code></p></li><li><p>静态编译博客 : <code>hexo g</code> \ <code>hexo generate</code></p></li><li><p>离线检查博客效果：<code>hexo s</code>\ <code>hexo server</code> 可以通过访问  <code>http://localhost:4000/</code> 本地检查效果</p></li><li><p>修改 config 文件，路径在 <code>~/hexo/dir/_config.yml</code>，需要修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type :</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repository:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>推到线上 <code>hexo d</code> \ <code>hexo deploy (-m message)</code></p></li></ol><h4 id="写博客并推到线上">写博客并推到线上</h4><ol><li><p>新建博客：<code>hexo n &quot;your title&quot;</code>\ <code>hexo new &quot;your title&quot;</code></p></li><li><p>进入相应路径修改 md 文件(写博客)： <code>cd ~/hexo/dir/source/_posts/your title.md</code></p></li><li><p>静态编译博客 : <code>hexo g</code> \ <code>hexo generate</code></p></li><li><p>离线检查博客效果：<code>hexo s</code>\ <code>hexo server</code> 可以通过访问 <code>http://localhost:4000/</code> 本地检查效果</p></li><li><p>推到线上 <code>hexo d</code> \ <code>hexo deploy (-m message)</code></p></li></ol><h4 id="个性化-Hexo-博客">个性化 Hexo 博客</h4><ul><li>参考：<a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔</a></li></ul><h5 id="如何对每一篇-post-做相应的修改？">如何对每一篇 post 做相应的修改？</h5><p>可参考 <a href="https://blog.csdn.net/qq_43857095/article/details/108306164"># Hexo butterfly 自定义文章封面 &amp;&amp; 主页顶部图片更改</a></p><p>比较重要的几个参数：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">Hexo</span>, <span class="string">Nodejs</span>, <span class="string">git</span>] <span class="comment"># 或者用 - 隔行分隔</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">对这篇</span> <span class="string">blog</span> <span class="string">的描述</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">/img/avocado.jpeg</span> <span class="comment"># 头部图片</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span> <span class="comment"># 是否现实评论</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/img/hashtag.jpeg</span> <span class="comment"># 封面图片</span></span><br></pre></td></tr></table></figure><p>如果没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h5 id="如何自动生成-categories-页或者-tags-页？">如何自动生成 categories 页或者 tags 页？</h5><ol><li><p>创建 categories page 或者 tags page，这时会在 source 文件夹下生成相应子文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>在相应的子文件夹中会生成 <code>index.md</code> 文件, 修改 <a href="http://index.md">index.md</a> 中的头文件配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-01-14 20:10:25</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/img/category.png</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">/img/category.png</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <code>_config.butterfly.yml</code> 文件中的以下 command</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">My</span> <span class="string">Github</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/Jason24-Zeng/Jason24-Zeng.github.io/tree/main</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="literal">false</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure></li><li><p>执行以下执行更新 blog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
